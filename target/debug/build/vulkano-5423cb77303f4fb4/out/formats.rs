// This file is auto-generated by vulkano autogen from vk.xml header version 191.
// It should not be edited manually. Changes should be made by editing autogen.

#[doc = r" An enumeration of all the possible formats."]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
#[repr(i32)]
#[allow(non_camel_case_types)]
pub enum Format {
    R4G4_UNORM_PACK8 = ash::vk::Format::R4G4_UNORM_PACK8.as_raw(),
    R4G4B4A4_UNORM_PACK16 = ash::vk::Format::R4G4B4A4_UNORM_PACK16.as_raw(),
    B4G4R4A4_UNORM_PACK16 = ash::vk::Format::B4G4R4A4_UNORM_PACK16.as_raw(),
    R5G6B5_UNORM_PACK16 = ash::vk::Format::R5G6B5_UNORM_PACK16.as_raw(),
    B5G6R5_UNORM_PACK16 = ash::vk::Format::B5G6R5_UNORM_PACK16.as_raw(),
    R5G5B5A1_UNORM_PACK16 = ash::vk::Format::R5G5B5A1_UNORM_PACK16.as_raw(),
    B5G5R5A1_UNORM_PACK16 = ash::vk::Format::B5G5R5A1_UNORM_PACK16.as_raw(),
    A1R5G5B5_UNORM_PACK16 = ash::vk::Format::A1R5G5B5_UNORM_PACK16.as_raw(),
    R8_UNORM = ash::vk::Format::R8_UNORM.as_raw(),
    R8_SNORM = ash::vk::Format::R8_SNORM.as_raw(),
    R8_USCALED = ash::vk::Format::R8_USCALED.as_raw(),
    R8_SSCALED = ash::vk::Format::R8_SSCALED.as_raw(),
    R8_UINT = ash::vk::Format::R8_UINT.as_raw(),
    R8_SINT = ash::vk::Format::R8_SINT.as_raw(),
    R8_SRGB = ash::vk::Format::R8_SRGB.as_raw(),
    R8G8_UNORM = ash::vk::Format::R8G8_UNORM.as_raw(),
    R8G8_SNORM = ash::vk::Format::R8G8_SNORM.as_raw(),
    R8G8_USCALED = ash::vk::Format::R8G8_USCALED.as_raw(),
    R8G8_SSCALED = ash::vk::Format::R8G8_SSCALED.as_raw(),
    R8G8_UINT = ash::vk::Format::R8G8_UINT.as_raw(),
    R8G8_SINT = ash::vk::Format::R8G8_SINT.as_raw(),
    R8G8_SRGB = ash::vk::Format::R8G8_SRGB.as_raw(),
    R8G8B8_UNORM = ash::vk::Format::R8G8B8_UNORM.as_raw(),
    R8G8B8_SNORM = ash::vk::Format::R8G8B8_SNORM.as_raw(),
    R8G8B8_USCALED = ash::vk::Format::R8G8B8_USCALED.as_raw(),
    R8G8B8_SSCALED = ash::vk::Format::R8G8B8_SSCALED.as_raw(),
    R8G8B8_UINT = ash::vk::Format::R8G8B8_UINT.as_raw(),
    R8G8B8_SINT = ash::vk::Format::R8G8B8_SINT.as_raw(),
    R8G8B8_SRGB = ash::vk::Format::R8G8B8_SRGB.as_raw(),
    B8G8R8_UNORM = ash::vk::Format::B8G8R8_UNORM.as_raw(),
    B8G8R8_SNORM = ash::vk::Format::B8G8R8_SNORM.as_raw(),
    B8G8R8_USCALED = ash::vk::Format::B8G8R8_USCALED.as_raw(),
    B8G8R8_SSCALED = ash::vk::Format::B8G8R8_SSCALED.as_raw(),
    B8G8R8_UINT = ash::vk::Format::B8G8R8_UINT.as_raw(),
    B8G8R8_SINT = ash::vk::Format::B8G8R8_SINT.as_raw(),
    B8G8R8_SRGB = ash::vk::Format::B8G8R8_SRGB.as_raw(),
    R8G8B8A8_UNORM = ash::vk::Format::R8G8B8A8_UNORM.as_raw(),
    R8G8B8A8_SNORM = ash::vk::Format::R8G8B8A8_SNORM.as_raw(),
    R8G8B8A8_USCALED = ash::vk::Format::R8G8B8A8_USCALED.as_raw(),
    R8G8B8A8_SSCALED = ash::vk::Format::R8G8B8A8_SSCALED.as_raw(),
    R8G8B8A8_UINT = ash::vk::Format::R8G8B8A8_UINT.as_raw(),
    R8G8B8A8_SINT = ash::vk::Format::R8G8B8A8_SINT.as_raw(),
    R8G8B8A8_SRGB = ash::vk::Format::R8G8B8A8_SRGB.as_raw(),
    B8G8R8A8_UNORM = ash::vk::Format::B8G8R8A8_UNORM.as_raw(),
    B8G8R8A8_SNORM = ash::vk::Format::B8G8R8A8_SNORM.as_raw(),
    B8G8R8A8_USCALED = ash::vk::Format::B8G8R8A8_USCALED.as_raw(),
    B8G8R8A8_SSCALED = ash::vk::Format::B8G8R8A8_SSCALED.as_raw(),
    B8G8R8A8_UINT = ash::vk::Format::B8G8R8A8_UINT.as_raw(),
    B8G8R8A8_SINT = ash::vk::Format::B8G8R8A8_SINT.as_raw(),
    B8G8R8A8_SRGB = ash::vk::Format::B8G8R8A8_SRGB.as_raw(),
    A8B8G8R8_UNORM_PACK32 = ash::vk::Format::A8B8G8R8_UNORM_PACK32.as_raw(),
    A8B8G8R8_SNORM_PACK32 = ash::vk::Format::A8B8G8R8_SNORM_PACK32.as_raw(),
    A8B8G8R8_USCALED_PACK32 = ash::vk::Format::A8B8G8R8_USCALED_PACK32.as_raw(),
    A8B8G8R8_SSCALED_PACK32 = ash::vk::Format::A8B8G8R8_SSCALED_PACK32.as_raw(),
    A8B8G8R8_UINT_PACK32 = ash::vk::Format::A8B8G8R8_UINT_PACK32.as_raw(),
    A8B8G8R8_SINT_PACK32 = ash::vk::Format::A8B8G8R8_SINT_PACK32.as_raw(),
    A8B8G8R8_SRGB_PACK32 = ash::vk::Format::A8B8G8R8_SRGB_PACK32.as_raw(),
    A2R10G10B10_UNORM_PACK32 = ash::vk::Format::A2R10G10B10_UNORM_PACK32.as_raw(),
    A2R10G10B10_SNORM_PACK32 = ash::vk::Format::A2R10G10B10_SNORM_PACK32.as_raw(),
    A2R10G10B10_USCALED_PACK32 = ash::vk::Format::A2R10G10B10_USCALED_PACK32.as_raw(),
    A2R10G10B10_SSCALED_PACK32 = ash::vk::Format::A2R10G10B10_SSCALED_PACK32.as_raw(),
    A2R10G10B10_UINT_PACK32 = ash::vk::Format::A2R10G10B10_UINT_PACK32.as_raw(),
    A2R10G10B10_SINT_PACK32 = ash::vk::Format::A2R10G10B10_SINT_PACK32.as_raw(),
    A2B10G10R10_UNORM_PACK32 = ash::vk::Format::A2B10G10R10_UNORM_PACK32.as_raw(),
    A2B10G10R10_SNORM_PACK32 = ash::vk::Format::A2B10G10R10_SNORM_PACK32.as_raw(),
    A2B10G10R10_USCALED_PACK32 = ash::vk::Format::A2B10G10R10_USCALED_PACK32.as_raw(),
    A2B10G10R10_SSCALED_PACK32 = ash::vk::Format::A2B10G10R10_SSCALED_PACK32.as_raw(),
    A2B10G10R10_UINT_PACK32 = ash::vk::Format::A2B10G10R10_UINT_PACK32.as_raw(),
    A2B10G10R10_SINT_PACK32 = ash::vk::Format::A2B10G10R10_SINT_PACK32.as_raw(),
    R16_UNORM = ash::vk::Format::R16_UNORM.as_raw(),
    R16_SNORM = ash::vk::Format::R16_SNORM.as_raw(),
    R16_USCALED = ash::vk::Format::R16_USCALED.as_raw(),
    R16_SSCALED = ash::vk::Format::R16_SSCALED.as_raw(),
    R16_UINT = ash::vk::Format::R16_UINT.as_raw(),
    R16_SINT = ash::vk::Format::R16_SINT.as_raw(),
    R16_SFLOAT = ash::vk::Format::R16_SFLOAT.as_raw(),
    R16G16_UNORM = ash::vk::Format::R16G16_UNORM.as_raw(),
    R16G16_SNORM = ash::vk::Format::R16G16_SNORM.as_raw(),
    R16G16_USCALED = ash::vk::Format::R16G16_USCALED.as_raw(),
    R16G16_SSCALED = ash::vk::Format::R16G16_SSCALED.as_raw(),
    R16G16_UINT = ash::vk::Format::R16G16_UINT.as_raw(),
    R16G16_SINT = ash::vk::Format::R16G16_SINT.as_raw(),
    R16G16_SFLOAT = ash::vk::Format::R16G16_SFLOAT.as_raw(),
    R16G16B16_UNORM = ash::vk::Format::R16G16B16_UNORM.as_raw(),
    R16G16B16_SNORM = ash::vk::Format::R16G16B16_SNORM.as_raw(),
    R16G16B16_USCALED = ash::vk::Format::R16G16B16_USCALED.as_raw(),
    R16G16B16_SSCALED = ash::vk::Format::R16G16B16_SSCALED.as_raw(),
    R16G16B16_UINT = ash::vk::Format::R16G16B16_UINT.as_raw(),
    R16G16B16_SINT = ash::vk::Format::R16G16B16_SINT.as_raw(),
    R16G16B16_SFLOAT = ash::vk::Format::R16G16B16_SFLOAT.as_raw(),
    R16G16B16A16_UNORM = ash::vk::Format::R16G16B16A16_UNORM.as_raw(),
    R16G16B16A16_SNORM = ash::vk::Format::R16G16B16A16_SNORM.as_raw(),
    R16G16B16A16_USCALED = ash::vk::Format::R16G16B16A16_USCALED.as_raw(),
    R16G16B16A16_SSCALED = ash::vk::Format::R16G16B16A16_SSCALED.as_raw(),
    R16G16B16A16_UINT = ash::vk::Format::R16G16B16A16_UINT.as_raw(),
    R16G16B16A16_SINT = ash::vk::Format::R16G16B16A16_SINT.as_raw(),
    R16G16B16A16_SFLOAT = ash::vk::Format::R16G16B16A16_SFLOAT.as_raw(),
    R32_UINT = ash::vk::Format::R32_UINT.as_raw(),
    R32_SINT = ash::vk::Format::R32_SINT.as_raw(),
    R32_SFLOAT = ash::vk::Format::R32_SFLOAT.as_raw(),
    R32G32_UINT = ash::vk::Format::R32G32_UINT.as_raw(),
    R32G32_SINT = ash::vk::Format::R32G32_SINT.as_raw(),
    R32G32_SFLOAT = ash::vk::Format::R32G32_SFLOAT.as_raw(),
    R32G32B32_UINT = ash::vk::Format::R32G32B32_UINT.as_raw(),
    R32G32B32_SINT = ash::vk::Format::R32G32B32_SINT.as_raw(),
    R32G32B32_SFLOAT = ash::vk::Format::R32G32B32_SFLOAT.as_raw(),
    R32G32B32A32_UINT = ash::vk::Format::R32G32B32A32_UINT.as_raw(),
    R32G32B32A32_SINT = ash::vk::Format::R32G32B32A32_SINT.as_raw(),
    R32G32B32A32_SFLOAT = ash::vk::Format::R32G32B32A32_SFLOAT.as_raw(),
    R64_UINT = ash::vk::Format::R64_UINT.as_raw(),
    R64_SINT = ash::vk::Format::R64_SINT.as_raw(),
    R64_SFLOAT = ash::vk::Format::R64_SFLOAT.as_raw(),
    R64G64_UINT = ash::vk::Format::R64G64_UINT.as_raw(),
    R64G64_SINT = ash::vk::Format::R64G64_SINT.as_raw(),
    R64G64_SFLOAT = ash::vk::Format::R64G64_SFLOAT.as_raw(),
    R64G64B64_UINT = ash::vk::Format::R64G64B64_UINT.as_raw(),
    R64G64B64_SINT = ash::vk::Format::R64G64B64_SINT.as_raw(),
    R64G64B64_SFLOAT = ash::vk::Format::R64G64B64_SFLOAT.as_raw(),
    R64G64B64A64_UINT = ash::vk::Format::R64G64B64A64_UINT.as_raw(),
    R64G64B64A64_SINT = ash::vk::Format::R64G64B64A64_SINT.as_raw(),
    R64G64B64A64_SFLOAT = ash::vk::Format::R64G64B64A64_SFLOAT.as_raw(),
    B10G11R11_UFLOAT_PACK32 = ash::vk::Format::B10G11R11_UFLOAT_PACK32.as_raw(),
    E5B9G9R9_UFLOAT_PACK32 = ash::vk::Format::E5B9G9R9_UFLOAT_PACK32.as_raw(),
    D16_UNORM = ash::vk::Format::D16_UNORM.as_raw(),
    X8_D24_UNORM_PACK32 = ash::vk::Format::X8_D24_UNORM_PACK32.as_raw(),
    D32_SFLOAT = ash::vk::Format::D32_SFLOAT.as_raw(),
    S8_UINT = ash::vk::Format::S8_UINT.as_raw(),
    D16_UNORM_S8_UINT = ash::vk::Format::D16_UNORM_S8_UINT.as_raw(),
    D24_UNORM_S8_UINT = ash::vk::Format::D24_UNORM_S8_UINT.as_raw(),
    D32_SFLOAT_S8_UINT = ash::vk::Format::D32_SFLOAT_S8_UINT.as_raw(),
    R10X6_UNORM_PACK16 = ash::vk::Format::R10X6_UNORM_PACK16.as_raw(),
    R10X6G10X6_UNORM_2PACK16 = ash::vk::Format::R10X6G10X6_UNORM_2PACK16.as_raw(),
    R10X6G10X6B10X6A10X6_UNORM_4PACK16 =
        ash::vk::Format::R10X6G10X6B10X6A10X6_UNORM_4PACK16.as_raw(),
    R12X4_UNORM_PACK16 = ash::vk::Format::R12X4_UNORM_PACK16.as_raw(),
    R12X4G12X4_UNORM_2PACK16 = ash::vk::Format::R12X4G12X4_UNORM_2PACK16.as_raw(),
    R12X4G12X4B12X4A12X4_UNORM_4PACK16 =
        ash::vk::Format::R12X4G12X4B12X4A12X4_UNORM_4PACK16.as_raw(),
    A4R4G4B4_UNORM_PACK16 = ash::vk::Format::A4R4G4B4_UNORM_PACK16_EXT.as_raw(),
    A4B4G4R4_UNORM_PACK16 = ash::vk::Format::A4B4G4R4_UNORM_PACK16_EXT.as_raw(),
    BC1_RGB_UNORM_BLOCK = ash::vk::Format::BC1_RGB_UNORM_BLOCK.as_raw(),
    BC1_RGB_SRGB_BLOCK = ash::vk::Format::BC1_RGB_SRGB_BLOCK.as_raw(),
    BC1_RGBA_UNORM_BLOCK = ash::vk::Format::BC1_RGBA_UNORM_BLOCK.as_raw(),
    BC1_RGBA_SRGB_BLOCK = ash::vk::Format::BC1_RGBA_SRGB_BLOCK.as_raw(),
    BC2_UNORM_BLOCK = ash::vk::Format::BC2_UNORM_BLOCK.as_raw(),
    BC2_SRGB_BLOCK = ash::vk::Format::BC2_SRGB_BLOCK.as_raw(),
    BC3_UNORM_BLOCK = ash::vk::Format::BC3_UNORM_BLOCK.as_raw(),
    BC3_SRGB_BLOCK = ash::vk::Format::BC3_SRGB_BLOCK.as_raw(),
    BC4_UNORM_BLOCK = ash::vk::Format::BC4_UNORM_BLOCK.as_raw(),
    BC4_SNORM_BLOCK = ash::vk::Format::BC4_SNORM_BLOCK.as_raw(),
    BC5_UNORM_BLOCK = ash::vk::Format::BC5_UNORM_BLOCK.as_raw(),
    BC5_SNORM_BLOCK = ash::vk::Format::BC5_SNORM_BLOCK.as_raw(),
    BC6H_UFLOAT_BLOCK = ash::vk::Format::BC6H_UFLOAT_BLOCK.as_raw(),
    BC6H_SFLOAT_BLOCK = ash::vk::Format::BC6H_SFLOAT_BLOCK.as_raw(),
    BC7_UNORM_BLOCK = ash::vk::Format::BC7_UNORM_BLOCK.as_raw(),
    BC7_SRGB_BLOCK = ash::vk::Format::BC7_SRGB_BLOCK.as_raw(),
    ETC2_R8G8B8_UNORM_BLOCK = ash::vk::Format::ETC2_R8G8B8_UNORM_BLOCK.as_raw(),
    ETC2_R8G8B8_SRGB_BLOCK = ash::vk::Format::ETC2_R8G8B8_SRGB_BLOCK.as_raw(),
    ETC2_R8G8B8A1_UNORM_BLOCK = ash::vk::Format::ETC2_R8G8B8A1_UNORM_BLOCK.as_raw(),
    ETC2_R8G8B8A1_SRGB_BLOCK = ash::vk::Format::ETC2_R8G8B8A1_SRGB_BLOCK.as_raw(),
    ETC2_R8G8B8A8_UNORM_BLOCK = ash::vk::Format::ETC2_R8G8B8A8_UNORM_BLOCK.as_raw(),
    ETC2_R8G8B8A8_SRGB_BLOCK = ash::vk::Format::ETC2_R8G8B8A8_SRGB_BLOCK.as_raw(),
    EAC_R11_UNORM_BLOCK = ash::vk::Format::EAC_R11_UNORM_BLOCK.as_raw(),
    EAC_R11_SNORM_BLOCK = ash::vk::Format::EAC_R11_SNORM_BLOCK.as_raw(),
    EAC_R11G11_UNORM_BLOCK = ash::vk::Format::EAC_R11G11_UNORM_BLOCK.as_raw(),
    EAC_R11G11_SNORM_BLOCK = ash::vk::Format::EAC_R11G11_SNORM_BLOCK.as_raw(),
    ASTC_4x4_UNORM_BLOCK = ash::vk::Format::ASTC_4X4_UNORM_BLOCK.as_raw(),
    ASTC_4x4_SRGB_BLOCK = ash::vk::Format::ASTC_4X4_SRGB_BLOCK.as_raw(),
    ASTC_5x4_UNORM_BLOCK = ash::vk::Format::ASTC_5X4_UNORM_BLOCK.as_raw(),
    ASTC_5x4_SRGB_BLOCK = ash::vk::Format::ASTC_5X4_SRGB_BLOCK.as_raw(),
    ASTC_5x5_UNORM_BLOCK = ash::vk::Format::ASTC_5X5_UNORM_BLOCK.as_raw(),
    ASTC_5x5_SRGB_BLOCK = ash::vk::Format::ASTC_5X5_SRGB_BLOCK.as_raw(),
    ASTC_6x5_UNORM_BLOCK = ash::vk::Format::ASTC_6X5_UNORM_BLOCK.as_raw(),
    ASTC_6x5_SRGB_BLOCK = ash::vk::Format::ASTC_6X5_SRGB_BLOCK.as_raw(),
    ASTC_6x6_UNORM_BLOCK = ash::vk::Format::ASTC_6X6_UNORM_BLOCK.as_raw(),
    ASTC_6x6_SRGB_BLOCK = ash::vk::Format::ASTC_6X6_SRGB_BLOCK.as_raw(),
    ASTC_8x5_UNORM_BLOCK = ash::vk::Format::ASTC_8X5_UNORM_BLOCK.as_raw(),
    ASTC_8x5_SRGB_BLOCK = ash::vk::Format::ASTC_8X5_SRGB_BLOCK.as_raw(),
    ASTC_8x6_UNORM_BLOCK = ash::vk::Format::ASTC_8X6_UNORM_BLOCK.as_raw(),
    ASTC_8x6_SRGB_BLOCK = ash::vk::Format::ASTC_8X6_SRGB_BLOCK.as_raw(),
    ASTC_8x8_UNORM_BLOCK = ash::vk::Format::ASTC_8X8_UNORM_BLOCK.as_raw(),
    ASTC_8x8_SRGB_BLOCK = ash::vk::Format::ASTC_8X8_SRGB_BLOCK.as_raw(),
    ASTC_10x5_UNORM_BLOCK = ash::vk::Format::ASTC_10X5_UNORM_BLOCK.as_raw(),
    ASTC_10x5_SRGB_BLOCK = ash::vk::Format::ASTC_10X5_SRGB_BLOCK.as_raw(),
    ASTC_10x6_UNORM_BLOCK = ash::vk::Format::ASTC_10X6_UNORM_BLOCK.as_raw(),
    ASTC_10x6_SRGB_BLOCK = ash::vk::Format::ASTC_10X6_SRGB_BLOCK.as_raw(),
    ASTC_10x8_UNORM_BLOCK = ash::vk::Format::ASTC_10X8_UNORM_BLOCK.as_raw(),
    ASTC_10x8_SRGB_BLOCK = ash::vk::Format::ASTC_10X8_SRGB_BLOCK.as_raw(),
    ASTC_10x10_UNORM_BLOCK = ash::vk::Format::ASTC_10X10_UNORM_BLOCK.as_raw(),
    ASTC_10x10_SRGB_BLOCK = ash::vk::Format::ASTC_10X10_SRGB_BLOCK.as_raw(),
    ASTC_12x10_UNORM_BLOCK = ash::vk::Format::ASTC_12X10_UNORM_BLOCK.as_raw(),
    ASTC_12x10_SRGB_BLOCK = ash::vk::Format::ASTC_12X10_SRGB_BLOCK.as_raw(),
    ASTC_12x12_UNORM_BLOCK = ash::vk::Format::ASTC_12X12_UNORM_BLOCK.as_raw(),
    ASTC_12x12_SRGB_BLOCK = ash::vk::Format::ASTC_12X12_SRGB_BLOCK.as_raw(),
    ASTC_4x4_SFLOAT_BLOCK = ash::vk::Format::ASTC_4X4_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_5x4_SFLOAT_BLOCK = ash::vk::Format::ASTC_5X4_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_5x5_SFLOAT_BLOCK = ash::vk::Format::ASTC_5X5_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_6x5_SFLOAT_BLOCK = ash::vk::Format::ASTC_6X5_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_6x6_SFLOAT_BLOCK = ash::vk::Format::ASTC_6X6_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_8x5_SFLOAT_BLOCK = ash::vk::Format::ASTC_8X5_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_8x6_SFLOAT_BLOCK = ash::vk::Format::ASTC_8X6_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_8x8_SFLOAT_BLOCK = ash::vk::Format::ASTC_8X8_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_10x5_SFLOAT_BLOCK = ash::vk::Format::ASTC_10X5_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_10x6_SFLOAT_BLOCK = ash::vk::Format::ASTC_10X6_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_10x8_SFLOAT_BLOCK = ash::vk::Format::ASTC_10X8_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_10x10_SFLOAT_BLOCK = ash::vk::Format::ASTC_10X10_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_12x10_SFLOAT_BLOCK = ash::vk::Format::ASTC_12X10_SFLOAT_BLOCK_EXT.as_raw(),
    ASTC_12x12_SFLOAT_BLOCK = ash::vk::Format::ASTC_12X12_SFLOAT_BLOCK_EXT.as_raw(),
    PVRTC1_2BPP_UNORM_BLOCK = ash::vk::Format::PVRTC1_2BPP_UNORM_BLOCK_IMG.as_raw(),
    PVRTC1_4BPP_UNORM_BLOCK = ash::vk::Format::PVRTC1_4BPP_UNORM_BLOCK_IMG.as_raw(),
    PVRTC2_2BPP_UNORM_BLOCK = ash::vk::Format::PVRTC2_2BPP_UNORM_BLOCK_IMG.as_raw(),
    PVRTC2_4BPP_UNORM_BLOCK = ash::vk::Format::PVRTC2_4BPP_UNORM_BLOCK_IMG.as_raw(),
    PVRTC1_2BPP_SRGB_BLOCK = ash::vk::Format::PVRTC1_2BPP_SRGB_BLOCK_IMG.as_raw(),
    PVRTC1_4BPP_SRGB_BLOCK = ash::vk::Format::PVRTC1_4BPP_SRGB_BLOCK_IMG.as_raw(),
    PVRTC2_2BPP_SRGB_BLOCK = ash::vk::Format::PVRTC2_2BPP_SRGB_BLOCK_IMG.as_raw(),
    PVRTC2_4BPP_SRGB_BLOCK = ash::vk::Format::PVRTC2_4BPP_SRGB_BLOCK_IMG.as_raw(),
    G8B8G8R8_422_UNORM = ash::vk::Format::G8B8G8R8_422_UNORM.as_raw(),
    B8G8R8G8_422_UNORM = ash::vk::Format::B8G8R8G8_422_UNORM.as_raw(),
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 =
        ash::vk::Format::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16.as_raw(),
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 =
        ash::vk::Format::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16.as_raw(),
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 =
        ash::vk::Format::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16.as_raw(),
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 =
        ash::vk::Format::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16.as_raw(),
    G16B16G16R16_422_UNORM = ash::vk::Format::G16B16G16R16_422_UNORM.as_raw(),
    B16G16R16G16_422_UNORM = ash::vk::Format::B16G16R16G16_422_UNORM.as_raw(),
    G8_B8_R8_3PLANE_420_UNORM = ash::vk::Format::G8_B8_R8_3PLANE_420_UNORM.as_raw(),
    G8_B8R8_2PLANE_420_UNORM = ash::vk::Format::G8_B8R8_2PLANE_420_UNORM.as_raw(),
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 =
        ash::vk::Format::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16.as_raw(),
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 =
        ash::vk::Format::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16.as_raw(),
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 =
        ash::vk::Format::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16.as_raw(),
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 =
        ash::vk::Format::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16.as_raw(),
    G16_B16_R16_3PLANE_420_UNORM = ash::vk::Format::G16_B16_R16_3PLANE_420_UNORM.as_raw(),
    G16_B16R16_2PLANE_420_UNORM = ash::vk::Format::G16_B16R16_2PLANE_420_UNORM.as_raw(),
    G8_B8_R8_3PLANE_422_UNORM = ash::vk::Format::G8_B8_R8_3PLANE_422_UNORM.as_raw(),
    G8_B8R8_2PLANE_422_UNORM = ash::vk::Format::G8_B8R8_2PLANE_422_UNORM.as_raw(),
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 =
        ash::vk::Format::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16.as_raw(),
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 =
        ash::vk::Format::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16.as_raw(),
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 =
        ash::vk::Format::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16.as_raw(),
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 =
        ash::vk::Format::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16.as_raw(),
    G16_B16_R16_3PLANE_422_UNORM = ash::vk::Format::G16_B16_R16_3PLANE_422_UNORM.as_raw(),
    G16_B16R16_2PLANE_422_UNORM = ash::vk::Format::G16_B16R16_2PLANE_422_UNORM.as_raw(),
    G8_B8_R8_3PLANE_444_UNORM = ash::vk::Format::G8_B8_R8_3PLANE_444_UNORM.as_raw(),
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 =
        ash::vk::Format::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16.as_raw(),
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 =
        ash::vk::Format::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16.as_raw(),
    G16_B16_R16_3PLANE_444_UNORM = ash::vk::Format::G16_B16_R16_3PLANE_444_UNORM.as_raw(),
    G8_B8R8_2PLANE_444_UNORM = ash::vk::Format::G8_B8R8_2PLANE_444_UNORM_EXT.as_raw(),
    G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 =
        ash::vk::Format::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT.as_raw(),
    G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 =
        ash::vk::Format::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT.as_raw(),
    G16_B16R16_2PLANE_444_UNORM = ash::vk::Format::G16_B16R16_2PLANE_444_UNORM_EXT.as_raw(),
}
impl Format {
    #[doc = r" Returns the aspects that images of this format have."]
    pub fn aspects(&self) -> ImageAspects {
        ImageAspects {
            color: !matches!(
                self,
                Format::D16_UNORM
                    | Format::X8_D24_UNORM_PACK32
                    | Format::D32_SFLOAT
                    | Format::S8_UINT
                    | Format::D16_UNORM_S8_UINT
                    | Format::D24_UNORM_S8_UINT
                    | Format::D32_SFLOAT_S8_UINT
            ),
            depth: matches!(
                self,
                Format::D16_UNORM
                    | Format::X8_D24_UNORM_PACK32
                    | Format::D32_SFLOAT
                    | Format::D16_UNORM_S8_UINT
                    | Format::D24_UNORM_S8_UINT
                    | Format::D32_SFLOAT_S8_UINT
            ),
            stencil: matches!(
                self,
                Format::S8_UINT
                    | Format::D16_UNORM_S8_UINT
                    | Format::D24_UNORM_S8_UINT
                    | Format::D32_SFLOAT_S8_UINT
            ),
            plane0: matches!(
                self,
                Format::G8_B8_R8_3PLANE_420_UNORM
                    | Format::G8_B8R8_2PLANE_420_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
                    | Format::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
                    | Format::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_420_UNORM
                    | Format::G16_B16R16_2PLANE_420_UNORM
                    | Format::G8_B8_R8_3PLANE_422_UNORM
                    | Format::G8_B8R8_2PLANE_422_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
                    | Format::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
                    | Format::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_422_UNORM
                    | Format::G16_B16R16_2PLANE_422_UNORM
                    | Format::G8_B8_R8_3PLANE_444_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_444_UNORM
                    | Format::G8_B8R8_2PLANE_444_UNORM
                    | Format::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16
                    | Format::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16
                    | Format::G16_B16R16_2PLANE_444_UNORM
            ),
            plane1: matches!(
                self,
                Format::G8_B8_R8_3PLANE_420_UNORM
                    | Format::G8_B8R8_2PLANE_420_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
                    | Format::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
                    | Format::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_420_UNORM
                    | Format::G16_B16R16_2PLANE_420_UNORM
                    | Format::G8_B8_R8_3PLANE_422_UNORM
                    | Format::G8_B8R8_2PLANE_422_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
                    | Format::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
                    | Format::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_422_UNORM
                    | Format::G16_B16R16_2PLANE_422_UNORM
                    | Format::G8_B8_R8_3PLANE_444_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_444_UNORM
                    | Format::G8_B8R8_2PLANE_444_UNORM
                    | Format::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16
                    | Format::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16
                    | Format::G16_B16R16_2PLANE_444_UNORM
            ),
            plane2: matches!(
                self,
                Format::G8_B8_R8_3PLANE_420_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_420_UNORM
                    | Format::G8_B8_R8_3PLANE_422_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_422_UNORM
                    | Format::G8_B8_R8_3PLANE_444_UNORM
                    | Format::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
                    | Format::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
                    | Format::G16_B16_R16_3PLANE_444_UNORM
            ),
            ..ImageAspects::none()
        }
    }
    #[doc = r" Returns the dimensions in texels (horizontally and vertically) of a single texel"]
    #[doc = r" block of this format. A texel block is a rectangle of pixels that is represented by"]
    #[doc = r" a single element of this format. It is also the minimum granularity of the size of"]
    #[doc = r" an image; images must always have a size that's a multiple of the block size."]
    #[doc = r""]
    #[doc = r" For normal formats, the block size is [1, 1], meaning that each element of the"]
    #[doc = r" format represents one texel. Block-compressed formats encode multiple texels into"]
    #[doc = r" a single element. The 422 and 420 YCbCr formats have a block size of [2, 1] and"]
    #[doc = r" [2, 2] respectively, as the red and blue components are shared across multiple"]
    #[doc = r" texels."]
    pub fn block_dimensions(&self) -> [u32; 2] {
        match self {
            Self::BC1_RGB_UNORM_BLOCK => [4, 4],
            Self::BC1_RGB_SRGB_BLOCK => [4, 4],
            Self::BC1_RGBA_UNORM_BLOCK => [4, 4],
            Self::BC1_RGBA_SRGB_BLOCK => [4, 4],
            Self::BC2_UNORM_BLOCK => [4, 4],
            Self::BC2_SRGB_BLOCK => [4, 4],
            Self::BC3_UNORM_BLOCK => [4, 4],
            Self::BC3_SRGB_BLOCK => [4, 4],
            Self::BC4_UNORM_BLOCK => [4, 4],
            Self::BC4_SNORM_BLOCK => [4, 4],
            Self::BC5_UNORM_BLOCK => [4, 4],
            Self::BC5_SNORM_BLOCK => [4, 4],
            Self::BC6H_UFLOAT_BLOCK => [4, 4],
            Self::BC6H_SFLOAT_BLOCK => [4, 4],
            Self::BC7_UNORM_BLOCK => [4, 4],
            Self::BC7_SRGB_BLOCK => [4, 4],
            Self::ETC2_R8G8B8_UNORM_BLOCK => [4, 4],
            Self::ETC2_R8G8B8_SRGB_BLOCK => [4, 4],
            Self::ETC2_R8G8B8A1_UNORM_BLOCK => [4, 4],
            Self::ETC2_R8G8B8A1_SRGB_BLOCK => [4, 4],
            Self::ETC2_R8G8B8A8_UNORM_BLOCK => [4, 4],
            Self::ETC2_R8G8B8A8_SRGB_BLOCK => [4, 4],
            Self::EAC_R11_UNORM_BLOCK => [4, 4],
            Self::EAC_R11_SNORM_BLOCK => [4, 4],
            Self::EAC_R11G11_UNORM_BLOCK => [4, 4],
            Self::EAC_R11G11_SNORM_BLOCK => [4, 4],
            Self::ASTC_4x4_UNORM_BLOCK => [4, 4],
            Self::ASTC_4x4_SRGB_BLOCK => [4, 4],
            Self::ASTC_5x4_UNORM_BLOCK => [5, 4],
            Self::ASTC_5x4_SRGB_BLOCK => [5, 4],
            Self::ASTC_5x5_UNORM_BLOCK => [5, 5],
            Self::ASTC_5x5_SRGB_BLOCK => [5, 5],
            Self::ASTC_6x5_UNORM_BLOCK => [6, 5],
            Self::ASTC_6x5_SRGB_BLOCK => [6, 5],
            Self::ASTC_6x6_UNORM_BLOCK => [6, 6],
            Self::ASTC_6x6_SRGB_BLOCK => [6, 6],
            Self::ASTC_8x5_UNORM_BLOCK => [8, 5],
            Self::ASTC_8x5_SRGB_BLOCK => [8, 5],
            Self::ASTC_8x6_UNORM_BLOCK => [8, 6],
            Self::ASTC_8x6_SRGB_BLOCK => [8, 6],
            Self::ASTC_8x8_UNORM_BLOCK => [8, 8],
            Self::ASTC_8x8_SRGB_BLOCK => [8, 8],
            Self::ASTC_10x5_UNORM_BLOCK => [10, 5],
            Self::ASTC_10x5_SRGB_BLOCK => [10, 5],
            Self::ASTC_10x6_UNORM_BLOCK => [10, 6],
            Self::ASTC_10x6_SRGB_BLOCK => [10, 6],
            Self::ASTC_10x8_UNORM_BLOCK => [10, 8],
            Self::ASTC_10x8_SRGB_BLOCK => [10, 8],
            Self::ASTC_10x10_UNORM_BLOCK => [10, 10],
            Self::ASTC_10x10_SRGB_BLOCK => [10, 10],
            Self::ASTC_12x10_UNORM_BLOCK => [12, 10],
            Self::ASTC_12x10_SRGB_BLOCK => [12, 10],
            Self::ASTC_12x12_UNORM_BLOCK => [12, 12],
            Self::ASTC_12x12_SRGB_BLOCK => [12, 12],
            Self::ASTC_4x4_SFLOAT_BLOCK => [4, 4],
            Self::ASTC_5x4_SFLOAT_BLOCK => [5, 4],
            Self::ASTC_5x5_SFLOAT_BLOCK => [5, 5],
            Self::ASTC_6x5_SFLOAT_BLOCK => [6, 5],
            Self::ASTC_6x6_SFLOAT_BLOCK => [6, 6],
            Self::ASTC_8x5_SFLOAT_BLOCK => [8, 5],
            Self::ASTC_8x6_SFLOAT_BLOCK => [8, 6],
            Self::ASTC_8x8_SFLOAT_BLOCK => [8, 8],
            Self::ASTC_10x5_SFLOAT_BLOCK => [10, 5],
            Self::ASTC_10x6_SFLOAT_BLOCK => [10, 6],
            Self::ASTC_10x8_SFLOAT_BLOCK => [10, 8],
            Self::ASTC_10x10_SFLOAT_BLOCK => [10, 10],
            Self::ASTC_12x10_SFLOAT_BLOCK => [12, 10],
            Self::ASTC_12x12_SFLOAT_BLOCK => [12, 12],
            Self::PVRTC1_2BPP_UNORM_BLOCK => [8, 4],
            Self::PVRTC1_4BPP_UNORM_BLOCK => [4, 4],
            Self::PVRTC2_2BPP_UNORM_BLOCK => [8, 4],
            Self::PVRTC2_4BPP_UNORM_BLOCK => [4, 4],
            Self::PVRTC1_2BPP_SRGB_BLOCK => [8, 4],
            Self::PVRTC1_4BPP_SRGB_BLOCK => [4, 4],
            Self::PVRTC2_2BPP_SRGB_BLOCK => [8, 4],
            Self::PVRTC2_4BPP_SRGB_BLOCK => [4, 4],
            Self::G8B8G8R8_422_UNORM => [2, 1],
            Self::B8G8R8G8_422_UNORM => [2, 1],
            Self::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => [2, 1],
            Self::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => [2, 1],
            Self::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => [2, 1],
            Self::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => [2, 1],
            Self::G16B16G16R16_422_UNORM => [2, 1],
            Self::B16G16R16G16_422_UNORM => [2, 1],
            Self::G8_B8_R8_3PLANE_420_UNORM => [2, 2],
            Self::G8_B8R8_2PLANE_420_UNORM => [2, 2],
            Self::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => [2, 2],
            Self::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => [2, 2],
            Self::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => [2, 2],
            Self::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => [2, 2],
            Self::G16_B16_R16_3PLANE_420_UNORM => [2, 2],
            Self::G16_B16R16_2PLANE_420_UNORM => [2, 2],
            Self::G8_B8_R8_3PLANE_422_UNORM => [2, 1],
            Self::G8_B8R8_2PLANE_422_UNORM => [2, 1],
            Self::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => [2, 1],
            Self::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => [2, 1],
            Self::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => [2, 1],
            Self::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => [2, 1],
            Self::G16_B16_R16_3PLANE_422_UNORM => [2, 1],
            Self::G16_B16R16_2PLANE_422_UNORM => [2, 1],
            _ => [1, 1],
        }
    }
    #[doc = r" Returns the an opaque object representing the compatibility class of the format."]
    #[doc = r" This can be used to determine whether two formats are compatible for the purposes"]
    #[doc = r" of certain Vulkan operations, such as image copying."]
    pub fn compatibility(&self) -> FormatCompatibility {
        FormatCompatibility(match self {
            Self::R4G4_UNORM_PACK8 => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R4G4B4A4_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::B4G4R4A4_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R5G6B5_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::B5G6R5_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R5G5B5A1_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::B5G5R5A1_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::A1R5G5B5_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8_UNORM => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8_SNORM => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8_USCALED => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8_SSCALED => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8_UINT => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8_SINT => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8_SRGB => &FormatCompatibilityInner::Normal { size: 1u8 },
            Self::R8G8_UNORM => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8_SNORM => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8_USCALED => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8_SSCALED => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8_UINT => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8_SINT => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8_SRGB => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R8G8B8_UNORM => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8_SNORM => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8_USCALED => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8_SSCALED => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8_UINT => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8_SINT => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8_SRGB => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_UNORM => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_SNORM => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_USCALED => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_SSCALED => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_UINT => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_SINT => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::B8G8R8_SRGB => &FormatCompatibilityInner::Normal { size: 3u8 },
            Self::R8G8B8A8_UNORM => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R8G8B8A8_SNORM => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R8G8B8A8_USCALED => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R8G8B8A8_SSCALED => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R8G8B8A8_UINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R8G8B8A8_SINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R8G8B8A8_SRGB => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_UNORM => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_SNORM => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_USCALED => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_SSCALED => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_UINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_SINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::B8G8R8A8_SRGB => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_UNORM_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_SNORM_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_USCALED_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_SSCALED_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_UINT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_SINT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A8B8G8R8_SRGB_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2R10G10B10_UNORM_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2R10G10B10_SNORM_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2R10G10B10_USCALED_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2R10G10B10_SSCALED_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2R10G10B10_UINT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2R10G10B10_SINT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2B10G10R10_UNORM_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2B10G10R10_SNORM_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2B10G10R10_USCALED_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2B10G10R10_SSCALED_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2B10G10R10_UINT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::A2B10G10R10_SINT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16_UNORM => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16_SNORM => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16_USCALED => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16_SSCALED => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16_UINT => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16_SINT => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16_SFLOAT => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R16G16_UNORM => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16_SNORM => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16_USCALED => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16_SSCALED => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16_UINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16_SINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16_SFLOAT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R16G16B16_UNORM => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16_SNORM => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16_USCALED => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16_SSCALED => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16_UINT => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16_SINT => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16_SFLOAT => &FormatCompatibilityInner::Normal { size: 6u8 },
            Self::R16G16B16A16_UNORM => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R16G16B16A16_SNORM => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R16G16B16A16_USCALED => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R16G16B16A16_SSCALED => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R16G16B16A16_UINT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R16G16B16A16_SINT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R16G16B16A16_SFLOAT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R32_UINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R32_SINT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R32_SFLOAT => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R32G32_UINT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R32G32_SINT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R32G32_SFLOAT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R32G32B32_UINT => &FormatCompatibilityInner::Normal { size: 12u8 },
            Self::R32G32B32_SINT => &FormatCompatibilityInner::Normal { size: 12u8 },
            Self::R32G32B32_SFLOAT => &FormatCompatibilityInner::Normal { size: 12u8 },
            Self::R32G32B32A32_UINT => &FormatCompatibilityInner::Normal { size: 16u8 },
            Self::R32G32B32A32_SINT => &FormatCompatibilityInner::Normal { size: 16u8 },
            Self::R32G32B32A32_SFLOAT => &FormatCompatibilityInner::Normal { size: 16u8 },
            Self::R64_UINT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R64_SINT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R64_SFLOAT => &FormatCompatibilityInner::Normal { size: 8u8 },
            Self::R64G64_UINT => &FormatCompatibilityInner::Normal { size: 16u8 },
            Self::R64G64_SINT => &FormatCompatibilityInner::Normal { size: 16u8 },
            Self::R64G64_SFLOAT => &FormatCompatibilityInner::Normal { size: 16u8 },
            Self::R64G64B64_UINT => &FormatCompatibilityInner::Normal { size: 24u8 },
            Self::R64G64B64_SINT => &FormatCompatibilityInner::Normal { size: 24u8 },
            Self::R64G64B64_SFLOAT => &FormatCompatibilityInner::Normal { size: 24u8 },
            Self::R64G64B64A64_UINT => &FormatCompatibilityInner::Normal { size: 32u8 },
            Self::R64G64B64A64_SINT => &FormatCompatibilityInner::Normal { size: 32u8 },
            Self::R64G64B64A64_SFLOAT => &FormatCompatibilityInner::Normal { size: 32u8 },
            Self::B10G11R11_UFLOAT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::E5B9G9R9_UFLOAT_PACK32 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::D16_UNORM => &FormatCompatibilityInner::DepthStencil {
                ty: Self::D16_UNORM as u8,
            },
            Self::X8_D24_UNORM_PACK32 => &FormatCompatibilityInner::DepthStencil {
                ty: Self::X8_D24_UNORM_PACK32 as u8,
            },
            Self::D32_SFLOAT => &FormatCompatibilityInner::DepthStencil {
                ty: Self::D32_SFLOAT as u8,
            },
            Self::S8_UINT => &FormatCompatibilityInner::DepthStencil {
                ty: Self::S8_UINT as u8,
            },
            Self::D16_UNORM_S8_UINT => &FormatCompatibilityInner::DepthStencil {
                ty: Self::D16_UNORM_S8_UINT as u8,
            },
            Self::D24_UNORM_S8_UINT => &FormatCompatibilityInner::DepthStencil {
                ty: Self::D24_UNORM_S8_UINT as u8,
            },
            Self::D32_SFLOAT_S8_UINT => &FormatCompatibilityInner::DepthStencil {
                ty: Self::D32_SFLOAT_S8_UINT as u8,
            },
            Self::R10X6_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R10X6G10X6_UNORM_2PACK16 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R10X6G10X6B10X6A10X6_UNORM_4PACK16 => {
                &FormatCompatibilityInner::YCbCrRGBA { bits: 10u8 }
            }
            Self::R12X4_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::R12X4G12X4_UNORM_2PACK16 => &FormatCompatibilityInner::Normal { size: 4u8 },
            Self::R12X4G12X4B12X4A12X4_UNORM_4PACK16 => {
                &FormatCompatibilityInner::YCbCrRGBA { bits: 12u8 }
            }
            Self::A4R4G4B4_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::A4B4G4R4_UNORM_PACK16 => &FormatCompatibilityInner::Normal { size: 2u8 },
            Self::BC1_RGB_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC1,
                subtype: 3u8,
            },
            Self::BC1_RGB_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC1,
                subtype: 3u8,
            },
            Self::BC1_RGBA_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC1,
                subtype: 4u8,
            },
            Self::BC1_RGBA_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC1,
                subtype: 4u8,
            },
            Self::BC2_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC2,
                subtype: 0u8,
            },
            Self::BC2_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC2,
                subtype: 0u8,
            },
            Self::BC3_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC3,
                subtype: 0u8,
            },
            Self::BC3_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC3,
                subtype: 0u8,
            },
            Self::BC4_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC4,
                subtype: 0u8,
            },
            Self::BC4_SNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC4,
                subtype: 0u8,
            },
            Self::BC5_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC5,
                subtype: 0u8,
            },
            Self::BC5_SNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC5,
                subtype: 0u8,
            },
            Self::BC6H_UFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC6H,
                subtype: 0u8,
            },
            Self::BC6H_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC6H,
                subtype: 0u8,
            },
            Self::BC7_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC7,
                subtype: 0u8,
            },
            Self::BC7_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::BC7,
                subtype: 0u8,
            },
            Self::ETC2_R8G8B8_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ETC2,
                subtype: 3u8,
            },
            Self::ETC2_R8G8B8_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ETC2,
                subtype: 3u8,
            },
            Self::ETC2_R8G8B8A1_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ETC2,
                subtype: 31u8,
            },
            Self::ETC2_R8G8B8A1_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ETC2,
                subtype: 31u8,
            },
            Self::ETC2_R8G8B8A8_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ETC2,
                subtype: 4u8,
            },
            Self::ETC2_R8G8B8A8_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ETC2,
                subtype: 4u8,
            },
            Self::EAC_R11_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::EAC,
                subtype: 1u8,
            },
            Self::EAC_R11_SNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::EAC,
                subtype: 1u8,
            },
            Self::EAC_R11G11_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::EAC,
                subtype: 2u8,
            },
            Self::EAC_R11G11_SNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::EAC,
                subtype: 2u8,
            },
            Self::ASTC_4x4_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 68u8,
            },
            Self::ASTC_4x4_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 68u8,
            },
            Self::ASTC_5x4_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 84u8,
            },
            Self::ASTC_5x4_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 84u8,
            },
            Self::ASTC_5x5_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 85u8,
            },
            Self::ASTC_5x5_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 85u8,
            },
            Self::ASTC_6x5_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 101u8,
            },
            Self::ASTC_6x5_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 101u8,
            },
            Self::ASTC_6x6_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 102u8,
            },
            Self::ASTC_6x6_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 102u8,
            },
            Self::ASTC_8x5_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 133u8,
            },
            Self::ASTC_8x5_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 133u8,
            },
            Self::ASTC_8x6_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 134u8,
            },
            Self::ASTC_8x6_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 134u8,
            },
            Self::ASTC_8x8_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 136u8,
            },
            Self::ASTC_8x8_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 136u8,
            },
            Self::ASTC_10x5_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 165u8,
            },
            Self::ASTC_10x5_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 165u8,
            },
            Self::ASTC_10x6_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 166u8,
            },
            Self::ASTC_10x6_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 166u8,
            },
            Self::ASTC_10x8_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 168u8,
            },
            Self::ASTC_10x8_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 168u8,
            },
            Self::ASTC_10x10_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 170u8,
            },
            Self::ASTC_10x10_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 170u8,
            },
            Self::ASTC_12x10_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 202u8,
            },
            Self::ASTC_12x10_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 202u8,
            },
            Self::ASTC_12x12_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 204u8,
            },
            Self::ASTC_12x12_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 204u8,
            },
            Self::ASTC_4x4_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 68u8,
            },
            Self::ASTC_5x4_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 84u8,
            },
            Self::ASTC_5x5_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 85u8,
            },
            Self::ASTC_6x5_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 101u8,
            },
            Self::ASTC_6x6_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 102u8,
            },
            Self::ASTC_8x5_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 133u8,
            },
            Self::ASTC_8x6_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 134u8,
            },
            Self::ASTC_8x8_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 136u8,
            },
            Self::ASTC_10x5_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 165u8,
            },
            Self::ASTC_10x6_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 166u8,
            },
            Self::ASTC_10x8_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 168u8,
            },
            Self::ASTC_10x10_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 170u8,
            },
            Self::ASTC_12x10_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 202u8,
            },
            Self::ASTC_12x12_SFLOAT_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::ASTC,
                subtype: 204u8,
            },
            Self::PVRTC1_2BPP_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC1,
                subtype: 2u8,
            },
            Self::PVRTC1_4BPP_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC1,
                subtype: 4u8,
            },
            Self::PVRTC2_2BPP_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC2,
                subtype: 2u8,
            },
            Self::PVRTC2_4BPP_UNORM_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC2,
                subtype: 4u8,
            },
            Self::PVRTC1_2BPP_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC1,
                subtype: 2u8,
            },
            Self::PVRTC1_4BPP_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC1,
                subtype: 4u8,
            },
            Self::PVRTC2_2BPP_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC2,
                subtype: 2u8,
            },
            Self::PVRTC2_4BPP_SRGB_BLOCK => &FormatCompatibilityInner::Compressed {
                compression: CompressionType::PVRTC2,
                subtype: 4u8,
            },
            Self::G8B8G8R8_422_UNORM => &FormatCompatibilityInner::YCbCr1Plane {
                bits: 8u8,
                g_even: false,
            },
            Self::B8G8R8G8_422_UNORM => &FormatCompatibilityInner::YCbCr1Plane {
                bits: 8u8,
                g_even: true,
            },
            Self::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => {
                &FormatCompatibilityInner::YCbCr1Plane {
                    bits: 10u8,
                    g_even: false,
                }
            }
            Self::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => {
                &FormatCompatibilityInner::YCbCr1Plane {
                    bits: 10u8,
                    g_even: true,
                }
            }
            Self::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => {
                &FormatCompatibilityInner::YCbCr1Plane {
                    bits: 12u8,
                    g_even: false,
                }
            }
            Self::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => {
                &FormatCompatibilityInner::YCbCr1Plane {
                    bits: 12u8,
                    g_even: true,
                }
            }
            Self::G16B16G16R16_422_UNORM => &FormatCompatibilityInner::YCbCr1Plane {
                bits: 16u8,
                g_even: false,
            },
            Self::B16G16R16G16_422_UNORM => &FormatCompatibilityInner::YCbCr1Plane {
                bits: 16u8,
                g_even: true,
            },
            Self::G8_B8_R8_3PLANE_420_UNORM => &FormatCompatibilityInner::YCbCr3Plane {
                bits: 8u8,
                block_texels: 4u8,
            },
            Self::G8_B8R8_2PLANE_420_UNORM => &FormatCompatibilityInner::YCbCr2Plane {
                bits: 8u8,
                block_texels: 4u8,
            },
            Self::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr3Plane {
                    bits: 10u8,
                    block_texels: 4u8,
                }
            }
            Self::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr2Plane {
                    bits: 10u8,
                    block_texels: 4u8,
                }
            }
            Self::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr3Plane {
                    bits: 12u8,
                    block_texels: 4u8,
                }
            }
            Self::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr2Plane {
                    bits: 12u8,
                    block_texels: 4u8,
                }
            }
            Self::G16_B16_R16_3PLANE_420_UNORM => &FormatCompatibilityInner::YCbCr3Plane {
                bits: 16u8,
                block_texels: 4u8,
            },
            Self::G16_B16R16_2PLANE_420_UNORM => &FormatCompatibilityInner::YCbCr2Plane {
                bits: 16u8,
                block_texels: 4u8,
            },
            Self::G8_B8_R8_3PLANE_422_UNORM => &FormatCompatibilityInner::YCbCr3Plane {
                bits: 8u8,
                block_texels: 2u8,
            },
            Self::G8_B8R8_2PLANE_422_UNORM => &FormatCompatibilityInner::YCbCr2Plane {
                bits: 8u8,
                block_texels: 2u8,
            },
            Self::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr3Plane {
                    bits: 10u8,
                    block_texels: 2u8,
                }
            }
            Self::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr2Plane {
                    bits: 10u8,
                    block_texels: 2u8,
                }
            }
            Self::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr3Plane {
                    bits: 12u8,
                    block_texels: 2u8,
                }
            }
            Self::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr2Plane {
                    bits: 12u8,
                    block_texels: 2u8,
                }
            }
            Self::G16_B16_R16_3PLANE_422_UNORM => &FormatCompatibilityInner::YCbCr3Plane {
                bits: 16u8,
                block_texels: 2u8,
            },
            Self::G16_B16R16_2PLANE_422_UNORM => &FormatCompatibilityInner::YCbCr2Plane {
                bits: 16u8,
                block_texels: 2u8,
            },
            Self::G8_B8_R8_3PLANE_444_UNORM => &FormatCompatibilityInner::YCbCr3Plane {
                bits: 8u8,
                block_texels: 1u8,
            },
            Self::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr3Plane {
                    bits: 10u8,
                    block_texels: 1u8,
                }
            }
            Self::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr3Plane {
                    bits: 12u8,
                    block_texels: 1u8,
                }
            }
            Self::G16_B16_R16_3PLANE_444_UNORM => &FormatCompatibilityInner::YCbCr3Plane {
                bits: 16u8,
                block_texels: 1u8,
            },
            Self::G8_B8R8_2PLANE_444_UNORM => &FormatCompatibilityInner::YCbCr2Plane {
                bits: 8u8,
                block_texels: 1u8,
            },
            Self::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr2Plane {
                    bits: 10u8,
                    block_texels: 1u8,
                }
            }
            Self::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 => {
                &FormatCompatibilityInner::YCbCr2Plane {
                    bits: 12u8,
                    block_texels: 1u8,
                }
            }
            Self::G16_B16R16_2PLANE_444_UNORM => &FormatCompatibilityInner::YCbCr2Plane {
                bits: 16u8,
                block_texels: 1u8,
            },
        })
    }
    #[doc = r" Returns the number of bits per texel block that each component (R, G, B, A) is"]
    #[doc = r" represented with. Components that are not present in the format have 0 bits."]
    #[doc = r""]
    #[doc = r" For depth/stencil formats, the depth component is the first, stencil the second. For"]
    #[doc = r" multi-planar formats, this is the number of bits across all planes."]
    #[doc = r""]
    #[doc = r" For block-compressed formats, the number of bits in individual components is not"]
    #[doc = r" well-defined, and the return value will is merely binary: 1 indicates a component"]
    #[doc = r" that is present in the format, 0 indicates one that is absent."]
    pub fn components(&self) -> [u8; 4] {
        match self {
            Self::R4G4_UNORM_PACK8 => [4, 4, 0, 0],
            Self::R4G4B4A4_UNORM_PACK16 => [4, 4, 4, 4],
            Self::B4G4R4A4_UNORM_PACK16 => [4, 4, 4, 4],
            Self::R5G6B5_UNORM_PACK16 => [5, 6, 5, 0],
            Self::B5G6R5_UNORM_PACK16 => [5, 6, 5, 0],
            Self::R5G5B5A1_UNORM_PACK16 => [5, 5, 5, 1],
            Self::B5G5R5A1_UNORM_PACK16 => [5, 5, 5, 1],
            Self::A1R5G5B5_UNORM_PACK16 => [5, 5, 5, 1],
            Self::R8_UNORM => [8, 0, 0, 0],
            Self::R8_SNORM => [8, 0, 0, 0],
            Self::R8_USCALED => [8, 0, 0, 0],
            Self::R8_SSCALED => [8, 0, 0, 0],
            Self::R8_UINT => [8, 0, 0, 0],
            Self::R8_SINT => [8, 0, 0, 0],
            Self::R8_SRGB => [8, 0, 0, 0],
            Self::R8G8_UNORM => [8, 8, 0, 0],
            Self::R8G8_SNORM => [8, 8, 0, 0],
            Self::R8G8_USCALED => [8, 8, 0, 0],
            Self::R8G8_SSCALED => [8, 8, 0, 0],
            Self::R8G8_UINT => [8, 8, 0, 0],
            Self::R8G8_SINT => [8, 8, 0, 0],
            Self::R8G8_SRGB => [8, 8, 0, 0],
            Self::R8G8B8_UNORM => [8, 8, 8, 0],
            Self::R8G8B8_SNORM => [8, 8, 8, 0],
            Self::R8G8B8_USCALED => [8, 8, 8, 0],
            Self::R8G8B8_SSCALED => [8, 8, 8, 0],
            Self::R8G8B8_UINT => [8, 8, 8, 0],
            Self::R8G8B8_SINT => [8, 8, 8, 0],
            Self::R8G8B8_SRGB => [8, 8, 8, 0],
            Self::B8G8R8_UNORM => [8, 8, 8, 0],
            Self::B8G8R8_SNORM => [8, 8, 8, 0],
            Self::B8G8R8_USCALED => [8, 8, 8, 0],
            Self::B8G8R8_SSCALED => [8, 8, 8, 0],
            Self::B8G8R8_UINT => [8, 8, 8, 0],
            Self::B8G8R8_SINT => [8, 8, 8, 0],
            Self::B8G8R8_SRGB => [8, 8, 8, 0],
            Self::R8G8B8A8_UNORM => [8, 8, 8, 8],
            Self::R8G8B8A8_SNORM => [8, 8, 8, 8],
            Self::R8G8B8A8_USCALED => [8, 8, 8, 8],
            Self::R8G8B8A8_SSCALED => [8, 8, 8, 8],
            Self::R8G8B8A8_UINT => [8, 8, 8, 8],
            Self::R8G8B8A8_SINT => [8, 8, 8, 8],
            Self::R8G8B8A8_SRGB => [8, 8, 8, 8],
            Self::B8G8R8A8_UNORM => [8, 8, 8, 8],
            Self::B8G8R8A8_SNORM => [8, 8, 8, 8],
            Self::B8G8R8A8_USCALED => [8, 8, 8, 8],
            Self::B8G8R8A8_SSCALED => [8, 8, 8, 8],
            Self::B8G8R8A8_UINT => [8, 8, 8, 8],
            Self::B8G8R8A8_SINT => [8, 8, 8, 8],
            Self::B8G8R8A8_SRGB => [8, 8, 8, 8],
            Self::A8B8G8R8_UNORM_PACK32 => [8, 8, 8, 8],
            Self::A8B8G8R8_SNORM_PACK32 => [8, 8, 8, 8],
            Self::A8B8G8R8_USCALED_PACK32 => [8, 8, 8, 8],
            Self::A8B8G8R8_SSCALED_PACK32 => [8, 8, 8, 8],
            Self::A8B8G8R8_UINT_PACK32 => [8, 8, 8, 8],
            Self::A8B8G8R8_SINT_PACK32 => [8, 8, 8, 8],
            Self::A8B8G8R8_SRGB_PACK32 => [8, 8, 8, 8],
            Self::A2R10G10B10_UNORM_PACK32 => [10, 10, 10, 2],
            Self::A2R10G10B10_SNORM_PACK32 => [10, 10, 10, 2],
            Self::A2R10G10B10_USCALED_PACK32 => [10, 10, 10, 2],
            Self::A2R10G10B10_SSCALED_PACK32 => [10, 10, 10, 2],
            Self::A2R10G10B10_UINT_PACK32 => [10, 10, 10, 2],
            Self::A2R10G10B10_SINT_PACK32 => [10, 10, 10, 2],
            Self::A2B10G10R10_UNORM_PACK32 => [10, 10, 10, 2],
            Self::A2B10G10R10_SNORM_PACK32 => [10, 10, 10, 2],
            Self::A2B10G10R10_USCALED_PACK32 => [10, 10, 10, 2],
            Self::A2B10G10R10_SSCALED_PACK32 => [10, 10, 10, 2],
            Self::A2B10G10R10_UINT_PACK32 => [10, 10, 10, 2],
            Self::A2B10G10R10_SINT_PACK32 => [10, 10, 10, 2],
            Self::R16_UNORM => [16, 0, 0, 0],
            Self::R16_SNORM => [16, 0, 0, 0],
            Self::R16_USCALED => [16, 0, 0, 0],
            Self::R16_SSCALED => [16, 0, 0, 0],
            Self::R16_UINT => [16, 0, 0, 0],
            Self::R16_SINT => [16, 0, 0, 0],
            Self::R16_SFLOAT => [16, 0, 0, 0],
            Self::R16G16_UNORM => [16, 16, 0, 0],
            Self::R16G16_SNORM => [16, 16, 0, 0],
            Self::R16G16_USCALED => [16, 16, 0, 0],
            Self::R16G16_SSCALED => [16, 16, 0, 0],
            Self::R16G16_UINT => [16, 16, 0, 0],
            Self::R16G16_SINT => [16, 16, 0, 0],
            Self::R16G16_SFLOAT => [16, 16, 0, 0],
            Self::R16G16B16_UNORM => [16, 16, 16, 0],
            Self::R16G16B16_SNORM => [16, 16, 16, 0],
            Self::R16G16B16_USCALED => [16, 16, 16, 0],
            Self::R16G16B16_SSCALED => [16, 16, 16, 0],
            Self::R16G16B16_UINT => [16, 16, 16, 0],
            Self::R16G16B16_SINT => [16, 16, 16, 0],
            Self::R16G16B16_SFLOAT => [16, 16, 16, 0],
            Self::R16G16B16A16_UNORM => [16, 16, 16, 16],
            Self::R16G16B16A16_SNORM => [16, 16, 16, 16],
            Self::R16G16B16A16_USCALED => [16, 16, 16, 16],
            Self::R16G16B16A16_SSCALED => [16, 16, 16, 16],
            Self::R16G16B16A16_UINT => [16, 16, 16, 16],
            Self::R16G16B16A16_SINT => [16, 16, 16, 16],
            Self::R16G16B16A16_SFLOAT => [16, 16, 16, 16],
            Self::R32_UINT => [32, 0, 0, 0],
            Self::R32_SINT => [32, 0, 0, 0],
            Self::R32_SFLOAT => [32, 0, 0, 0],
            Self::R32G32_UINT => [32, 32, 0, 0],
            Self::R32G32_SINT => [32, 32, 0, 0],
            Self::R32G32_SFLOAT => [32, 32, 0, 0],
            Self::R32G32B32_UINT => [32, 32, 32, 0],
            Self::R32G32B32_SINT => [32, 32, 32, 0],
            Self::R32G32B32_SFLOAT => [32, 32, 32, 0],
            Self::R32G32B32A32_UINT => [32, 32, 32, 32],
            Self::R32G32B32A32_SINT => [32, 32, 32, 32],
            Self::R32G32B32A32_SFLOAT => [32, 32, 32, 32],
            Self::R64_UINT => [64, 0, 0, 0],
            Self::R64_SINT => [64, 0, 0, 0],
            Self::R64_SFLOAT => [64, 0, 0, 0],
            Self::R64G64_UINT => [64, 64, 0, 0],
            Self::R64G64_SINT => [64, 64, 0, 0],
            Self::R64G64_SFLOAT => [64, 64, 0, 0],
            Self::R64G64B64_UINT => [64, 64, 64, 0],
            Self::R64G64B64_SINT => [64, 64, 64, 0],
            Self::R64G64B64_SFLOAT => [64, 64, 64, 0],
            Self::R64G64B64A64_UINT => [64, 64, 64, 64],
            Self::R64G64B64A64_SINT => [64, 64, 64, 64],
            Self::R64G64B64A64_SFLOAT => [64, 64, 64, 64],
            Self::B10G11R11_UFLOAT_PACK32 => [11, 11, 10, 0],
            Self::E5B9G9R9_UFLOAT_PACK32 => [9, 9, 9, 0],
            Self::D16_UNORM => [16, 0, 0, 0],
            Self::X8_D24_UNORM_PACK32 => [24, 0, 0, 0],
            Self::D32_SFLOAT => [32, 0, 0, 0],
            Self::S8_UINT => [0, 8, 0, 0],
            Self::D16_UNORM_S8_UINT => [16, 8, 0, 0],
            Self::D24_UNORM_S8_UINT => [24, 8, 0, 0],
            Self::D32_SFLOAT_S8_UINT => [32, 8, 0, 0],
            Self::R10X6_UNORM_PACK16 => [10, 0, 0, 0],
            Self::R10X6G10X6_UNORM_2PACK16 => [10, 10, 0, 0],
            Self::R10X6G10X6B10X6A10X6_UNORM_4PACK16 => [10, 10, 10, 10],
            Self::R12X4_UNORM_PACK16 => [12, 0, 0, 0],
            Self::R12X4G12X4_UNORM_2PACK16 => [12, 12, 0, 0],
            Self::R12X4G12X4B12X4A12X4_UNORM_4PACK16 => [12, 12, 12, 12],
            Self::A4R4G4B4_UNORM_PACK16 => [4, 4, 4, 4],
            Self::A4B4G4R4_UNORM_PACK16 => [4, 4, 4, 4],
            Self::BC1_RGB_UNORM_BLOCK => [1, 1, 1, 0],
            Self::BC1_RGB_SRGB_BLOCK => [1, 1, 1, 0],
            Self::BC1_RGBA_UNORM_BLOCK => [1, 1, 1, 1],
            Self::BC1_RGBA_SRGB_BLOCK => [1, 1, 1, 1],
            Self::BC2_UNORM_BLOCK => [1, 1, 1, 1],
            Self::BC2_SRGB_BLOCK => [1, 1, 1, 1],
            Self::BC3_UNORM_BLOCK => [1, 1, 1, 1],
            Self::BC3_SRGB_BLOCK => [1, 1, 1, 1],
            Self::BC4_UNORM_BLOCK => [1, 0, 0, 0],
            Self::BC4_SNORM_BLOCK => [1, 0, 0, 0],
            Self::BC5_UNORM_BLOCK => [1, 1, 0, 0],
            Self::BC5_SNORM_BLOCK => [1, 1, 0, 0],
            Self::BC6H_UFLOAT_BLOCK => [1, 1, 1, 0],
            Self::BC6H_SFLOAT_BLOCK => [1, 1, 1, 0],
            Self::BC7_UNORM_BLOCK => [1, 1, 1, 1],
            Self::BC7_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ETC2_R8G8B8_UNORM_BLOCK => [1, 1, 1, 0],
            Self::ETC2_R8G8B8_SRGB_BLOCK => [1, 1, 1, 0],
            Self::ETC2_R8G8B8A1_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ETC2_R8G8B8A1_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ETC2_R8G8B8A8_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ETC2_R8G8B8A8_SRGB_BLOCK => [1, 1, 1, 1],
            Self::EAC_R11_UNORM_BLOCK => [1, 0, 0, 0],
            Self::EAC_R11_SNORM_BLOCK => [1, 0, 0, 0],
            Self::EAC_R11G11_UNORM_BLOCK => [1, 1, 0, 0],
            Self::EAC_R11G11_SNORM_BLOCK => [1, 1, 0, 0],
            Self::ASTC_4x4_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_4x4_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_5x4_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_5x4_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_5x5_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_5x5_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_6x5_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_6x5_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_6x6_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_6x6_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x5_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x5_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x6_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x6_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x8_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x8_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x5_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x5_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x6_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x6_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x8_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x8_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x10_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x10_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_12x10_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_12x10_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_12x12_UNORM_BLOCK => [1, 1, 1, 1],
            Self::ASTC_12x12_SRGB_BLOCK => [1, 1, 1, 1],
            Self::ASTC_4x4_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_5x4_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_5x5_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_6x5_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_6x6_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x5_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x6_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_8x8_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x5_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x6_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x8_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_10x10_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_12x10_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::ASTC_12x12_SFLOAT_BLOCK => [1, 1, 1, 1],
            Self::PVRTC1_2BPP_UNORM_BLOCK => [1, 1, 1, 1],
            Self::PVRTC1_4BPP_UNORM_BLOCK => [1, 1, 1, 1],
            Self::PVRTC2_2BPP_UNORM_BLOCK => [1, 1, 1, 1],
            Self::PVRTC2_4BPP_UNORM_BLOCK => [1, 1, 1, 1],
            Self::PVRTC1_2BPP_SRGB_BLOCK => [1, 1, 1, 1],
            Self::PVRTC1_4BPP_SRGB_BLOCK => [1, 1, 1, 1],
            Self::PVRTC2_2BPP_SRGB_BLOCK => [1, 1, 1, 1],
            Self::PVRTC2_4BPP_SRGB_BLOCK => [1, 1, 1, 1],
            Self::G8B8G8R8_422_UNORM => [8, 16, 8, 0],
            Self::B8G8R8G8_422_UNORM => [8, 16, 8, 0],
            Self::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => [10, 20, 10, 0],
            Self::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => [10, 20, 10, 0],
            Self::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => [12, 24, 12, 0],
            Self::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => [12, 24, 12, 0],
            Self::G16B16G16R16_422_UNORM => [16, 32, 16, 0],
            Self::B16G16R16G16_422_UNORM => [16, 32, 16, 0],
            Self::G8_B8_R8_3PLANE_420_UNORM => [8, 32, 8, 0],
            Self::G8_B8R8_2PLANE_420_UNORM => [8, 32, 8, 0],
            Self::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => [10, 40, 10, 0],
            Self::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => [10, 40, 10, 0],
            Self::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => [12, 48, 12, 0],
            Self::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => [12, 48, 12, 0],
            Self::G16_B16_R16_3PLANE_420_UNORM => [16, 64, 16, 0],
            Self::G16_B16R16_2PLANE_420_UNORM => [16, 64, 16, 0],
            Self::G8_B8_R8_3PLANE_422_UNORM => [8, 16, 8, 0],
            Self::G8_B8R8_2PLANE_422_UNORM => [8, 16, 8, 0],
            Self::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => [10, 20, 10, 0],
            Self::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => [10, 20, 10, 0],
            Self::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => [12, 24, 12, 0],
            Self::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => [12, 24, 12, 0],
            Self::G16_B16_R16_3PLANE_422_UNORM => [16, 32, 16, 0],
            Self::G16_B16R16_2PLANE_422_UNORM => [16, 32, 16, 0],
            Self::G8_B8_R8_3PLANE_444_UNORM => [8, 8, 8, 0],
            Self::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 => [10, 10, 10, 0],
            Self::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 => [12, 12, 12, 0],
            Self::G16_B16_R16_3PLANE_444_UNORM => [16, 16, 16, 0],
            Self::G8_B8R8_2PLANE_444_UNORM => [8, 8, 8, 0],
            Self::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 => [10, 10, 10, 0],
            Self::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 => [12, 12, 12, 0],
            Self::G16_B16R16_2PLANE_444_UNORM => [16, 16, 16, 0],
        }
    }
    #[doc = r" Returns the block compression scheme used for this format, if any. Returns `None` if"]
    #[doc = r" the format does not use compression."]
    pub fn compression(&self) -> Option<CompressionType> {
        match self {
            Self::BC1_RGB_UNORM_BLOCK => Some(CompressionType::BC1),
            Self::BC1_RGB_SRGB_BLOCK => Some(CompressionType::BC1),
            Self::BC1_RGBA_UNORM_BLOCK => Some(CompressionType::BC1),
            Self::BC1_RGBA_SRGB_BLOCK => Some(CompressionType::BC1),
            Self::BC2_UNORM_BLOCK => Some(CompressionType::BC2),
            Self::BC2_SRGB_BLOCK => Some(CompressionType::BC2),
            Self::BC3_UNORM_BLOCK => Some(CompressionType::BC3),
            Self::BC3_SRGB_BLOCK => Some(CompressionType::BC3),
            Self::BC4_UNORM_BLOCK => Some(CompressionType::BC4),
            Self::BC4_SNORM_BLOCK => Some(CompressionType::BC4),
            Self::BC5_UNORM_BLOCK => Some(CompressionType::BC5),
            Self::BC5_SNORM_BLOCK => Some(CompressionType::BC5),
            Self::BC6H_UFLOAT_BLOCK => Some(CompressionType::BC6H),
            Self::BC6H_SFLOAT_BLOCK => Some(CompressionType::BC6H),
            Self::BC7_UNORM_BLOCK => Some(CompressionType::BC7),
            Self::BC7_SRGB_BLOCK => Some(CompressionType::BC7),
            Self::ETC2_R8G8B8_UNORM_BLOCK => Some(CompressionType::ETC2),
            Self::ETC2_R8G8B8_SRGB_BLOCK => Some(CompressionType::ETC2),
            Self::ETC2_R8G8B8A1_UNORM_BLOCK => Some(CompressionType::ETC2),
            Self::ETC2_R8G8B8A1_SRGB_BLOCK => Some(CompressionType::ETC2),
            Self::ETC2_R8G8B8A8_UNORM_BLOCK => Some(CompressionType::ETC2),
            Self::ETC2_R8G8B8A8_SRGB_BLOCK => Some(CompressionType::ETC2),
            Self::EAC_R11_UNORM_BLOCK => Some(CompressionType::EAC),
            Self::EAC_R11_SNORM_BLOCK => Some(CompressionType::EAC),
            Self::EAC_R11G11_UNORM_BLOCK => Some(CompressionType::EAC),
            Self::EAC_R11G11_SNORM_BLOCK => Some(CompressionType::EAC),
            Self::ASTC_4x4_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_4x4_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_5x4_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_5x4_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_5x5_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_5x5_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_6x5_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_6x5_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_6x6_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_6x6_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x5_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x5_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x6_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x6_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x8_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x8_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x5_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x5_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x6_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x6_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x8_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x8_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x10_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x10_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_12x10_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_12x10_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_12x12_UNORM_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_12x12_SRGB_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_4x4_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_5x4_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_5x5_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_6x5_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_6x6_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x5_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x6_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_8x8_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x5_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x6_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x8_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_10x10_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_12x10_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::ASTC_12x12_SFLOAT_BLOCK => Some(CompressionType::ASTC),
            Self::PVRTC1_2BPP_UNORM_BLOCK => Some(CompressionType::PVRTC1),
            Self::PVRTC1_4BPP_UNORM_BLOCK => Some(CompressionType::PVRTC1),
            Self::PVRTC2_2BPP_UNORM_BLOCK => Some(CompressionType::PVRTC2),
            Self::PVRTC2_4BPP_UNORM_BLOCK => Some(CompressionType::PVRTC2),
            Self::PVRTC1_2BPP_SRGB_BLOCK => Some(CompressionType::PVRTC1),
            Self::PVRTC1_4BPP_SRGB_BLOCK => Some(CompressionType::PVRTC1),
            Self::PVRTC2_2BPP_SRGB_BLOCK => Some(CompressionType::PVRTC2),
            Self::PVRTC2_4BPP_SRGB_BLOCK => Some(CompressionType::PVRTC2),
            _ => None,
        }
    }
    #[doc = r" For multi-planar formats, returns a slice of length 2 or 3, containing the"]
    #[doc = r" equivalent regular format of each plane."]
    #[doc = r""]
    #[doc = r" For non-planar formats, returns the empty slice."]
    pub fn planes(&self) -> &'static [Self] {
        match self {
            Self::G8_B8_R8_3PLANE_420_UNORM => &[Self::R8_UNORM, Self::R8_UNORM, Self::R8_UNORM],
            Self::G8_B8R8_2PLANE_420_UNORM => &[Self::R8_UNORM, Self::R8G8_UNORM],
            Self::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => &[
                Self::R10X6_UNORM_PACK16,
                Self::R10X6_UNORM_PACK16,
                Self::R10X6_UNORM_PACK16,
            ],
            Self::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => {
                &[Self::R10X6_UNORM_PACK16, Self::R10X6G10X6_UNORM_2PACK16]
            }
            Self::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => &[
                Self::R12X4_UNORM_PACK16,
                Self::R12X4_UNORM_PACK16,
                Self::R12X4_UNORM_PACK16,
            ],
            Self::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => {
                &[Self::R12X4_UNORM_PACK16, Self::R12X4G12X4_UNORM_2PACK16]
            }
            Self::G16_B16_R16_3PLANE_420_UNORM => {
                &[Self::R16_UNORM, Self::R16_UNORM, Self::R16_UNORM]
            }
            Self::G16_B16R16_2PLANE_420_UNORM => &[Self::R16_UNORM, Self::R16G16_UNORM],
            Self::G8_B8_R8_3PLANE_422_UNORM => &[Self::R8_UNORM, Self::R8_UNORM, Self::R8_UNORM],
            Self::G8_B8R8_2PLANE_422_UNORM => &[Self::R8_UNORM, Self::R8G8_UNORM],
            Self::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => &[
                Self::R10X6_UNORM_PACK16,
                Self::R10X6_UNORM_PACK16,
                Self::R10X6_UNORM_PACK16,
            ],
            Self::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => {
                &[Self::R10X6_UNORM_PACK16, Self::R10X6G10X6_UNORM_2PACK16]
            }
            Self::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => &[
                Self::R12X4_UNORM_PACK16,
                Self::R12X4_UNORM_PACK16,
                Self::R12X4_UNORM_PACK16,
            ],
            Self::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => {
                &[Self::R12X4_UNORM_PACK16, Self::R12X4G12X4_UNORM_2PACK16]
            }
            Self::G16_B16_R16_3PLANE_422_UNORM => {
                &[Self::R16_UNORM, Self::R16_UNORM, Self::R16_UNORM]
            }
            Self::G16_B16R16_2PLANE_422_UNORM => &[Self::R16_UNORM, Self::R16G16_UNORM],
            Self::G8_B8_R8_3PLANE_444_UNORM => &[Self::R8_UNORM, Self::R8_UNORM, Self::R8_UNORM],
            Self::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 => &[
                Self::R10X6_UNORM_PACK16,
                Self::R10X6_UNORM_PACK16,
                Self::R10X6_UNORM_PACK16,
            ],
            Self::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 => &[
                Self::R12X4_UNORM_PACK16,
                Self::R12X4_UNORM_PACK16,
                Self::R12X4_UNORM_PACK16,
            ],
            Self::G16_B16_R16_3PLANE_444_UNORM => {
                &[Self::R16_UNORM, Self::R16_UNORM, Self::R16_UNORM]
            }
            Self::G8_B8R8_2PLANE_444_UNORM => &[Self::R8_UNORM, Self::R8G8_UNORM],
            Self::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 => {
                &[Self::R10X6_UNORM_PACK16, Self::R10X6G10X6_UNORM_2PACK16]
            }
            Self::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 => {
                &[Self::R12X4_UNORM_PACK16, Self::R12X4G12X4_UNORM_2PACK16]
            }
            Self::G16_B16R16_2PLANE_444_UNORM => &[Self::R16_UNORM, Self::R16G16_UNORM],
            _ => &[],
        }
    }
    #[doc = r" Returns the size in bytes of a single texel block of this format. Returns `None`"]
    #[doc = r" if the texel block size is not well-defined for this format."]
    #[doc = r""]
    #[doc = r" For regular formats, this is the size of a single texel, but for more specialized"]
    #[doc = r" formats this may be the size of multiple texels."]
    #[doc = r""]
    #[doc = r" Depth/stencil formats are considered to have an opaque memory representation, and do"]
    #[doc = r" not have a well-defined size. Multi-planar formats store the color components"]
    #[doc = r" disjointly in memory, and therefore do not have a well-defined size for all"]
    #[doc = r" components as a whole. The individual planes do have a well-defined size."]
    pub fn size(&self) -> Option<DeviceSize> {
        match self {
            Self::R4G4_UNORM_PACK8 => Some(1),
            Self::R4G4B4A4_UNORM_PACK16 => Some(2),
            Self::B4G4R4A4_UNORM_PACK16 => Some(2),
            Self::R5G6B5_UNORM_PACK16 => Some(2),
            Self::B5G6R5_UNORM_PACK16 => Some(2),
            Self::R5G5B5A1_UNORM_PACK16 => Some(2),
            Self::B5G5R5A1_UNORM_PACK16 => Some(2),
            Self::A1R5G5B5_UNORM_PACK16 => Some(2),
            Self::R8_UNORM => Some(1),
            Self::R8_SNORM => Some(1),
            Self::R8_USCALED => Some(1),
            Self::R8_SSCALED => Some(1),
            Self::R8_UINT => Some(1),
            Self::R8_SINT => Some(1),
            Self::R8_SRGB => Some(1),
            Self::R8G8_UNORM => Some(2),
            Self::R8G8_SNORM => Some(2),
            Self::R8G8_USCALED => Some(2),
            Self::R8G8_SSCALED => Some(2),
            Self::R8G8_UINT => Some(2),
            Self::R8G8_SINT => Some(2),
            Self::R8G8_SRGB => Some(2),
            Self::R8G8B8_UNORM => Some(3),
            Self::R8G8B8_SNORM => Some(3),
            Self::R8G8B8_USCALED => Some(3),
            Self::R8G8B8_SSCALED => Some(3),
            Self::R8G8B8_UINT => Some(3),
            Self::R8G8B8_SINT => Some(3),
            Self::R8G8B8_SRGB => Some(3),
            Self::B8G8R8_UNORM => Some(3),
            Self::B8G8R8_SNORM => Some(3),
            Self::B8G8R8_USCALED => Some(3),
            Self::B8G8R8_SSCALED => Some(3),
            Self::B8G8R8_UINT => Some(3),
            Self::B8G8R8_SINT => Some(3),
            Self::B8G8R8_SRGB => Some(3),
            Self::R8G8B8A8_UNORM => Some(4),
            Self::R8G8B8A8_SNORM => Some(4),
            Self::R8G8B8A8_USCALED => Some(4),
            Self::R8G8B8A8_SSCALED => Some(4),
            Self::R8G8B8A8_UINT => Some(4),
            Self::R8G8B8A8_SINT => Some(4),
            Self::R8G8B8A8_SRGB => Some(4),
            Self::B8G8R8A8_UNORM => Some(4),
            Self::B8G8R8A8_SNORM => Some(4),
            Self::B8G8R8A8_USCALED => Some(4),
            Self::B8G8R8A8_SSCALED => Some(4),
            Self::B8G8R8A8_UINT => Some(4),
            Self::B8G8R8A8_SINT => Some(4),
            Self::B8G8R8A8_SRGB => Some(4),
            Self::A8B8G8R8_UNORM_PACK32 => Some(4),
            Self::A8B8G8R8_SNORM_PACK32 => Some(4),
            Self::A8B8G8R8_USCALED_PACK32 => Some(4),
            Self::A8B8G8R8_SSCALED_PACK32 => Some(4),
            Self::A8B8G8R8_UINT_PACK32 => Some(4),
            Self::A8B8G8R8_SINT_PACK32 => Some(4),
            Self::A8B8G8R8_SRGB_PACK32 => Some(4),
            Self::A2R10G10B10_UNORM_PACK32 => Some(4),
            Self::A2R10G10B10_SNORM_PACK32 => Some(4),
            Self::A2R10G10B10_USCALED_PACK32 => Some(4),
            Self::A2R10G10B10_SSCALED_PACK32 => Some(4),
            Self::A2R10G10B10_UINT_PACK32 => Some(4),
            Self::A2R10G10B10_SINT_PACK32 => Some(4),
            Self::A2B10G10R10_UNORM_PACK32 => Some(4),
            Self::A2B10G10R10_SNORM_PACK32 => Some(4),
            Self::A2B10G10R10_USCALED_PACK32 => Some(4),
            Self::A2B10G10R10_SSCALED_PACK32 => Some(4),
            Self::A2B10G10R10_UINT_PACK32 => Some(4),
            Self::A2B10G10R10_SINT_PACK32 => Some(4),
            Self::R16_UNORM => Some(2),
            Self::R16_SNORM => Some(2),
            Self::R16_USCALED => Some(2),
            Self::R16_SSCALED => Some(2),
            Self::R16_UINT => Some(2),
            Self::R16_SINT => Some(2),
            Self::R16_SFLOAT => Some(2),
            Self::R16G16_UNORM => Some(4),
            Self::R16G16_SNORM => Some(4),
            Self::R16G16_USCALED => Some(4),
            Self::R16G16_SSCALED => Some(4),
            Self::R16G16_UINT => Some(4),
            Self::R16G16_SINT => Some(4),
            Self::R16G16_SFLOAT => Some(4),
            Self::R16G16B16_UNORM => Some(6),
            Self::R16G16B16_SNORM => Some(6),
            Self::R16G16B16_USCALED => Some(6),
            Self::R16G16B16_SSCALED => Some(6),
            Self::R16G16B16_UINT => Some(6),
            Self::R16G16B16_SINT => Some(6),
            Self::R16G16B16_SFLOAT => Some(6),
            Self::R16G16B16A16_UNORM => Some(8),
            Self::R16G16B16A16_SNORM => Some(8),
            Self::R16G16B16A16_USCALED => Some(8),
            Self::R16G16B16A16_SSCALED => Some(8),
            Self::R16G16B16A16_UINT => Some(8),
            Self::R16G16B16A16_SINT => Some(8),
            Self::R16G16B16A16_SFLOAT => Some(8),
            Self::R32_UINT => Some(4),
            Self::R32_SINT => Some(4),
            Self::R32_SFLOAT => Some(4),
            Self::R32G32_UINT => Some(8),
            Self::R32G32_SINT => Some(8),
            Self::R32G32_SFLOAT => Some(8),
            Self::R32G32B32_UINT => Some(12),
            Self::R32G32B32_SINT => Some(12),
            Self::R32G32B32_SFLOAT => Some(12),
            Self::R32G32B32A32_UINT => Some(16),
            Self::R32G32B32A32_SINT => Some(16),
            Self::R32G32B32A32_SFLOAT => Some(16),
            Self::R64_UINT => Some(8),
            Self::R64_SINT => Some(8),
            Self::R64_SFLOAT => Some(8),
            Self::R64G64_UINT => Some(16),
            Self::R64G64_SINT => Some(16),
            Self::R64G64_SFLOAT => Some(16),
            Self::R64G64B64_UINT => Some(24),
            Self::R64G64B64_SINT => Some(24),
            Self::R64G64B64_SFLOAT => Some(24),
            Self::R64G64B64A64_UINT => Some(32),
            Self::R64G64B64A64_SINT => Some(32),
            Self::R64G64B64A64_SFLOAT => Some(32),
            Self::B10G11R11_UFLOAT_PACK32 => Some(4),
            Self::E5B9G9R9_UFLOAT_PACK32 => Some(4),
            Self::R10X6_UNORM_PACK16 => Some(2),
            Self::R10X6G10X6_UNORM_2PACK16 => Some(4),
            Self::R10X6G10X6B10X6A10X6_UNORM_4PACK16 => Some(8),
            Self::R12X4_UNORM_PACK16 => Some(2),
            Self::R12X4G12X4_UNORM_2PACK16 => Some(4),
            Self::R12X4G12X4B12X4A12X4_UNORM_4PACK16 => Some(8),
            Self::A4R4G4B4_UNORM_PACK16 => Some(2),
            Self::A4B4G4R4_UNORM_PACK16 => Some(2),
            Self::BC1_RGB_UNORM_BLOCK => Some(8),
            Self::BC1_RGB_SRGB_BLOCK => Some(8),
            Self::BC1_RGBA_UNORM_BLOCK => Some(8),
            Self::BC1_RGBA_SRGB_BLOCK => Some(8),
            Self::BC2_UNORM_BLOCK => Some(16),
            Self::BC2_SRGB_BLOCK => Some(16),
            Self::BC3_UNORM_BLOCK => Some(16),
            Self::BC3_SRGB_BLOCK => Some(16),
            Self::BC4_UNORM_BLOCK => Some(8),
            Self::BC4_SNORM_BLOCK => Some(8),
            Self::BC5_UNORM_BLOCK => Some(16),
            Self::BC5_SNORM_BLOCK => Some(16),
            Self::BC6H_UFLOAT_BLOCK => Some(16),
            Self::BC6H_SFLOAT_BLOCK => Some(16),
            Self::BC7_UNORM_BLOCK => Some(16),
            Self::BC7_SRGB_BLOCK => Some(16),
            Self::ETC2_R8G8B8_UNORM_BLOCK => Some(8),
            Self::ETC2_R8G8B8_SRGB_BLOCK => Some(8),
            Self::ETC2_R8G8B8A1_UNORM_BLOCK => Some(8),
            Self::ETC2_R8G8B8A1_SRGB_BLOCK => Some(8),
            Self::ETC2_R8G8B8A8_UNORM_BLOCK => Some(16),
            Self::ETC2_R8G8B8A8_SRGB_BLOCK => Some(16),
            Self::EAC_R11_UNORM_BLOCK => Some(8),
            Self::EAC_R11_SNORM_BLOCK => Some(8),
            Self::EAC_R11G11_UNORM_BLOCK => Some(16),
            Self::EAC_R11G11_SNORM_BLOCK => Some(16),
            Self::ASTC_4x4_UNORM_BLOCK => Some(16),
            Self::ASTC_4x4_SRGB_BLOCK => Some(16),
            Self::ASTC_5x4_UNORM_BLOCK => Some(16),
            Self::ASTC_5x4_SRGB_BLOCK => Some(16),
            Self::ASTC_5x5_UNORM_BLOCK => Some(16),
            Self::ASTC_5x5_SRGB_BLOCK => Some(16),
            Self::ASTC_6x5_UNORM_BLOCK => Some(16),
            Self::ASTC_6x5_SRGB_BLOCK => Some(16),
            Self::ASTC_6x6_UNORM_BLOCK => Some(16),
            Self::ASTC_6x6_SRGB_BLOCK => Some(16),
            Self::ASTC_8x5_UNORM_BLOCK => Some(16),
            Self::ASTC_8x5_SRGB_BLOCK => Some(16),
            Self::ASTC_8x6_UNORM_BLOCK => Some(16),
            Self::ASTC_8x6_SRGB_BLOCK => Some(16),
            Self::ASTC_8x8_UNORM_BLOCK => Some(16),
            Self::ASTC_8x8_SRGB_BLOCK => Some(16),
            Self::ASTC_10x5_UNORM_BLOCK => Some(16),
            Self::ASTC_10x5_SRGB_BLOCK => Some(16),
            Self::ASTC_10x6_UNORM_BLOCK => Some(16),
            Self::ASTC_10x6_SRGB_BLOCK => Some(16),
            Self::ASTC_10x8_UNORM_BLOCK => Some(16),
            Self::ASTC_10x8_SRGB_BLOCK => Some(16),
            Self::ASTC_10x10_UNORM_BLOCK => Some(16),
            Self::ASTC_10x10_SRGB_BLOCK => Some(16),
            Self::ASTC_12x10_UNORM_BLOCK => Some(16),
            Self::ASTC_12x10_SRGB_BLOCK => Some(16),
            Self::ASTC_12x12_UNORM_BLOCK => Some(16),
            Self::ASTC_12x12_SRGB_BLOCK => Some(16),
            Self::ASTC_4x4_SFLOAT_BLOCK => Some(16),
            Self::ASTC_5x4_SFLOAT_BLOCK => Some(16),
            Self::ASTC_5x5_SFLOAT_BLOCK => Some(16),
            Self::ASTC_6x5_SFLOAT_BLOCK => Some(16),
            Self::ASTC_6x6_SFLOAT_BLOCK => Some(16),
            Self::ASTC_8x5_SFLOAT_BLOCK => Some(16),
            Self::ASTC_8x6_SFLOAT_BLOCK => Some(16),
            Self::ASTC_8x8_SFLOAT_BLOCK => Some(16),
            Self::ASTC_10x5_SFLOAT_BLOCK => Some(16),
            Self::ASTC_10x6_SFLOAT_BLOCK => Some(16),
            Self::ASTC_10x8_SFLOAT_BLOCK => Some(16),
            Self::ASTC_10x10_SFLOAT_BLOCK => Some(16),
            Self::ASTC_12x10_SFLOAT_BLOCK => Some(16),
            Self::ASTC_12x12_SFLOAT_BLOCK => Some(16),
            Self::PVRTC1_2BPP_UNORM_BLOCK => Some(8),
            Self::PVRTC1_4BPP_UNORM_BLOCK => Some(8),
            Self::PVRTC2_2BPP_UNORM_BLOCK => Some(8),
            Self::PVRTC2_4BPP_UNORM_BLOCK => Some(8),
            Self::PVRTC1_2BPP_SRGB_BLOCK => Some(8),
            Self::PVRTC1_4BPP_SRGB_BLOCK => Some(8),
            Self::PVRTC2_2BPP_SRGB_BLOCK => Some(8),
            Self::PVRTC2_4BPP_SRGB_BLOCK => Some(8),
            Self::G8B8G8R8_422_UNORM => Some(8),
            Self::B8G8R8G8_422_UNORM => Some(8),
            Self::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => Some(16),
            Self::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => Some(16),
            Self::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => Some(16),
            Self::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => Some(16),
            Self::G16B16G16R16_422_UNORM => Some(16),
            Self::B16G16R16G16_422_UNORM => Some(16),
            _ => None,
        }
    }
    #[doc = r" Returns the numeric data type of the color aspect of this format. Returns `None`"]
    #[doc = r" for depth/stencil formats."]
    pub fn type_color(&self) -> Option<NumericType> {
        match self {
            Self::R4G4_UNORM_PACK8 => Some(NumericType::UNORM),
            Self::R4G4B4A4_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::B4G4R4A4_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::R5G6B5_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::B5G6R5_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::R5G5B5A1_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::B5G5R5A1_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::A1R5G5B5_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::R8_UNORM => Some(NumericType::UNORM),
            Self::R8_SNORM => Some(NumericType::SNORM),
            Self::R8_USCALED => Some(NumericType::USCALED),
            Self::R8_SSCALED => Some(NumericType::SSCALED),
            Self::R8_UINT => Some(NumericType::UINT),
            Self::R8_SINT => Some(NumericType::SINT),
            Self::R8_SRGB => Some(NumericType::SRGB),
            Self::R8G8_UNORM => Some(NumericType::UNORM),
            Self::R8G8_SNORM => Some(NumericType::SNORM),
            Self::R8G8_USCALED => Some(NumericType::USCALED),
            Self::R8G8_SSCALED => Some(NumericType::SSCALED),
            Self::R8G8_UINT => Some(NumericType::UINT),
            Self::R8G8_SINT => Some(NumericType::SINT),
            Self::R8G8_SRGB => Some(NumericType::SRGB),
            Self::R8G8B8_UNORM => Some(NumericType::UNORM),
            Self::R8G8B8_SNORM => Some(NumericType::SNORM),
            Self::R8G8B8_USCALED => Some(NumericType::USCALED),
            Self::R8G8B8_SSCALED => Some(NumericType::SSCALED),
            Self::R8G8B8_UINT => Some(NumericType::UINT),
            Self::R8G8B8_SINT => Some(NumericType::SINT),
            Self::R8G8B8_SRGB => Some(NumericType::SRGB),
            Self::B8G8R8_UNORM => Some(NumericType::UNORM),
            Self::B8G8R8_SNORM => Some(NumericType::SNORM),
            Self::B8G8R8_USCALED => Some(NumericType::USCALED),
            Self::B8G8R8_SSCALED => Some(NumericType::SSCALED),
            Self::B8G8R8_UINT => Some(NumericType::UINT),
            Self::B8G8R8_SINT => Some(NumericType::SINT),
            Self::B8G8R8_SRGB => Some(NumericType::SRGB),
            Self::R8G8B8A8_UNORM => Some(NumericType::UNORM),
            Self::R8G8B8A8_SNORM => Some(NumericType::SNORM),
            Self::R8G8B8A8_USCALED => Some(NumericType::USCALED),
            Self::R8G8B8A8_SSCALED => Some(NumericType::SSCALED),
            Self::R8G8B8A8_UINT => Some(NumericType::UINT),
            Self::R8G8B8A8_SINT => Some(NumericType::SINT),
            Self::R8G8B8A8_SRGB => Some(NumericType::SRGB),
            Self::B8G8R8A8_UNORM => Some(NumericType::UNORM),
            Self::B8G8R8A8_SNORM => Some(NumericType::SNORM),
            Self::B8G8R8A8_USCALED => Some(NumericType::USCALED),
            Self::B8G8R8A8_SSCALED => Some(NumericType::SSCALED),
            Self::B8G8R8A8_UINT => Some(NumericType::UINT),
            Self::B8G8R8A8_SINT => Some(NumericType::SINT),
            Self::B8G8R8A8_SRGB => Some(NumericType::SRGB),
            Self::A8B8G8R8_UNORM_PACK32 => Some(NumericType::UNORM),
            Self::A8B8G8R8_SNORM_PACK32 => Some(NumericType::SNORM),
            Self::A8B8G8R8_USCALED_PACK32 => Some(NumericType::USCALED),
            Self::A8B8G8R8_SSCALED_PACK32 => Some(NumericType::SSCALED),
            Self::A8B8G8R8_UINT_PACK32 => Some(NumericType::UINT),
            Self::A8B8G8R8_SINT_PACK32 => Some(NumericType::SINT),
            Self::A8B8G8R8_SRGB_PACK32 => Some(NumericType::SRGB),
            Self::A2R10G10B10_UNORM_PACK32 => Some(NumericType::UNORM),
            Self::A2R10G10B10_SNORM_PACK32 => Some(NumericType::SNORM),
            Self::A2R10G10B10_USCALED_PACK32 => Some(NumericType::USCALED),
            Self::A2R10G10B10_SSCALED_PACK32 => Some(NumericType::SSCALED),
            Self::A2R10G10B10_UINT_PACK32 => Some(NumericType::UINT),
            Self::A2R10G10B10_SINT_PACK32 => Some(NumericType::SINT),
            Self::A2B10G10R10_UNORM_PACK32 => Some(NumericType::UNORM),
            Self::A2B10G10R10_SNORM_PACK32 => Some(NumericType::SNORM),
            Self::A2B10G10R10_USCALED_PACK32 => Some(NumericType::USCALED),
            Self::A2B10G10R10_SSCALED_PACK32 => Some(NumericType::SSCALED),
            Self::A2B10G10R10_UINT_PACK32 => Some(NumericType::UINT),
            Self::A2B10G10R10_SINT_PACK32 => Some(NumericType::SINT),
            Self::R16_UNORM => Some(NumericType::UNORM),
            Self::R16_SNORM => Some(NumericType::SNORM),
            Self::R16_USCALED => Some(NumericType::USCALED),
            Self::R16_SSCALED => Some(NumericType::SSCALED),
            Self::R16_UINT => Some(NumericType::UINT),
            Self::R16_SINT => Some(NumericType::SINT),
            Self::R16_SFLOAT => Some(NumericType::SFLOAT),
            Self::R16G16_UNORM => Some(NumericType::UNORM),
            Self::R16G16_SNORM => Some(NumericType::SNORM),
            Self::R16G16_USCALED => Some(NumericType::USCALED),
            Self::R16G16_SSCALED => Some(NumericType::SSCALED),
            Self::R16G16_UINT => Some(NumericType::UINT),
            Self::R16G16_SINT => Some(NumericType::SINT),
            Self::R16G16_SFLOAT => Some(NumericType::SFLOAT),
            Self::R16G16B16_UNORM => Some(NumericType::UNORM),
            Self::R16G16B16_SNORM => Some(NumericType::SNORM),
            Self::R16G16B16_USCALED => Some(NumericType::USCALED),
            Self::R16G16B16_SSCALED => Some(NumericType::SSCALED),
            Self::R16G16B16_UINT => Some(NumericType::UINT),
            Self::R16G16B16_SINT => Some(NumericType::SINT),
            Self::R16G16B16_SFLOAT => Some(NumericType::SFLOAT),
            Self::R16G16B16A16_UNORM => Some(NumericType::UNORM),
            Self::R16G16B16A16_SNORM => Some(NumericType::SNORM),
            Self::R16G16B16A16_USCALED => Some(NumericType::USCALED),
            Self::R16G16B16A16_SSCALED => Some(NumericType::SSCALED),
            Self::R16G16B16A16_UINT => Some(NumericType::UINT),
            Self::R16G16B16A16_SINT => Some(NumericType::SINT),
            Self::R16G16B16A16_SFLOAT => Some(NumericType::SFLOAT),
            Self::R32_UINT => Some(NumericType::UINT),
            Self::R32_SINT => Some(NumericType::SINT),
            Self::R32_SFLOAT => Some(NumericType::SFLOAT),
            Self::R32G32_UINT => Some(NumericType::UINT),
            Self::R32G32_SINT => Some(NumericType::SINT),
            Self::R32G32_SFLOAT => Some(NumericType::SFLOAT),
            Self::R32G32B32_UINT => Some(NumericType::UINT),
            Self::R32G32B32_SINT => Some(NumericType::SINT),
            Self::R32G32B32_SFLOAT => Some(NumericType::SFLOAT),
            Self::R32G32B32A32_UINT => Some(NumericType::UINT),
            Self::R32G32B32A32_SINT => Some(NumericType::SINT),
            Self::R32G32B32A32_SFLOAT => Some(NumericType::SFLOAT),
            Self::R64_UINT => Some(NumericType::UINT),
            Self::R64_SINT => Some(NumericType::SINT),
            Self::R64_SFLOAT => Some(NumericType::SFLOAT),
            Self::R64G64_UINT => Some(NumericType::UINT),
            Self::R64G64_SINT => Some(NumericType::SINT),
            Self::R64G64_SFLOAT => Some(NumericType::SFLOAT),
            Self::R64G64B64_UINT => Some(NumericType::UINT),
            Self::R64G64B64_SINT => Some(NumericType::SINT),
            Self::R64G64B64_SFLOAT => Some(NumericType::SFLOAT),
            Self::R64G64B64A64_UINT => Some(NumericType::UINT),
            Self::R64G64B64A64_SINT => Some(NumericType::SINT),
            Self::R64G64B64A64_SFLOAT => Some(NumericType::SFLOAT),
            Self::B10G11R11_UFLOAT_PACK32 => Some(NumericType::UFLOAT),
            Self::E5B9G9R9_UFLOAT_PACK32 => Some(NumericType::UFLOAT),
            Self::R10X6_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::R10X6G10X6_UNORM_2PACK16 => Some(NumericType::UNORM),
            Self::R10X6G10X6B10X6A10X6_UNORM_4PACK16 => Some(NumericType::UNORM),
            Self::R12X4_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::R12X4G12X4_UNORM_2PACK16 => Some(NumericType::UNORM),
            Self::R12X4G12X4B12X4A12X4_UNORM_4PACK16 => Some(NumericType::UNORM),
            Self::A4R4G4B4_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::A4B4G4R4_UNORM_PACK16 => Some(NumericType::UNORM),
            Self::BC1_RGB_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC1_RGB_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::BC1_RGBA_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC1_RGBA_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::BC2_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC2_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::BC3_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC3_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::BC4_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC4_SNORM_BLOCK => Some(NumericType::SNORM),
            Self::BC5_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC5_SNORM_BLOCK => Some(NumericType::SNORM),
            Self::BC6H_UFLOAT_BLOCK => Some(NumericType::UFLOAT),
            Self::BC6H_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::BC7_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::BC7_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ETC2_R8G8B8_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ETC2_R8G8B8_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ETC2_R8G8B8A1_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ETC2_R8G8B8A1_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ETC2_R8G8B8A8_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ETC2_R8G8B8A8_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::EAC_R11_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::EAC_R11_SNORM_BLOCK => Some(NumericType::SNORM),
            Self::EAC_R11G11_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::EAC_R11G11_SNORM_BLOCK => Some(NumericType::SNORM),
            Self::ASTC_4x4_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_4x4_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_5x4_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_5x4_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_5x5_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_5x5_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_6x5_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_6x5_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_6x6_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_6x6_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_8x5_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_8x5_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_8x6_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_8x6_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_8x8_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_8x8_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_10x5_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_10x5_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_10x6_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_10x6_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_10x8_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_10x8_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_10x10_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_10x10_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_12x10_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_12x10_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_12x12_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::ASTC_12x12_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::ASTC_4x4_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_5x4_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_5x5_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_6x5_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_6x6_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_8x5_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_8x6_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_8x8_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_10x5_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_10x6_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_10x8_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_10x10_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_12x10_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::ASTC_12x12_SFLOAT_BLOCK => Some(NumericType::SFLOAT),
            Self::PVRTC1_2BPP_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::PVRTC1_4BPP_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::PVRTC2_2BPP_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::PVRTC2_4BPP_UNORM_BLOCK => Some(NumericType::UNORM),
            Self::PVRTC1_2BPP_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::PVRTC1_4BPP_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::PVRTC2_2BPP_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::PVRTC2_4BPP_SRGB_BLOCK => Some(NumericType::SRGB),
            Self::G8B8G8R8_422_UNORM => Some(NumericType::UNORM),
            Self::B8G8R8G8_422_UNORM => Some(NumericType::UNORM),
            Self::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => Some(NumericType::UNORM),
            Self::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => Some(NumericType::UNORM),
            Self::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => Some(NumericType::UNORM),
            Self::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => Some(NumericType::UNORM),
            Self::G16B16G16R16_422_UNORM => Some(NumericType::UNORM),
            Self::B16G16R16G16_422_UNORM => Some(NumericType::UNORM),
            Self::G8_B8_R8_3PLANE_420_UNORM => Some(NumericType::UNORM),
            Self::G8_B8R8_2PLANE_420_UNORM => Some(NumericType::UNORM),
            Self::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G16_B16_R16_3PLANE_420_UNORM => Some(NumericType::UNORM),
            Self::G16_B16R16_2PLANE_420_UNORM => Some(NumericType::UNORM),
            Self::G8_B8_R8_3PLANE_422_UNORM => Some(NumericType::UNORM),
            Self::G8_B8R8_2PLANE_422_UNORM => Some(NumericType::UNORM),
            Self::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G16_B16_R16_3PLANE_422_UNORM => Some(NumericType::UNORM),
            Self::G16_B16R16_2PLANE_422_UNORM => Some(NumericType::UNORM),
            Self::G8_B8_R8_3PLANE_444_UNORM => Some(NumericType::UNORM),
            Self::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G16_B16_R16_3PLANE_444_UNORM => Some(NumericType::UNORM),
            Self::G8_B8R8_2PLANE_444_UNORM => Some(NumericType::UNORM),
            Self::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 => Some(NumericType::UNORM),
            Self::G16_B16R16_2PLANE_444_UNORM => Some(NumericType::UNORM),
            _ => None,
        }
    }
    #[doc = r" Returns the numeric data type of the depth aspect of this format. Returns `None`"]
    #[doc = r" color and stencil-only formats."]
    pub fn type_depth(&self) -> Option<NumericType> {
        match self {
            Self::D16_UNORM => Some(NumericType::UNORM),
            Self::X8_D24_UNORM_PACK32 => Some(NumericType::UNORM),
            Self::D32_SFLOAT => Some(NumericType::SFLOAT),
            Self::D16_UNORM_S8_UINT => Some(NumericType::UNORM),
            Self::D24_UNORM_S8_UINT => Some(NumericType::UNORM),
            Self::D32_SFLOAT_S8_UINT => Some(NumericType::SFLOAT),
            _ => None,
        }
    }
    #[doc = r" Returns the numeric data type of the stencil aspect of this format. Returns `None`"]
    #[doc = r" for color and depth-only formats."]
    pub fn type_stencil(&self) -> Option<NumericType> {
        match self {
            Self::S8_UINT => Some(NumericType::UINT),
            Self::D16_UNORM_S8_UINT => Some(NumericType::UINT),
            Self::D24_UNORM_S8_UINT => Some(NumericType::UINT),
            Self::D32_SFLOAT_S8_UINT => Some(NumericType::UINT),
            _ => None,
        }
    }
}
impl TryFrom<ash::vk::Format> for Format {
    type Error = ();
    fn try_from(val: ash::vk::Format) -> Result<Format, ()> {
        match val {
            ash::vk::Format::R4G4_UNORM_PACK8 => Ok(Self::R4G4_UNORM_PACK8),
            ash::vk::Format::R4G4B4A4_UNORM_PACK16 => Ok(Self::R4G4B4A4_UNORM_PACK16),
            ash::vk::Format::B4G4R4A4_UNORM_PACK16 => Ok(Self::B4G4R4A4_UNORM_PACK16),
            ash::vk::Format::R5G6B5_UNORM_PACK16 => Ok(Self::R5G6B5_UNORM_PACK16),
            ash::vk::Format::B5G6R5_UNORM_PACK16 => Ok(Self::B5G6R5_UNORM_PACK16),
            ash::vk::Format::R5G5B5A1_UNORM_PACK16 => Ok(Self::R5G5B5A1_UNORM_PACK16),
            ash::vk::Format::B5G5R5A1_UNORM_PACK16 => Ok(Self::B5G5R5A1_UNORM_PACK16),
            ash::vk::Format::A1R5G5B5_UNORM_PACK16 => Ok(Self::A1R5G5B5_UNORM_PACK16),
            ash::vk::Format::R8_UNORM => Ok(Self::R8_UNORM),
            ash::vk::Format::R8_SNORM => Ok(Self::R8_SNORM),
            ash::vk::Format::R8_USCALED => Ok(Self::R8_USCALED),
            ash::vk::Format::R8_SSCALED => Ok(Self::R8_SSCALED),
            ash::vk::Format::R8_UINT => Ok(Self::R8_UINT),
            ash::vk::Format::R8_SINT => Ok(Self::R8_SINT),
            ash::vk::Format::R8_SRGB => Ok(Self::R8_SRGB),
            ash::vk::Format::R8G8_UNORM => Ok(Self::R8G8_UNORM),
            ash::vk::Format::R8G8_SNORM => Ok(Self::R8G8_SNORM),
            ash::vk::Format::R8G8_USCALED => Ok(Self::R8G8_USCALED),
            ash::vk::Format::R8G8_SSCALED => Ok(Self::R8G8_SSCALED),
            ash::vk::Format::R8G8_UINT => Ok(Self::R8G8_UINT),
            ash::vk::Format::R8G8_SINT => Ok(Self::R8G8_SINT),
            ash::vk::Format::R8G8_SRGB => Ok(Self::R8G8_SRGB),
            ash::vk::Format::R8G8B8_UNORM => Ok(Self::R8G8B8_UNORM),
            ash::vk::Format::R8G8B8_SNORM => Ok(Self::R8G8B8_SNORM),
            ash::vk::Format::R8G8B8_USCALED => Ok(Self::R8G8B8_USCALED),
            ash::vk::Format::R8G8B8_SSCALED => Ok(Self::R8G8B8_SSCALED),
            ash::vk::Format::R8G8B8_UINT => Ok(Self::R8G8B8_UINT),
            ash::vk::Format::R8G8B8_SINT => Ok(Self::R8G8B8_SINT),
            ash::vk::Format::R8G8B8_SRGB => Ok(Self::R8G8B8_SRGB),
            ash::vk::Format::B8G8R8_UNORM => Ok(Self::B8G8R8_UNORM),
            ash::vk::Format::B8G8R8_SNORM => Ok(Self::B8G8R8_SNORM),
            ash::vk::Format::B8G8R8_USCALED => Ok(Self::B8G8R8_USCALED),
            ash::vk::Format::B8G8R8_SSCALED => Ok(Self::B8G8R8_SSCALED),
            ash::vk::Format::B8G8R8_UINT => Ok(Self::B8G8R8_UINT),
            ash::vk::Format::B8G8R8_SINT => Ok(Self::B8G8R8_SINT),
            ash::vk::Format::B8G8R8_SRGB => Ok(Self::B8G8R8_SRGB),
            ash::vk::Format::R8G8B8A8_UNORM => Ok(Self::R8G8B8A8_UNORM),
            ash::vk::Format::R8G8B8A8_SNORM => Ok(Self::R8G8B8A8_SNORM),
            ash::vk::Format::R8G8B8A8_USCALED => Ok(Self::R8G8B8A8_USCALED),
            ash::vk::Format::R8G8B8A8_SSCALED => Ok(Self::R8G8B8A8_SSCALED),
            ash::vk::Format::R8G8B8A8_UINT => Ok(Self::R8G8B8A8_UINT),
            ash::vk::Format::R8G8B8A8_SINT => Ok(Self::R8G8B8A8_SINT),
            ash::vk::Format::R8G8B8A8_SRGB => Ok(Self::R8G8B8A8_SRGB),
            ash::vk::Format::B8G8R8A8_UNORM => Ok(Self::B8G8R8A8_UNORM),
            ash::vk::Format::B8G8R8A8_SNORM => Ok(Self::B8G8R8A8_SNORM),
            ash::vk::Format::B8G8R8A8_USCALED => Ok(Self::B8G8R8A8_USCALED),
            ash::vk::Format::B8G8R8A8_SSCALED => Ok(Self::B8G8R8A8_SSCALED),
            ash::vk::Format::B8G8R8A8_UINT => Ok(Self::B8G8R8A8_UINT),
            ash::vk::Format::B8G8R8A8_SINT => Ok(Self::B8G8R8A8_SINT),
            ash::vk::Format::B8G8R8A8_SRGB => Ok(Self::B8G8R8A8_SRGB),
            ash::vk::Format::A8B8G8R8_UNORM_PACK32 => Ok(Self::A8B8G8R8_UNORM_PACK32),
            ash::vk::Format::A8B8G8R8_SNORM_PACK32 => Ok(Self::A8B8G8R8_SNORM_PACK32),
            ash::vk::Format::A8B8G8R8_USCALED_PACK32 => Ok(Self::A8B8G8R8_USCALED_PACK32),
            ash::vk::Format::A8B8G8R8_SSCALED_PACK32 => Ok(Self::A8B8G8R8_SSCALED_PACK32),
            ash::vk::Format::A8B8G8R8_UINT_PACK32 => Ok(Self::A8B8G8R8_UINT_PACK32),
            ash::vk::Format::A8B8G8R8_SINT_PACK32 => Ok(Self::A8B8G8R8_SINT_PACK32),
            ash::vk::Format::A8B8G8R8_SRGB_PACK32 => Ok(Self::A8B8G8R8_SRGB_PACK32),
            ash::vk::Format::A2R10G10B10_UNORM_PACK32 => Ok(Self::A2R10G10B10_UNORM_PACK32),
            ash::vk::Format::A2R10G10B10_SNORM_PACK32 => Ok(Self::A2R10G10B10_SNORM_PACK32),
            ash::vk::Format::A2R10G10B10_USCALED_PACK32 => Ok(Self::A2R10G10B10_USCALED_PACK32),
            ash::vk::Format::A2R10G10B10_SSCALED_PACK32 => Ok(Self::A2R10G10B10_SSCALED_PACK32),
            ash::vk::Format::A2R10G10B10_UINT_PACK32 => Ok(Self::A2R10G10B10_UINT_PACK32),
            ash::vk::Format::A2R10G10B10_SINT_PACK32 => Ok(Self::A2R10G10B10_SINT_PACK32),
            ash::vk::Format::A2B10G10R10_UNORM_PACK32 => Ok(Self::A2B10G10R10_UNORM_PACK32),
            ash::vk::Format::A2B10G10R10_SNORM_PACK32 => Ok(Self::A2B10G10R10_SNORM_PACK32),
            ash::vk::Format::A2B10G10R10_USCALED_PACK32 => Ok(Self::A2B10G10R10_USCALED_PACK32),
            ash::vk::Format::A2B10G10R10_SSCALED_PACK32 => Ok(Self::A2B10G10R10_SSCALED_PACK32),
            ash::vk::Format::A2B10G10R10_UINT_PACK32 => Ok(Self::A2B10G10R10_UINT_PACK32),
            ash::vk::Format::A2B10G10R10_SINT_PACK32 => Ok(Self::A2B10G10R10_SINT_PACK32),
            ash::vk::Format::R16_UNORM => Ok(Self::R16_UNORM),
            ash::vk::Format::R16_SNORM => Ok(Self::R16_SNORM),
            ash::vk::Format::R16_USCALED => Ok(Self::R16_USCALED),
            ash::vk::Format::R16_SSCALED => Ok(Self::R16_SSCALED),
            ash::vk::Format::R16_UINT => Ok(Self::R16_UINT),
            ash::vk::Format::R16_SINT => Ok(Self::R16_SINT),
            ash::vk::Format::R16_SFLOAT => Ok(Self::R16_SFLOAT),
            ash::vk::Format::R16G16_UNORM => Ok(Self::R16G16_UNORM),
            ash::vk::Format::R16G16_SNORM => Ok(Self::R16G16_SNORM),
            ash::vk::Format::R16G16_USCALED => Ok(Self::R16G16_USCALED),
            ash::vk::Format::R16G16_SSCALED => Ok(Self::R16G16_SSCALED),
            ash::vk::Format::R16G16_UINT => Ok(Self::R16G16_UINT),
            ash::vk::Format::R16G16_SINT => Ok(Self::R16G16_SINT),
            ash::vk::Format::R16G16_SFLOAT => Ok(Self::R16G16_SFLOAT),
            ash::vk::Format::R16G16B16_UNORM => Ok(Self::R16G16B16_UNORM),
            ash::vk::Format::R16G16B16_SNORM => Ok(Self::R16G16B16_SNORM),
            ash::vk::Format::R16G16B16_USCALED => Ok(Self::R16G16B16_USCALED),
            ash::vk::Format::R16G16B16_SSCALED => Ok(Self::R16G16B16_SSCALED),
            ash::vk::Format::R16G16B16_UINT => Ok(Self::R16G16B16_UINT),
            ash::vk::Format::R16G16B16_SINT => Ok(Self::R16G16B16_SINT),
            ash::vk::Format::R16G16B16_SFLOAT => Ok(Self::R16G16B16_SFLOAT),
            ash::vk::Format::R16G16B16A16_UNORM => Ok(Self::R16G16B16A16_UNORM),
            ash::vk::Format::R16G16B16A16_SNORM => Ok(Self::R16G16B16A16_SNORM),
            ash::vk::Format::R16G16B16A16_USCALED => Ok(Self::R16G16B16A16_USCALED),
            ash::vk::Format::R16G16B16A16_SSCALED => Ok(Self::R16G16B16A16_SSCALED),
            ash::vk::Format::R16G16B16A16_UINT => Ok(Self::R16G16B16A16_UINT),
            ash::vk::Format::R16G16B16A16_SINT => Ok(Self::R16G16B16A16_SINT),
            ash::vk::Format::R16G16B16A16_SFLOAT => Ok(Self::R16G16B16A16_SFLOAT),
            ash::vk::Format::R32_UINT => Ok(Self::R32_UINT),
            ash::vk::Format::R32_SINT => Ok(Self::R32_SINT),
            ash::vk::Format::R32_SFLOAT => Ok(Self::R32_SFLOAT),
            ash::vk::Format::R32G32_UINT => Ok(Self::R32G32_UINT),
            ash::vk::Format::R32G32_SINT => Ok(Self::R32G32_SINT),
            ash::vk::Format::R32G32_SFLOAT => Ok(Self::R32G32_SFLOAT),
            ash::vk::Format::R32G32B32_UINT => Ok(Self::R32G32B32_UINT),
            ash::vk::Format::R32G32B32_SINT => Ok(Self::R32G32B32_SINT),
            ash::vk::Format::R32G32B32_SFLOAT => Ok(Self::R32G32B32_SFLOAT),
            ash::vk::Format::R32G32B32A32_UINT => Ok(Self::R32G32B32A32_UINT),
            ash::vk::Format::R32G32B32A32_SINT => Ok(Self::R32G32B32A32_SINT),
            ash::vk::Format::R32G32B32A32_SFLOAT => Ok(Self::R32G32B32A32_SFLOAT),
            ash::vk::Format::R64_UINT => Ok(Self::R64_UINT),
            ash::vk::Format::R64_SINT => Ok(Self::R64_SINT),
            ash::vk::Format::R64_SFLOAT => Ok(Self::R64_SFLOAT),
            ash::vk::Format::R64G64_UINT => Ok(Self::R64G64_UINT),
            ash::vk::Format::R64G64_SINT => Ok(Self::R64G64_SINT),
            ash::vk::Format::R64G64_SFLOAT => Ok(Self::R64G64_SFLOAT),
            ash::vk::Format::R64G64B64_UINT => Ok(Self::R64G64B64_UINT),
            ash::vk::Format::R64G64B64_SINT => Ok(Self::R64G64B64_SINT),
            ash::vk::Format::R64G64B64_SFLOAT => Ok(Self::R64G64B64_SFLOAT),
            ash::vk::Format::R64G64B64A64_UINT => Ok(Self::R64G64B64A64_UINT),
            ash::vk::Format::R64G64B64A64_SINT => Ok(Self::R64G64B64A64_SINT),
            ash::vk::Format::R64G64B64A64_SFLOAT => Ok(Self::R64G64B64A64_SFLOAT),
            ash::vk::Format::B10G11R11_UFLOAT_PACK32 => Ok(Self::B10G11R11_UFLOAT_PACK32),
            ash::vk::Format::E5B9G9R9_UFLOAT_PACK32 => Ok(Self::E5B9G9R9_UFLOAT_PACK32),
            ash::vk::Format::D16_UNORM => Ok(Self::D16_UNORM),
            ash::vk::Format::X8_D24_UNORM_PACK32 => Ok(Self::X8_D24_UNORM_PACK32),
            ash::vk::Format::D32_SFLOAT => Ok(Self::D32_SFLOAT),
            ash::vk::Format::S8_UINT => Ok(Self::S8_UINT),
            ash::vk::Format::D16_UNORM_S8_UINT => Ok(Self::D16_UNORM_S8_UINT),
            ash::vk::Format::D24_UNORM_S8_UINT => Ok(Self::D24_UNORM_S8_UINT),
            ash::vk::Format::D32_SFLOAT_S8_UINT => Ok(Self::D32_SFLOAT_S8_UINT),
            ash::vk::Format::R10X6_UNORM_PACK16 => Ok(Self::R10X6_UNORM_PACK16),
            ash::vk::Format::R10X6G10X6_UNORM_2PACK16 => Ok(Self::R10X6G10X6_UNORM_2PACK16),
            ash::vk::Format::R10X6G10X6B10X6A10X6_UNORM_4PACK16 => {
                Ok(Self::R10X6G10X6B10X6A10X6_UNORM_4PACK16)
            }
            ash::vk::Format::R12X4_UNORM_PACK16 => Ok(Self::R12X4_UNORM_PACK16),
            ash::vk::Format::R12X4G12X4_UNORM_2PACK16 => Ok(Self::R12X4G12X4_UNORM_2PACK16),
            ash::vk::Format::R12X4G12X4B12X4A12X4_UNORM_4PACK16 => {
                Ok(Self::R12X4G12X4B12X4A12X4_UNORM_4PACK16)
            }
            ash::vk::Format::A4R4G4B4_UNORM_PACK16_EXT => Ok(Self::A4R4G4B4_UNORM_PACK16),
            ash::vk::Format::A4B4G4R4_UNORM_PACK16_EXT => Ok(Self::A4B4G4R4_UNORM_PACK16),
            ash::vk::Format::BC1_RGB_UNORM_BLOCK => Ok(Self::BC1_RGB_UNORM_BLOCK),
            ash::vk::Format::BC1_RGB_SRGB_BLOCK => Ok(Self::BC1_RGB_SRGB_BLOCK),
            ash::vk::Format::BC1_RGBA_UNORM_BLOCK => Ok(Self::BC1_RGBA_UNORM_BLOCK),
            ash::vk::Format::BC1_RGBA_SRGB_BLOCK => Ok(Self::BC1_RGBA_SRGB_BLOCK),
            ash::vk::Format::BC2_UNORM_BLOCK => Ok(Self::BC2_UNORM_BLOCK),
            ash::vk::Format::BC2_SRGB_BLOCK => Ok(Self::BC2_SRGB_BLOCK),
            ash::vk::Format::BC3_UNORM_BLOCK => Ok(Self::BC3_UNORM_BLOCK),
            ash::vk::Format::BC3_SRGB_BLOCK => Ok(Self::BC3_SRGB_BLOCK),
            ash::vk::Format::BC4_UNORM_BLOCK => Ok(Self::BC4_UNORM_BLOCK),
            ash::vk::Format::BC4_SNORM_BLOCK => Ok(Self::BC4_SNORM_BLOCK),
            ash::vk::Format::BC5_UNORM_BLOCK => Ok(Self::BC5_UNORM_BLOCK),
            ash::vk::Format::BC5_SNORM_BLOCK => Ok(Self::BC5_SNORM_BLOCK),
            ash::vk::Format::BC6H_UFLOAT_BLOCK => Ok(Self::BC6H_UFLOAT_BLOCK),
            ash::vk::Format::BC6H_SFLOAT_BLOCK => Ok(Self::BC6H_SFLOAT_BLOCK),
            ash::vk::Format::BC7_UNORM_BLOCK => Ok(Self::BC7_UNORM_BLOCK),
            ash::vk::Format::BC7_SRGB_BLOCK => Ok(Self::BC7_SRGB_BLOCK),
            ash::vk::Format::ETC2_R8G8B8_UNORM_BLOCK => Ok(Self::ETC2_R8G8B8_UNORM_BLOCK),
            ash::vk::Format::ETC2_R8G8B8_SRGB_BLOCK => Ok(Self::ETC2_R8G8B8_SRGB_BLOCK),
            ash::vk::Format::ETC2_R8G8B8A1_UNORM_BLOCK => Ok(Self::ETC2_R8G8B8A1_UNORM_BLOCK),
            ash::vk::Format::ETC2_R8G8B8A1_SRGB_BLOCK => Ok(Self::ETC2_R8G8B8A1_SRGB_BLOCK),
            ash::vk::Format::ETC2_R8G8B8A8_UNORM_BLOCK => Ok(Self::ETC2_R8G8B8A8_UNORM_BLOCK),
            ash::vk::Format::ETC2_R8G8B8A8_SRGB_BLOCK => Ok(Self::ETC2_R8G8B8A8_SRGB_BLOCK),
            ash::vk::Format::EAC_R11_UNORM_BLOCK => Ok(Self::EAC_R11_UNORM_BLOCK),
            ash::vk::Format::EAC_R11_SNORM_BLOCK => Ok(Self::EAC_R11_SNORM_BLOCK),
            ash::vk::Format::EAC_R11G11_UNORM_BLOCK => Ok(Self::EAC_R11G11_UNORM_BLOCK),
            ash::vk::Format::EAC_R11G11_SNORM_BLOCK => Ok(Self::EAC_R11G11_SNORM_BLOCK),
            ash::vk::Format::ASTC_4X4_UNORM_BLOCK => Ok(Self::ASTC_4x4_UNORM_BLOCK),
            ash::vk::Format::ASTC_4X4_SRGB_BLOCK => Ok(Self::ASTC_4x4_SRGB_BLOCK),
            ash::vk::Format::ASTC_5X4_UNORM_BLOCK => Ok(Self::ASTC_5x4_UNORM_BLOCK),
            ash::vk::Format::ASTC_5X4_SRGB_BLOCK => Ok(Self::ASTC_5x4_SRGB_BLOCK),
            ash::vk::Format::ASTC_5X5_UNORM_BLOCK => Ok(Self::ASTC_5x5_UNORM_BLOCK),
            ash::vk::Format::ASTC_5X5_SRGB_BLOCK => Ok(Self::ASTC_5x5_SRGB_BLOCK),
            ash::vk::Format::ASTC_6X5_UNORM_BLOCK => Ok(Self::ASTC_6x5_UNORM_BLOCK),
            ash::vk::Format::ASTC_6X5_SRGB_BLOCK => Ok(Self::ASTC_6x5_SRGB_BLOCK),
            ash::vk::Format::ASTC_6X6_UNORM_BLOCK => Ok(Self::ASTC_6x6_UNORM_BLOCK),
            ash::vk::Format::ASTC_6X6_SRGB_BLOCK => Ok(Self::ASTC_6x6_SRGB_BLOCK),
            ash::vk::Format::ASTC_8X5_UNORM_BLOCK => Ok(Self::ASTC_8x5_UNORM_BLOCK),
            ash::vk::Format::ASTC_8X5_SRGB_BLOCK => Ok(Self::ASTC_8x5_SRGB_BLOCK),
            ash::vk::Format::ASTC_8X6_UNORM_BLOCK => Ok(Self::ASTC_8x6_UNORM_BLOCK),
            ash::vk::Format::ASTC_8X6_SRGB_BLOCK => Ok(Self::ASTC_8x6_SRGB_BLOCK),
            ash::vk::Format::ASTC_8X8_UNORM_BLOCK => Ok(Self::ASTC_8x8_UNORM_BLOCK),
            ash::vk::Format::ASTC_8X8_SRGB_BLOCK => Ok(Self::ASTC_8x8_SRGB_BLOCK),
            ash::vk::Format::ASTC_10X5_UNORM_BLOCK => Ok(Self::ASTC_10x5_UNORM_BLOCK),
            ash::vk::Format::ASTC_10X5_SRGB_BLOCK => Ok(Self::ASTC_10x5_SRGB_BLOCK),
            ash::vk::Format::ASTC_10X6_UNORM_BLOCK => Ok(Self::ASTC_10x6_UNORM_BLOCK),
            ash::vk::Format::ASTC_10X6_SRGB_BLOCK => Ok(Self::ASTC_10x6_SRGB_BLOCK),
            ash::vk::Format::ASTC_10X8_UNORM_BLOCK => Ok(Self::ASTC_10x8_UNORM_BLOCK),
            ash::vk::Format::ASTC_10X8_SRGB_BLOCK => Ok(Self::ASTC_10x8_SRGB_BLOCK),
            ash::vk::Format::ASTC_10X10_UNORM_BLOCK => Ok(Self::ASTC_10x10_UNORM_BLOCK),
            ash::vk::Format::ASTC_10X10_SRGB_BLOCK => Ok(Self::ASTC_10x10_SRGB_BLOCK),
            ash::vk::Format::ASTC_12X10_UNORM_BLOCK => Ok(Self::ASTC_12x10_UNORM_BLOCK),
            ash::vk::Format::ASTC_12X10_SRGB_BLOCK => Ok(Self::ASTC_12x10_SRGB_BLOCK),
            ash::vk::Format::ASTC_12X12_UNORM_BLOCK => Ok(Self::ASTC_12x12_UNORM_BLOCK),
            ash::vk::Format::ASTC_12X12_SRGB_BLOCK => Ok(Self::ASTC_12x12_SRGB_BLOCK),
            ash::vk::Format::ASTC_4X4_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_4x4_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_5X4_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_5x4_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_5X5_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_5x5_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_6X5_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_6x5_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_6X6_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_6x6_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_8X5_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_8x5_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_8X6_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_8x6_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_8X8_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_8x8_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_10X5_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_10x5_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_10X6_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_10x6_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_10X8_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_10x8_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_10X10_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_10x10_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_12X10_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_12x10_SFLOAT_BLOCK),
            ash::vk::Format::ASTC_12X12_SFLOAT_BLOCK_EXT => Ok(Self::ASTC_12x12_SFLOAT_BLOCK),
            ash::vk::Format::PVRTC1_2BPP_UNORM_BLOCK_IMG => Ok(Self::PVRTC1_2BPP_UNORM_BLOCK),
            ash::vk::Format::PVRTC1_4BPP_UNORM_BLOCK_IMG => Ok(Self::PVRTC1_4BPP_UNORM_BLOCK),
            ash::vk::Format::PVRTC2_2BPP_UNORM_BLOCK_IMG => Ok(Self::PVRTC2_2BPP_UNORM_BLOCK),
            ash::vk::Format::PVRTC2_4BPP_UNORM_BLOCK_IMG => Ok(Self::PVRTC2_4BPP_UNORM_BLOCK),
            ash::vk::Format::PVRTC1_2BPP_SRGB_BLOCK_IMG => Ok(Self::PVRTC1_2BPP_SRGB_BLOCK),
            ash::vk::Format::PVRTC1_4BPP_SRGB_BLOCK_IMG => Ok(Self::PVRTC1_4BPP_SRGB_BLOCK),
            ash::vk::Format::PVRTC2_2BPP_SRGB_BLOCK_IMG => Ok(Self::PVRTC2_2BPP_SRGB_BLOCK),
            ash::vk::Format::PVRTC2_4BPP_SRGB_BLOCK_IMG => Ok(Self::PVRTC2_4BPP_SRGB_BLOCK),
            ash::vk::Format::G8B8G8R8_422_UNORM => Ok(Self::G8B8G8R8_422_UNORM),
            ash::vk::Format::B8G8R8G8_422_UNORM => Ok(Self::B8G8R8G8_422_UNORM),
            ash::vk::Format::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 => {
                Ok(Self::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16)
            }
            ash::vk::Format::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 => {
                Ok(Self::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16)
            }
            ash::vk::Format::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 => {
                Ok(Self::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16)
            }
            ash::vk::Format::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 => {
                Ok(Self::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16)
            }
            ash::vk::Format::G16B16G16R16_422_UNORM => Ok(Self::G16B16G16R16_422_UNORM),
            ash::vk::Format::B16G16R16G16_422_UNORM => Ok(Self::B16G16R16G16_422_UNORM),
            ash::vk::Format::G8_B8_R8_3PLANE_420_UNORM => Ok(Self::G8_B8_R8_3PLANE_420_UNORM),
            ash::vk::Format::G8_B8R8_2PLANE_420_UNORM => Ok(Self::G8_B8R8_2PLANE_420_UNORM),
            ash::vk::Format::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 => {
                Ok(Self::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16)
            }
            ash::vk::Format::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 => {
                Ok(Self::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16)
            }
            ash::vk::Format::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 => {
                Ok(Self::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16)
            }
            ash::vk::Format::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 => {
                Ok(Self::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16)
            }
            ash::vk::Format::G16_B16_R16_3PLANE_420_UNORM => Ok(Self::G16_B16_R16_3PLANE_420_UNORM),
            ash::vk::Format::G16_B16R16_2PLANE_420_UNORM => Ok(Self::G16_B16R16_2PLANE_420_UNORM),
            ash::vk::Format::G8_B8_R8_3PLANE_422_UNORM => Ok(Self::G8_B8_R8_3PLANE_422_UNORM),
            ash::vk::Format::G8_B8R8_2PLANE_422_UNORM => Ok(Self::G8_B8R8_2PLANE_422_UNORM),
            ash::vk::Format::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 => {
                Ok(Self::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16)
            }
            ash::vk::Format::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 => {
                Ok(Self::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16)
            }
            ash::vk::Format::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 => {
                Ok(Self::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16)
            }
            ash::vk::Format::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 => {
                Ok(Self::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16)
            }
            ash::vk::Format::G16_B16_R16_3PLANE_422_UNORM => Ok(Self::G16_B16_R16_3PLANE_422_UNORM),
            ash::vk::Format::G16_B16R16_2PLANE_422_UNORM => Ok(Self::G16_B16R16_2PLANE_422_UNORM),
            ash::vk::Format::G8_B8_R8_3PLANE_444_UNORM => Ok(Self::G8_B8_R8_3PLANE_444_UNORM),
            ash::vk::Format::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 => {
                Ok(Self::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16)
            }
            ash::vk::Format::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 => {
                Ok(Self::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16)
            }
            ash::vk::Format::G16_B16_R16_3PLANE_444_UNORM => Ok(Self::G16_B16_R16_3PLANE_444_UNORM),
            ash::vk::Format::G8_B8R8_2PLANE_444_UNORM_EXT => Ok(Self::G8_B8R8_2PLANE_444_UNORM),
            ash::vk::Format::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT => {
                Ok(Self::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16)
            }
            ash::vk::Format::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT => {
                Ok(Self::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16)
            }
            ash::vk::Format::G16_B16R16_2PLANE_444_UNORM_EXT => {
                Ok(Self::G16_B16R16_2PLANE_444_UNORM)
            }
            _ => Err(()),
        }
    }
}
#[doc = r" Converts a format enum identifier to a type that is suitable for representing the format"]
#[doc = r" in a buffer or image."]
#[doc = r""]
#[doc = r" This macro returns one possible suitable representation, but there are usually other"]
#[doc = r" possibilities for a given format, including those provided by external libraries like"]
#[doc = r" `cmath` or `nalgebra`. A compile error occurs for formats that have no well-defined size"]
#[doc = r" (the `size` method returns `None`)."]
#[doc = r""]
#[doc = r" - For regular unpacked formats with one component, this returns a single floating point,"]
#[doc = r"   signed or unsigned integer with the appropriate number of bits. For formats with"]
#[doc = r"   multiple components, an array is returned."]
#[doc = r" - For packed formats, this returns an unsigned integer with the size of the packed"]
#[doc = r"   element. For multi-packed formats (such as `2PACK16`), an array is returned."]
#[doc = r" - For compressed formats, this returns `[u8; N]` where N is the size of a block."]
#[doc = r""]
#[doc = r" Note: for 16-bit floating point values, you need to import the [`half::f16`] type."]
#[doc = r""]
#[doc = r" # Example"]
#[doc = r""]
#[doc = r" ```"]
#[doc = r" # #[macro_use] extern crate vulkano;"]
#[doc = r" # fn main() {"]
#[doc = r" let pixel: type_for_format!(R32G32B32A32_SFLOAT);"]
#[doc = r" # }"]
#[doc = r" ```"]
#[doc = r""]
#[doc = r" The type of `pixel` will be `[f32; 4]`."]
#[macro_export]
macro_rules! type_for_format {
    (R4G4_UNORM_PACK8) => {
        u8
    };
    (R4G4B4A4_UNORM_PACK16) => {
        u16
    };
    (B4G4R4A4_UNORM_PACK16) => {
        u16
    };
    (R5G6B5_UNORM_PACK16) => {
        u16
    };
    (B5G6R5_UNORM_PACK16) => {
        u16
    };
    (R5G5B5A1_UNORM_PACK16) => {
        u16
    };
    (B5G5R5A1_UNORM_PACK16) => {
        u16
    };
    (A1R5G5B5_UNORM_PACK16) => {
        u16
    };
    (R8_UNORM) => {
        u8
    };
    (R8_SNORM) => {
        i8
    };
    (R8_USCALED) => {
        u8
    };
    (R8_SSCALED) => {
        i8
    };
    (R8_UINT) => {
        u8
    };
    (R8_SINT) => {
        i8
    };
    (R8_SRGB) => {
        u8
    };
    (R8G8_UNORM) => {
        [u8; 2]
    };
    (R8G8_SNORM) => {
        [i8; 2]
    };
    (R8G8_USCALED) => {
        [u8; 2]
    };
    (R8G8_SSCALED) => {
        [i8; 2]
    };
    (R8G8_UINT) => {
        [u8; 2]
    };
    (R8G8_SINT) => {
        [i8; 2]
    };
    (R8G8_SRGB) => {
        [u8; 2]
    };
    (R8G8B8_UNORM) => {
        [u8; 3]
    };
    (R8G8B8_SNORM) => {
        [i8; 3]
    };
    (R8G8B8_USCALED) => {
        [u8; 3]
    };
    (R8G8B8_SSCALED) => {
        [i8; 3]
    };
    (R8G8B8_UINT) => {
        [u8; 3]
    };
    (R8G8B8_SINT) => {
        [i8; 3]
    };
    (R8G8B8_SRGB) => {
        [u8; 3]
    };
    (B8G8R8_UNORM) => {
        [u8; 3]
    };
    (B8G8R8_SNORM) => {
        [i8; 3]
    };
    (B8G8R8_USCALED) => {
        [u8; 3]
    };
    (B8G8R8_SSCALED) => {
        [i8; 3]
    };
    (B8G8R8_UINT) => {
        [u8; 3]
    };
    (B8G8R8_SINT) => {
        [i8; 3]
    };
    (B8G8R8_SRGB) => {
        [u8; 3]
    };
    (R8G8B8A8_UNORM) => {
        [u8; 4]
    };
    (R8G8B8A8_SNORM) => {
        [i8; 4]
    };
    (R8G8B8A8_USCALED) => {
        [u8; 4]
    };
    (R8G8B8A8_SSCALED) => {
        [i8; 4]
    };
    (R8G8B8A8_UINT) => {
        [u8; 4]
    };
    (R8G8B8A8_SINT) => {
        [i8; 4]
    };
    (R8G8B8A8_SRGB) => {
        [u8; 4]
    };
    (B8G8R8A8_UNORM) => {
        [u8; 4]
    };
    (B8G8R8A8_SNORM) => {
        [i8; 4]
    };
    (B8G8R8A8_USCALED) => {
        [u8; 4]
    };
    (B8G8R8A8_SSCALED) => {
        [i8; 4]
    };
    (B8G8R8A8_UINT) => {
        [u8; 4]
    };
    (B8G8R8A8_SINT) => {
        [i8; 4]
    };
    (B8G8R8A8_SRGB) => {
        [u8; 4]
    };
    (A8B8G8R8_UNORM_PACK32) => {
        u32
    };
    (A8B8G8R8_SNORM_PACK32) => {
        u32
    };
    (A8B8G8R8_USCALED_PACK32) => {
        u32
    };
    (A8B8G8R8_SSCALED_PACK32) => {
        u32
    };
    (A8B8G8R8_UINT_PACK32) => {
        u32
    };
    (A8B8G8R8_SINT_PACK32) => {
        u32
    };
    (A8B8G8R8_SRGB_PACK32) => {
        u32
    };
    (A2R10G10B10_UNORM_PACK32) => {
        u32
    };
    (A2R10G10B10_SNORM_PACK32) => {
        u32
    };
    (A2R10G10B10_USCALED_PACK32) => {
        u32
    };
    (A2R10G10B10_SSCALED_PACK32) => {
        u32
    };
    (A2R10G10B10_UINT_PACK32) => {
        u32
    };
    (A2R10G10B10_SINT_PACK32) => {
        u32
    };
    (A2B10G10R10_UNORM_PACK32) => {
        u32
    };
    (A2B10G10R10_SNORM_PACK32) => {
        u32
    };
    (A2B10G10R10_USCALED_PACK32) => {
        u32
    };
    (A2B10G10R10_SSCALED_PACK32) => {
        u32
    };
    (A2B10G10R10_UINT_PACK32) => {
        u32
    };
    (A2B10G10R10_SINT_PACK32) => {
        u32
    };
    (R16_UNORM) => {
        u16
    };
    (R16_SNORM) => {
        i16
    };
    (R16_USCALED) => {
        u16
    };
    (R16_SSCALED) => {
        i16
    };
    (R16_UINT) => {
        u16
    };
    (R16_SINT) => {
        i16
    };
    (R16_SFLOAT) => {
        f16
    };
    (R16G16_UNORM) => {
        [u16; 2]
    };
    (R16G16_SNORM) => {
        [i16; 2]
    };
    (R16G16_USCALED) => {
        [u16; 2]
    };
    (R16G16_SSCALED) => {
        [i16; 2]
    };
    (R16G16_UINT) => {
        [u16; 2]
    };
    (R16G16_SINT) => {
        [i16; 2]
    };
    (R16G16_SFLOAT) => {
        [f16; 2]
    };
    (R16G16B16_UNORM) => {
        [u16; 3]
    };
    (R16G16B16_SNORM) => {
        [i16; 3]
    };
    (R16G16B16_USCALED) => {
        [u16; 3]
    };
    (R16G16B16_SSCALED) => {
        [i16; 3]
    };
    (R16G16B16_UINT) => {
        [u16; 3]
    };
    (R16G16B16_SINT) => {
        [i16; 3]
    };
    (R16G16B16_SFLOAT) => {
        [f16; 3]
    };
    (R16G16B16A16_UNORM) => {
        [u16; 4]
    };
    (R16G16B16A16_SNORM) => {
        [i16; 4]
    };
    (R16G16B16A16_USCALED) => {
        [u16; 4]
    };
    (R16G16B16A16_SSCALED) => {
        [i16; 4]
    };
    (R16G16B16A16_UINT) => {
        [u16; 4]
    };
    (R16G16B16A16_SINT) => {
        [i16; 4]
    };
    (R16G16B16A16_SFLOAT) => {
        [f16; 4]
    };
    (R32_UINT) => {
        u32
    };
    (R32_SINT) => {
        i32
    };
    (R32_SFLOAT) => {
        f32
    };
    (R32G32_UINT) => {
        [u32; 2]
    };
    (R32G32_SINT) => {
        [i32; 2]
    };
    (R32G32_SFLOAT) => {
        [f32; 2]
    };
    (R32G32B32_UINT) => {
        [u32; 3]
    };
    (R32G32B32_SINT) => {
        [i32; 3]
    };
    (R32G32B32_SFLOAT) => {
        [f32; 3]
    };
    (R32G32B32A32_UINT) => {
        [u32; 4]
    };
    (R32G32B32A32_SINT) => {
        [i32; 4]
    };
    (R32G32B32A32_SFLOAT) => {
        [f32; 4]
    };
    (R64_UINT) => {
        u64
    };
    (R64_SINT) => {
        i64
    };
    (R64_SFLOAT) => {
        f64
    };
    (R64G64_UINT) => {
        [u64; 2]
    };
    (R64G64_SINT) => {
        [i64; 2]
    };
    (R64G64_SFLOAT) => {
        [f64; 2]
    };
    (R64G64B64_UINT) => {
        [u64; 3]
    };
    (R64G64B64_SINT) => {
        [i64; 3]
    };
    (R64G64B64_SFLOAT) => {
        [f64; 3]
    };
    (R64G64B64A64_UINT) => {
        [u64; 4]
    };
    (R64G64B64A64_SINT) => {
        [i64; 4]
    };
    (R64G64B64A64_SFLOAT) => {
        [f64; 4]
    };
    (B10G11R11_UFLOAT_PACK32) => {
        u32
    };
    (E5B9G9R9_UFLOAT_PACK32) => {
        u32
    };
    (R10X6_UNORM_PACK16) => {
        u16
    };
    (R10X6G10X6_UNORM_2PACK16) => {
        [u16; 2]
    };
    (R10X6G10X6B10X6A10X6_UNORM_4PACK16) => {
        [u16; 4]
    };
    (R12X4_UNORM_PACK16) => {
        u16
    };
    (R12X4G12X4_UNORM_2PACK16) => {
        [u16; 2]
    };
    (R12X4G12X4B12X4A12X4_UNORM_4PACK16) => {
        [u16; 4]
    };
    (A4R4G4B4_UNORM_PACK16) => {
        u16
    };
    (A4B4G4R4_UNORM_PACK16) => {
        u16
    };
    (BC1_RGB_UNORM_BLOCK) => {
        [u8; 8]
    };
    (BC1_RGB_SRGB_BLOCK) => {
        [u8; 8]
    };
    (BC1_RGBA_UNORM_BLOCK) => {
        [u8; 8]
    };
    (BC1_RGBA_SRGB_BLOCK) => {
        [u8; 8]
    };
    (BC2_UNORM_BLOCK) => {
        [u8; 16]
    };
    (BC2_SRGB_BLOCK) => {
        [u8; 16]
    };
    (BC3_UNORM_BLOCK) => {
        [u8; 16]
    };
    (BC3_SRGB_BLOCK) => {
        [u8; 16]
    };
    (BC4_UNORM_BLOCK) => {
        [u8; 8]
    };
    (BC4_SNORM_BLOCK) => {
        [u8; 8]
    };
    (BC5_UNORM_BLOCK) => {
        [u8; 16]
    };
    (BC5_SNORM_BLOCK) => {
        [u8; 16]
    };
    (BC6H_UFLOAT_BLOCK) => {
        [u8; 16]
    };
    (BC6H_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (BC7_UNORM_BLOCK) => {
        [u8; 16]
    };
    (BC7_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ETC2_R8G8B8_UNORM_BLOCK) => {
        [u8; 8]
    };
    (ETC2_R8G8B8_SRGB_BLOCK) => {
        [u8; 8]
    };
    (ETC2_R8G8B8A1_UNORM_BLOCK) => {
        [u8; 8]
    };
    (ETC2_R8G8B8A1_SRGB_BLOCK) => {
        [u8; 8]
    };
    (ETC2_R8G8B8A8_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ETC2_R8G8B8A8_SRGB_BLOCK) => {
        [u8; 16]
    };
    (EAC_R11_UNORM_BLOCK) => {
        [u8; 8]
    };
    (EAC_R11_SNORM_BLOCK) => {
        [u8; 8]
    };
    (EAC_R11G11_UNORM_BLOCK) => {
        [u8; 16]
    };
    (EAC_R11G11_SNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_4x4_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_4x4_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_5x4_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_5x4_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_5x5_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_5x5_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_6x5_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_6x5_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_6x6_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_6x6_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x5_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x5_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x6_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x6_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x8_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x8_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x5_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x5_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x6_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x6_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x8_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x8_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x10_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x10_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_12x10_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_12x10_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_12x12_UNORM_BLOCK) => {
        [u8; 16]
    };
    (ASTC_12x12_SRGB_BLOCK) => {
        [u8; 16]
    };
    (ASTC_4x4_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_5x4_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_5x5_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_6x5_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_6x6_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x5_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x6_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_8x8_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x5_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x6_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x8_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_10x10_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_12x10_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (ASTC_12x12_SFLOAT_BLOCK) => {
        [u8; 16]
    };
    (PVRTC1_2BPP_UNORM_BLOCK) => {
        [u8; 8]
    };
    (PVRTC1_4BPP_UNORM_BLOCK) => {
        [u8; 8]
    };
    (PVRTC2_2BPP_UNORM_BLOCK) => {
        [u8; 8]
    };
    (PVRTC2_4BPP_UNORM_BLOCK) => {
        [u8; 8]
    };
    (PVRTC1_2BPP_SRGB_BLOCK) => {
        [u8; 8]
    };
    (PVRTC1_4BPP_SRGB_BLOCK) => {
        [u8; 8]
    };
    (PVRTC2_2BPP_SRGB_BLOCK) => {
        [u8; 8]
    };
    (PVRTC2_4BPP_SRGB_BLOCK) => {
        [u8; 8]
    };
    (G8B8G8R8_422_UNORM) => {
        [u8; 4]
    };
    (B8G8R8G8_422_UNORM) => {
        [u8; 4]
    };
    (G10X6B10X6G10X6R10X6_422_UNORM_4PACK16) => {
        [u16; 4]
    };
    (B10X6G10X6R10X6G10X6_422_UNORM_4PACK16) => {
        [u16; 4]
    };
    (G12X4B12X4G12X4R12X4_422_UNORM_4PACK16) => {
        [u16; 4]
    };
    (B12X4G12X4R12X4G12X4_422_UNORM_4PACK16) => {
        [u16; 4]
    };
    (G16B16G16R16_422_UNORM) => {
        [u16; 4]
    };
    (B16G16R16G16_422_UNORM) => {
        [u16; 4]
    };
}
