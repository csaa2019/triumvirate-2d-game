// This file is auto-generated by vulkano autogen from vk.xml header version 191.
// It should not be edited manually. Changes should be made by editing autogen.

#[doc = r" List of extensions that are enabled or available."]
#[derive(Copy, Clone, PartialEq, Eq)]
pub struct DeviceExtensions {
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_16bit_storage.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_storage_buffer_storage_class`](crate::device::DeviceExtensions::khr_storage_buffer_storage_class)"]
    pub khr_16bit_storage: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_8bit_storage.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_storage_buffer_storage_class`](crate::device::DeviceExtensions::khr_storage_buffer_storage_class)"]
    pub khr_8bit_storage: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_acceleration_structure.html)\n- Requires:\n  - Vulkan API version 1.1\n  - One of: Vulkan API version 1.2, device extension [`ext_descriptor_indexing`](crate::device::DeviceExtensions::ext_descriptor_indexing)\n  - One of: Vulkan API version 1.2, device extension [`khr_buffer_device_address`](crate::device::DeviceExtensions::khr_buffer_device_address)\n  - device extension [`khr_deferred_host_operations`](crate::device::DeviceExtensions::khr_deferred_host_operations)"]
    pub khr_acceleration_structure: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_bind_memory2.html)\n- Promoted to Vulkan 1.1"]
    pub khr_bind_memory2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_buffer_device_address.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n- Conflicts with device extension: [`ext_buffer_device_address`](crate::device::DeviceExtensions::ext_buffer_device_address)"]
    pub khr_buffer_device_address: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_copy_commands2.html)"]
    pub khr_copy_commands2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_create_renderpass2.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_multiview`](crate::device::DeviceExtensions::khr_multiview)\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance2`](crate::device::DeviceExtensions::khr_maintenance2)"]
    pub khr_create_renderpass2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_dedicated_allocation.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_get_memory_requirements2`](crate::device::DeviceExtensions::khr_get_memory_requirements2)"]
    pub khr_dedicated_allocation: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_deferred_host_operations.html)"]
    pub khr_deferred_host_operations: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_depth_stencil_resolve.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.2, device extension [`khr_create_renderpass2`](crate::device::DeviceExtensions::khr_create_renderpass2)"]
    pub khr_depth_stencil_resolve: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_descriptor_update_template.html)\n- Promoted to Vulkan 1.1"]
    pub khr_descriptor_update_template: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_device_group.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_device_group_creation`](crate::instance::InstanceExtensions::khr_device_group_creation)"]
    pub khr_device_group: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_display_swapchain.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - instance extension [`khr_display`](crate::instance::InstanceExtensions::khr_display)"]
    pub khr_display_swapchain: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_draw_indirect_count.html)\n- Promoted to Vulkan 1.2"]
    pub khr_draw_indirect_count: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_driver_properties.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_driver_properties: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_external_fence_capabilities`](crate::instance::InstanceExtensions::khr_external_fence_capabilities)"]
    pub khr_external_fence: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence_fd.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_fence`](crate::device::DeviceExtensions::khr_external_fence)"]
    pub khr_external_fence_fd: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence_win32.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_fence`](crate::device::DeviceExtensions::khr_external_fence)"]
    pub khr_external_fence_win32: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_external_memory_capabilities`](crate::instance::InstanceExtensions::khr_external_memory_capabilities)"]
    pub khr_external_memory: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory_fd.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)"]
    pub khr_external_memory_fd: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory_win32.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)"]
    pub khr_external_memory_win32: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_external_semaphore_capabilities`](crate::instance::InstanceExtensions::khr_external_semaphore_capabilities)"]
    pub khr_external_semaphore: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore_fd.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_semaphore`](crate::device::DeviceExtensions::khr_external_semaphore)"]
    pub khr_external_semaphore_fd: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore_win32.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_semaphore`](crate::device::DeviceExtensions::khr_external_semaphore)"]
    pub khr_external_semaphore_win32: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_fragment_shading_rate.html)\n- Requires:\n  - One of: Vulkan API version 1.2, device extension [`khr_create_renderpass2`](crate::device::DeviceExtensions::khr_create_renderpass2)\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_fragment_shading_rate: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_get_memory_requirements2.html)\n- Promoted to Vulkan 1.1"]
    pub khr_get_memory_requirements2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_image_format_list.html)\n- Promoted to Vulkan 1.2"]
    pub khr_image_format_list: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_imageless_framebuffer.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance2`](crate::device::DeviceExtensions::khr_maintenance2)\n  - One of: Vulkan API version 1.2, device extension [`khr_image_format_list`](crate::device::DeviceExtensions::khr_image_format_list)"]
    pub khr_imageless_framebuffer: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_incremental_present.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub khr_incremental_present: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance1.html)\n- Promoted to Vulkan 1.1"]
    pub khr_maintenance1: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance2.html)\n- Promoted to Vulkan 1.1"]
    pub khr_maintenance2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance3.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_maintenance3: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_multiview.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_multiview: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_performance_query.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_performance_query: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_pipeline_executable_properties.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_pipeline_executable_properties: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_pipeline_library.html)"]
    pub khr_pipeline_library: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_portability_subset.html)\n- Must be enabled if it is supported by the physical device\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_portability_subset: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_present_id.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub khr_present_id: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_present_wait.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - device extension [`khr_present_id`](crate::device::DeviceExtensions::khr_present_id)"]
    pub khr_present_wait: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_push_descriptor.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_push_descriptor: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_ray_query.html)\n- Requires:\n  - Vulkan API version 1.1\n  - One of: Vulkan API version 1.2, device extension [`khr_spirv_1_4`](crate::device::DeviceExtensions::khr_spirv_1_4)\n  - device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)"]
    pub khr_ray_query: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_ray_tracing_pipeline.html)\n- Requires:\n  - Vulkan API version 1.1\n  - One of: Vulkan API version 1.2, device extension [`khr_spirv_1_4`](crate::device::DeviceExtensions::khr_spirv_1_4)\n  - device extension [`khr_acceleration_structure`](crate::device::DeviceExtensions::khr_acceleration_structure)"]
    pub khr_ray_tracing_pipeline: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_relaxed_block_layout.html)\n- Promoted to Vulkan 1.1"]
    pub khr_relaxed_block_layout: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_sampler_mirror_clamp_to_edge.html)\n- Promoted to Vulkan 1.2"]
    pub khr_sampler_mirror_clamp_to_edge: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_sampler_ycbcr_conversion.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance1`](crate::device::DeviceExtensions::khr_maintenance1)\n  - One of: Vulkan API version 1.1, device extension [`khr_bind_memory2`](crate::device::DeviceExtensions::khr_bind_memory2)\n  - One of: Vulkan API version 1.1, device extension [`khr_get_memory_requirements2`](crate::device::DeviceExtensions::khr_get_memory_requirements2)\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_sampler_ycbcr_conversion: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_separate_depth_stencil_layouts.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.2, device extension [`khr_create_renderpass2`](crate::device::DeviceExtensions::khr_create_renderpass2)"]
    pub khr_separate_depth_stencil_layouts: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_atomic_int64.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_shader_atomic_int64: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_clock.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_shader_clock: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_draw_parameters.html)\n- Promoted to Vulkan 1.1"]
    pub khr_shader_draw_parameters: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_float16_int8.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_shader_float16_int8: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_float_controls.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_shader_float_controls: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_integer_dot_product.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_shader_integer_dot_product: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_non_semantic_info.html)"]
    pub khr_shader_non_semantic_info: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_subgroup_extended_types.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - Vulkan API version 1.1"]
    pub khr_shader_subgroup_extended_types: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_subgroup_uniform_control_flow.html)\n- Requires:\n  - Vulkan API version 1.1"]
    pub khr_shader_subgroup_uniform_control_flow: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_terminate_invocation.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_shader_terminate_invocation: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shared_presentable_image.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - instance extension [`khr_get_surface_capabilities2`](crate::instance::InstanceExtensions::khr_get_surface_capabilities2)"]
    pub khr_shared_presentable_image: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_spirv_1_4.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - Vulkan API version 1.1\n  - One of: Vulkan API version 1.2, device extension [`khr_shader_float_controls`](crate::device::DeviceExtensions::khr_shader_float_controls)"]
    pub khr_spirv_1_4: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_storage_buffer_storage_class.html)\n- Promoted to Vulkan 1.1"]
    pub khr_storage_buffer_storage_class: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_swapchain.html)\n- Requires:\n  - instance extension [`khr_surface`](crate::instance::InstanceExtensions::khr_surface)"]
    pub khr_swapchain: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_swapchain_mutable_format.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance2`](crate::device::DeviceExtensions::khr_maintenance2)\n  - One of: Vulkan API version 1.2, device extension [`khr_image_format_list`](crate::device::DeviceExtensions::khr_image_format_list)"]
    pub khr_swapchain_mutable_format: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_synchronization2.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_synchronization2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_timeline_semaphore.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_timeline_semaphore: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_uniform_buffer_standard_layout.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_uniform_buffer_standard_layout: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_variable_pointers.html)\n- Promoted to Vulkan 1.1\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_storage_buffer_storage_class`](crate::device::DeviceExtensions::khr_storage_buffer_storage_class)"]
    pub khr_variable_pointers: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_video_decode_queue.html)\n- Requires:\n  - device extension [`khr_video_queue`](crate::device::DeviceExtensions::khr_video_queue)\n  - device extension [`khr_synchronization2`](crate::device::DeviceExtensions::khr_synchronization2)"]
    pub khr_video_decode_queue: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_video_encode_queue.html)\n- Requires:\n  - device extension [`khr_video_queue`](crate::device::DeviceExtensions::khr_video_queue)\n  - device extension [`khr_synchronization2`](crate::device::DeviceExtensions::khr_synchronization2)"]
    pub khr_video_encode_queue: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_video_queue.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_sampler_ycbcr_conversion`](crate::device::DeviceExtensions::khr_sampler_ycbcr_conversion)"]
    pub khr_video_queue: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_vulkan_memory_model.html)\n- Promoted to Vulkan 1.2"]
    pub khr_vulkan_memory_model: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_win32_keyed_mutex.html)\n- Requires:\n  - device extension [`khr_external_memory_win32`](crate::device::DeviceExtensions::khr_external_memory_win32)"]
    pub khr_win32_keyed_mutex: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_workgroup_memory_explicit_layout.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_workgroup_memory_explicit_layout: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_zero_initialize_workgroup_memory.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub khr_zero_initialize_workgroup_memory: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_4444_formats.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_4444_formats: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_astc_decode_mode.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_astc_decode_mode: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_blend_operation_advanced.html)"]
    pub ext_blend_operation_advanced: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_buffer_device_address.html)\n- Deprecated by [`khr_buffer_device_address`](crate::device::DeviceExtensions::khr_buffer_device_address)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n- Conflicts with device extension: [`khr_buffer_device_address`](crate::device::DeviceExtensions::khr_buffer_device_address)"]
    pub ext_buffer_device_address: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_calibrated_timestamps.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_calibrated_timestamps: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_color_write_enable.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_color_write_enable: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_conditional_rendering.html)"]
    pub ext_conditional_rendering: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_conservative_rasterization.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_conservative_rasterization: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_custom_border_color.html)"]
    pub ext_custom_border_color: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_debug_marker.html)\n- Promoted to [`ext_debug_utils`](crate::instance::InstanceExtensions::ext_debug_utils)\n- Requires:\n  - instance extension [`ext_debug_report`](crate::instance::InstanceExtensions::ext_debug_report)"]
    pub ext_debug_marker: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_depth_clip_enable.html)"]
    pub ext_depth_clip_enable: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_depth_range_unrestricted.html)"]
    pub ext_depth_range_unrestricted: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_descriptor_indexing.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance3`](crate::device::DeviceExtensions::khr_maintenance3)"]
    pub ext_descriptor_indexing: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_device_memory_report.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_device_memory_report: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_discard_rectangles.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_discard_rectangles: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_display_control.html)\n- Requires:\n  - instance extension [`ext_display_surface_counter`](crate::instance::InstanceExtensions::ext_display_surface_counter)\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub ext_display_control: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_extended_dynamic_state.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_extended_dynamic_state: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_extended_dynamic_state2.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_extended_dynamic_state2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_external_memory_dma_buf.html)\n- Requires:\n  - device extension [`khr_external_memory_fd`](crate::device::DeviceExtensions::khr_external_memory_fd)"]
    pub ext_external_memory_dma_buf: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_external_memory_host.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)"]
    pub ext_external_memory_host: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_filter_cubic.html)"]
    pub ext_filter_cubic: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_fragment_density_map.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_fragment_density_map: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_fragment_density_map2.html)\n- Requires:\n  - device extension [`ext_fragment_density_map`](crate::device::DeviceExtensions::ext_fragment_density_map)"]
    pub ext_fragment_density_map2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_fragment_shader_interlock.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_fragment_shader_interlock: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_full_screen_exclusive.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - instance extension [`khr_surface`](crate::instance::InstanceExtensions::khr_surface)\n  - instance extension [`khr_get_surface_capabilities2`](crate::instance::InstanceExtensions::khr_get_surface_capabilities2)\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub ext_full_screen_exclusive: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_global_priority.html)"]
    pub ext_global_priority: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_global_priority_query.html)\n- Requires:\n  - device extension [`ext_global_priority`](crate::device::DeviceExtensions::ext_global_priority)\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_global_priority_query: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_hdr_metadata.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub ext_hdr_metadata: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_host_query_reset.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_host_query_reset: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_image_drm_format_modifier.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_bind_memory2`](crate::device::DeviceExtensions::khr_bind_memory2)\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.2, device extension [`khr_image_format_list`](crate::device::DeviceExtensions::khr_image_format_list)\n  - One of: Vulkan API version 1.1, device extension [`khr_sampler_ycbcr_conversion`](crate::device::DeviceExtensions::khr_sampler_ycbcr_conversion)"]
    pub ext_image_drm_format_modifier: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_image_robustness.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_image_robustness: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_index_type_uint8.html)"]
    pub ext_index_type_uint8: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_inline_uniform_block.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance1`](crate::device::DeviceExtensions::khr_maintenance1)"]
    pub ext_inline_uniform_block: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_line_rasterization.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_line_rasterization: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_load_store_op_none.html)"]
    pub ext_load_store_op_none: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_memory_budget.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_memory_budget: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_memory_priority.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_memory_priority: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_multi_draw.html)"]
    pub ext_multi_draw: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pageable_device_local_memory.html)\n- Requires:\n  - device extension [`ext_memory_priority`](crate::device::DeviceExtensions::ext_memory_priority)"]
    pub ext_pageable_device_local_memory: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pci_bus_info.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_pci_bus_info: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_physical_device_drm.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_physical_device_drm: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pipeline_creation_cache_control.html)"]
    pub ext_pipeline_creation_cache_control: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pipeline_creation_feedback.html)"]
    pub ext_pipeline_creation_feedback: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_post_depth_coverage.html)"]
    pub ext_post_depth_coverage: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_primitive_topology_list_restart.html)"]
    pub ext_primitive_topology_list_restart: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_private_data.html)"]
    pub ext_private_data: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_provoking_vertex.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_provoking_vertex: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_queue_family_foreign.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)"]
    pub ext_queue_family_foreign: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_robustness2.html)"]
    pub ext_robustness2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_sample_locations.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_sample_locations: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_sampler_filter_minmax.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_sampler_filter_minmax: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_scalar_block_layout.html)\n- Promoted to Vulkan 1.2\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_scalar_block_layout: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_separate_stencil_usage.html)\n- Promoted to Vulkan 1.2"]
    pub ext_separate_stencil_usage: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_atomic_float.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_shader_atomic_float: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_atomic_float2.html)\n- Requires:\n  - device extension [`ext_shader_atomic_float`](crate::device::DeviceExtensions::ext_shader_atomic_float)"]
    pub ext_shader_atomic_float2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_demote_to_helper_invocation.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_shader_demote_to_helper_invocation: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_image_atomic_int64.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_shader_image_atomic_int64: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_stencil_export.html)"]
    pub ext_shader_stencil_export: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_subgroup_ballot.html)\n- Deprecated by Vulkan 1.2"]
    pub ext_shader_subgroup_ballot: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_subgroup_vote.html)\n- Deprecated by Vulkan 1.1"]
    pub ext_shader_subgroup_vote: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_viewport_index_layer.html)\n- Promoted to Vulkan 1.2"]
    pub ext_shader_viewport_index_layer: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_subgroup_size_control.html)\n- Requires:\n  - Vulkan API version 1.1"]
    pub ext_subgroup_size_control: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_texel_buffer_alignment.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_texel_buffer_alignment: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_texture_compression_astc_hdr.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_texture_compression_astc_hdr: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_tooling_info.html)"]
    pub ext_tooling_info: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_transform_feedback.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_transform_feedback: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_validation_cache.html)"]
    pub ext_validation_cache: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_vertex_attribute_divisor.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_vertex_attribute_divisor: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_vertex_input_dynamic_state.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub ext_vertex_input_dynamic_state: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_decode_h264.html)\n- Requires:\n  - device extension [`khr_video_decode_queue`](crate::device::DeviceExtensions::khr_video_decode_queue)"]
    pub ext_video_decode_h264: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_decode_h265.html)\n- Requires:\n  - device extension [`khr_video_decode_queue`](crate::device::DeviceExtensions::khr_video_decode_queue)"]
    pub ext_video_decode_h265: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_encode_h264.html)\n- Requires:\n  - device extension [`khr_video_encode_queue`](crate::device::DeviceExtensions::khr_video_encode_queue)"]
    pub ext_video_encode_h264: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_ycbcr_2plane_444_formats.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_sampler_ycbcr_conversion`](crate::device::DeviceExtensions::khr_sampler_ycbcr_conversion)"]
    pub ext_ycbcr_2plane_444_formats: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_ycbcr_image_arrays.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_sampler_ycbcr_conversion`](crate::device::DeviceExtensions::khr_sampler_ycbcr_conversion)"]
    pub ext_ycbcr_image_arrays: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_buffer_marker.html)"]
    pub amd_buffer_marker: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_device_coherent_memory.html)"]
    pub amd_device_coherent_memory: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_display_native_hdr.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - instance extension [`khr_get_surface_capabilities2`](crate::instance::InstanceExtensions::khr_get_surface_capabilities2)\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub amd_display_native_hdr: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_draw_indirect_count.html)\n- Promoted to [`khr_draw_indirect_count`](crate::device::DeviceExtensions::khr_draw_indirect_count)"]
    pub amd_draw_indirect_count: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_gcn_shader.html)"]
    pub amd_gcn_shader: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_gpu_shader_half_float.html)\n- Deprecated by [`khr_shader_float16_int8`](crate::device::DeviceExtensions::khr_shader_float16_int8)"]
    pub amd_gpu_shader_half_float: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_gpu_shader_int16.html)\n- Deprecated by [`khr_shader_float16_int8`](crate::device::DeviceExtensions::khr_shader_float16_int8)"]
    pub amd_gpu_shader_int16: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_memory_overallocation_behavior.html)"]
    pub amd_memory_overallocation_behavior: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_mixed_attachment_samples.html)"]
    pub amd_mixed_attachment_samples: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_pipeline_compiler_control.html)"]
    pub amd_pipeline_compiler_control: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_rasterization_order.html)"]
    pub amd_rasterization_order: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_ballot.html)"]
    pub amd_shader_ballot: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_core_properties.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub amd_shader_core_properties: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_core_properties2.html)\n- Requires:\n  - device extension [`amd_shader_core_properties`](crate::device::DeviceExtensions::amd_shader_core_properties)"]
    pub amd_shader_core_properties2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_explicit_vertex_parameter.html)"]
    pub amd_shader_explicit_vertex_parameter: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_fragment_mask.html)"]
    pub amd_shader_fragment_mask: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_image_load_store_lod.html)"]
    pub amd_shader_image_load_store_lod: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_info.html)"]
    pub amd_shader_info: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_trinary_minmax.html)"]
    pub amd_shader_trinary_minmax: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_texture_gather_bias_lod.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub amd_texture_gather_bias_lod: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_ANDROID_external_memory_android_hardware_buffer.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_sampler_ycbcr_conversion`](crate::device::DeviceExtensions::khr_sampler_ycbcr_conversion)\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)\n  - device extension [`ext_queue_family_foreign`](crate::device::DeviceExtensions::ext_queue_family_foreign)\n  - One of: Vulkan API version 1.1, device extension [`khr_dedicated_allocation`](crate::device::DeviceExtensions::khr_dedicated_allocation)"]
    pub android_external_memory_android_hardware_buffer: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_FUCHSIA_external_memory.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_external_memory_capabilities`](crate::instance::InstanceExtensions::khr_external_memory_capabilities)\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)"]
    pub fuchsia_external_memory: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_FUCHSIA_external_semaphore.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_external_semaphore_capabilities`](crate::instance::InstanceExtensions::khr_external_semaphore_capabilities)\n  - One of: Vulkan API version 1.1, device extension [`khr_external_semaphore`](crate::device::DeviceExtensions::khr_external_semaphore)"]
    pub fuchsia_external_semaphore: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GGP_frame_token.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - instance extension [`ggp_stream_descriptor_surface`](crate::instance::InstanceExtensions::ggp_stream_descriptor_surface)"]
    pub ggp_frame_token: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_decorate_string.html)"]
    pub google_decorate_string: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_display_timing.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)"]
    pub google_display_timing: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_hlsl_functionality1.html)"]
    pub google_hlsl_functionality1: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_user_type.html)"]
    pub google_user_type: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_HUAWEI_invocation_mask.html)\n- Requires:\n  - device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)\n  - device extension [`khr_synchronization2`](crate::device::DeviceExtensions::khr_synchronization2)"]
    pub huawei_invocation_mask: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_HUAWEI_subpass_shading.html)\n- Requires:\n  - One of: Vulkan API version 1.2, device extension [`khr_create_renderpass2`](crate::device::DeviceExtensions::khr_create_renderpass2)\n  - device extension [`khr_synchronization2`](crate::device::DeviceExtensions::khr_synchronization2)"]
    pub huawei_subpass_shading: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_IMG_filter_cubic.html)"]
    pub img_filter_cubic: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_IMG_format_pvrtc.html)"]
    pub img_format_pvrtc: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_INTEL_performance_query.html)"]
    pub intel_performance_query: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_INTEL_shader_integer_functions2.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub intel_shader_integer_functions2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NVX_binary_import.html)"]
    pub nvx_binary_import: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NVX_image_view_handle.html)"]
    pub nvx_image_view_handle: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NVX_multiview_per_view_attributes.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_multiview`](crate::device::DeviceExtensions::khr_multiview)"]
    pub nvx_multiview_per_view_attributes: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_acquire_winrt_display.html)\n- Requires:\n  - instance extension [`ext_direct_mode_display`](crate::instance::InstanceExtensions::ext_direct_mode_display)"]
    pub nv_acquire_winrt_display: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_clip_space_w_scaling.html)"]
    pub nv_clip_space_w_scaling: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_compute_shader_derivatives.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_compute_shader_derivatives: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_cooperative_matrix.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_cooperative_matrix: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_corner_sampled_image.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_corner_sampled_image: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_coverage_reduction_mode.html)\n- Requires:\n  - device extension [`nv_framebuffer_mixed_samples`](crate::device::DeviceExtensions::nv_framebuffer_mixed_samples)"]
    pub nv_coverage_reduction_mode: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_dedicated_allocation.html)\n- Deprecated by [`khr_dedicated_allocation`](crate::device::DeviceExtensions::khr_dedicated_allocation)"]
    pub nv_dedicated_allocation: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_dedicated_allocation_image_aliasing.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_dedicated_allocation`](crate::device::DeviceExtensions::khr_dedicated_allocation)"]
    pub nv_dedicated_allocation_image_aliasing: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_device_diagnostic_checkpoints.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_device_diagnostic_checkpoints: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_device_diagnostics_config.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_device_diagnostics_config: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_device_generated_commands.html)\n- Requires:\n  - Vulkan API version 1.1"]
    pub nv_device_generated_commands: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory.html)\n- Deprecated by [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)\n- Requires:\n  - instance extension [`nv_external_memory_capabilities`](crate::instance::InstanceExtensions::nv_external_memory_capabilities)"]
    pub nv_external_memory: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory_rdma.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_external_memory`](crate::device::DeviceExtensions::khr_external_memory)"]
    pub nv_external_memory_rdma: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory_win32.html)\n- Deprecated by [`khr_external_memory_win32`](crate::device::DeviceExtensions::khr_external_memory_win32)\n- Requires:\n  - device extension [`nv_external_memory`](crate::device::DeviceExtensions::nv_external_memory)"]
    pub nv_external_memory_win32: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fill_rectangle.html)"]
    pub nv_fill_rectangle: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fragment_coverage_to_color.html)"]
    pub nv_fragment_coverage_to_color: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fragment_shader_barycentric.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_fragment_shader_barycentric: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fragment_shading_rate_enums.html)\n- Requires:\n  - device extension [`khr_fragment_shading_rate`](crate::device::DeviceExtensions::khr_fragment_shading_rate)"]
    pub nv_fragment_shading_rate_enums: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_framebuffer_mixed_samples.html)"]
    pub nv_framebuffer_mixed_samples: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_geometry_shader_passthrough.html)"]
    pub nv_geometry_shader_passthrough: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_glsl_shader.html)\n- Deprecated without a replacement"]
    pub nv_glsl_shader: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_inherited_viewport_scissor.html)"]
    pub nv_inherited_viewport_scissor: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_mesh_shader.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_mesh_shader: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_ray_tracing.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)\n  - One of: Vulkan API version 1.1, device extension [`khr_get_memory_requirements2`](crate::device::DeviceExtensions::khr_get_memory_requirements2)"]
    pub nv_ray_tracing: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_ray_tracing_motion_blur.html)\n- Requires:\n  - device extension [`khr_ray_tracing_pipeline`](crate::device::DeviceExtensions::khr_ray_tracing_pipeline)"]
    pub nv_ray_tracing_motion_blur: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_representative_fragment_test.html)"]
    pub nv_representative_fragment_test: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_sample_mask_override_coverage.html)"]
    pub nv_sample_mask_override_coverage: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_scissor_exclusive.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_scissor_exclusive: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shader_image_footprint.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_shader_image_footprint: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shader_sm_builtins.html)\n- Requires:\n  - Vulkan API version 1.1"]
    pub nv_shader_sm_builtins: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shader_subgroup_partitioned.html)\n- Requires:\n  - Vulkan API version 1.1"]
    pub nv_shader_subgroup_partitioned: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shading_rate_image.html)\n- Requires:\n  - One of: Vulkan API version 1.1, instance extension [`khr_get_physical_device_properties2`](crate::instance::InstanceExtensions::khr_get_physical_device_properties2)"]
    pub nv_shading_rate_image: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_viewport_array2.html)"]
    pub nv_viewport_array2: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_viewport_swizzle.html)"]
    pub nv_viewport_swizzle: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_win32_keyed_mutex.html)\n- Promoted to [`khr_win32_keyed_mutex`](crate::device::DeviceExtensions::khr_win32_keyed_mutex)\n- Requires:\n  - device extension [`nv_external_memory_win32`](crate::device::DeviceExtensions::nv_external_memory_win32)"]
    pub nv_win32_keyed_mutex: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_render_pass_shader_resolve.html)"]
    pub qcom_render_pass_shader_resolve: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_render_pass_store_ops.html)"]
    pub qcom_render_pass_store_ops: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_render_pass_transform.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - instance extension [`khr_surface`](crate::instance::InstanceExtensions::khr_surface)"]
    pub qcom_render_pass_transform: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_rotated_copy_commands.html)\n- Requires:\n  - device extension [`khr_swapchain`](crate::device::DeviceExtensions::khr_swapchain)\n  - device extension [`khr_copy_commands2`](crate::device::DeviceExtensions::khr_copy_commands2)"]
    pub qcom_rotated_copy_commands: bool,
    #[doc = "- [Vulkan documentation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_VALVE_mutable_descriptor_type.html)\n- Requires:\n  - One of: Vulkan API version 1.1, device extension [`khr_maintenance3`](crate::device::DeviceExtensions::khr_maintenance3)"]
    pub valve_mutable_descriptor_type: bool,
    #[doc = r" This field ensures that an instance of this `Extensions` struct"]
    #[doc = r" can only be created through Vulkano functions and the update"]
    #[doc = r" syntax. This way, extensions can be added to Vulkano without"]
    #[doc = r" breaking existing code."]
    pub _unbuildable: Unbuildable,
}
impl DeviceExtensions {
    #[doc = r" Returns an `Extensions` object with all members set to `false`."]
    #[inline]
    pub const fn none() -> Self {
        Self {
            khr_16bit_storage: false,
            khr_8bit_storage: false,
            khr_acceleration_structure: false,
            khr_bind_memory2: false,
            khr_buffer_device_address: false,
            khr_copy_commands2: false,
            khr_create_renderpass2: false,
            khr_dedicated_allocation: false,
            khr_deferred_host_operations: false,
            khr_depth_stencil_resolve: false,
            khr_descriptor_update_template: false,
            khr_device_group: false,
            khr_display_swapchain: false,
            khr_draw_indirect_count: false,
            khr_driver_properties: false,
            khr_external_fence: false,
            khr_external_fence_fd: false,
            khr_external_fence_win32: false,
            khr_external_memory: false,
            khr_external_memory_fd: false,
            khr_external_memory_win32: false,
            khr_external_semaphore: false,
            khr_external_semaphore_fd: false,
            khr_external_semaphore_win32: false,
            khr_fragment_shading_rate: false,
            khr_get_memory_requirements2: false,
            khr_image_format_list: false,
            khr_imageless_framebuffer: false,
            khr_incremental_present: false,
            khr_maintenance1: false,
            khr_maintenance2: false,
            khr_maintenance3: false,
            khr_multiview: false,
            khr_performance_query: false,
            khr_pipeline_executable_properties: false,
            khr_pipeline_library: false,
            khr_portability_subset: false,
            khr_present_id: false,
            khr_present_wait: false,
            khr_push_descriptor: false,
            khr_ray_query: false,
            khr_ray_tracing_pipeline: false,
            khr_relaxed_block_layout: false,
            khr_sampler_mirror_clamp_to_edge: false,
            khr_sampler_ycbcr_conversion: false,
            khr_separate_depth_stencil_layouts: false,
            khr_shader_atomic_int64: false,
            khr_shader_clock: false,
            khr_shader_draw_parameters: false,
            khr_shader_float16_int8: false,
            khr_shader_float_controls: false,
            khr_shader_integer_dot_product: false,
            khr_shader_non_semantic_info: false,
            khr_shader_subgroup_extended_types: false,
            khr_shader_subgroup_uniform_control_flow: false,
            khr_shader_terminate_invocation: false,
            khr_shared_presentable_image: false,
            khr_spirv_1_4: false,
            khr_storage_buffer_storage_class: false,
            khr_swapchain: false,
            khr_swapchain_mutable_format: false,
            khr_synchronization2: false,
            khr_timeline_semaphore: false,
            khr_uniform_buffer_standard_layout: false,
            khr_variable_pointers: false,
            khr_video_decode_queue: false,
            khr_video_encode_queue: false,
            khr_video_queue: false,
            khr_vulkan_memory_model: false,
            khr_win32_keyed_mutex: false,
            khr_workgroup_memory_explicit_layout: false,
            khr_zero_initialize_workgroup_memory: false,
            ext_4444_formats: false,
            ext_astc_decode_mode: false,
            ext_blend_operation_advanced: false,
            ext_buffer_device_address: false,
            ext_calibrated_timestamps: false,
            ext_color_write_enable: false,
            ext_conditional_rendering: false,
            ext_conservative_rasterization: false,
            ext_custom_border_color: false,
            ext_debug_marker: false,
            ext_depth_clip_enable: false,
            ext_depth_range_unrestricted: false,
            ext_descriptor_indexing: false,
            ext_device_memory_report: false,
            ext_discard_rectangles: false,
            ext_display_control: false,
            ext_extended_dynamic_state: false,
            ext_extended_dynamic_state2: false,
            ext_external_memory_dma_buf: false,
            ext_external_memory_host: false,
            ext_filter_cubic: false,
            ext_fragment_density_map: false,
            ext_fragment_density_map2: false,
            ext_fragment_shader_interlock: false,
            ext_full_screen_exclusive: false,
            ext_global_priority: false,
            ext_global_priority_query: false,
            ext_hdr_metadata: false,
            ext_host_query_reset: false,
            ext_image_drm_format_modifier: false,
            ext_image_robustness: false,
            ext_index_type_uint8: false,
            ext_inline_uniform_block: false,
            ext_line_rasterization: false,
            ext_load_store_op_none: false,
            ext_memory_budget: false,
            ext_memory_priority: false,
            ext_multi_draw: false,
            ext_pageable_device_local_memory: false,
            ext_pci_bus_info: false,
            ext_physical_device_drm: false,
            ext_pipeline_creation_cache_control: false,
            ext_pipeline_creation_feedback: false,
            ext_post_depth_coverage: false,
            ext_primitive_topology_list_restart: false,
            ext_private_data: false,
            ext_provoking_vertex: false,
            ext_queue_family_foreign: false,
            ext_robustness2: false,
            ext_sample_locations: false,
            ext_sampler_filter_minmax: false,
            ext_scalar_block_layout: false,
            ext_separate_stencil_usage: false,
            ext_shader_atomic_float: false,
            ext_shader_atomic_float2: false,
            ext_shader_demote_to_helper_invocation: false,
            ext_shader_image_atomic_int64: false,
            ext_shader_stencil_export: false,
            ext_shader_subgroup_ballot: false,
            ext_shader_subgroup_vote: false,
            ext_shader_viewport_index_layer: false,
            ext_subgroup_size_control: false,
            ext_texel_buffer_alignment: false,
            ext_texture_compression_astc_hdr: false,
            ext_tooling_info: false,
            ext_transform_feedback: false,
            ext_validation_cache: false,
            ext_vertex_attribute_divisor: false,
            ext_vertex_input_dynamic_state: false,
            ext_video_decode_h264: false,
            ext_video_decode_h265: false,
            ext_video_encode_h264: false,
            ext_ycbcr_2plane_444_formats: false,
            ext_ycbcr_image_arrays: false,
            amd_buffer_marker: false,
            amd_device_coherent_memory: false,
            amd_display_native_hdr: false,
            amd_draw_indirect_count: false,
            amd_gcn_shader: false,
            amd_gpu_shader_half_float: false,
            amd_gpu_shader_int16: false,
            amd_memory_overallocation_behavior: false,
            amd_mixed_attachment_samples: false,
            amd_pipeline_compiler_control: false,
            amd_rasterization_order: false,
            amd_shader_ballot: false,
            amd_shader_core_properties: false,
            amd_shader_core_properties2: false,
            amd_shader_explicit_vertex_parameter: false,
            amd_shader_fragment_mask: false,
            amd_shader_image_load_store_lod: false,
            amd_shader_info: false,
            amd_shader_trinary_minmax: false,
            amd_texture_gather_bias_lod: false,
            android_external_memory_android_hardware_buffer: false,
            fuchsia_external_memory: false,
            fuchsia_external_semaphore: false,
            ggp_frame_token: false,
            google_decorate_string: false,
            google_display_timing: false,
            google_hlsl_functionality1: false,
            google_user_type: false,
            huawei_invocation_mask: false,
            huawei_subpass_shading: false,
            img_filter_cubic: false,
            img_format_pvrtc: false,
            intel_performance_query: false,
            intel_shader_integer_functions2: false,
            nvx_binary_import: false,
            nvx_image_view_handle: false,
            nvx_multiview_per_view_attributes: false,
            nv_acquire_winrt_display: false,
            nv_clip_space_w_scaling: false,
            nv_compute_shader_derivatives: false,
            nv_cooperative_matrix: false,
            nv_corner_sampled_image: false,
            nv_coverage_reduction_mode: false,
            nv_dedicated_allocation: false,
            nv_dedicated_allocation_image_aliasing: false,
            nv_device_diagnostic_checkpoints: false,
            nv_device_diagnostics_config: false,
            nv_device_generated_commands: false,
            nv_external_memory: false,
            nv_external_memory_rdma: false,
            nv_external_memory_win32: false,
            nv_fill_rectangle: false,
            nv_fragment_coverage_to_color: false,
            nv_fragment_shader_barycentric: false,
            nv_fragment_shading_rate_enums: false,
            nv_framebuffer_mixed_samples: false,
            nv_geometry_shader_passthrough: false,
            nv_glsl_shader: false,
            nv_inherited_viewport_scissor: false,
            nv_mesh_shader: false,
            nv_ray_tracing: false,
            nv_ray_tracing_motion_blur: false,
            nv_representative_fragment_test: false,
            nv_sample_mask_override_coverage: false,
            nv_scissor_exclusive: false,
            nv_shader_image_footprint: false,
            nv_shader_sm_builtins: false,
            nv_shader_subgroup_partitioned: false,
            nv_shading_rate_image: false,
            nv_viewport_array2: false,
            nv_viewport_swizzle: false,
            nv_win32_keyed_mutex: false,
            qcom_render_pass_shader_resolve: false,
            qcom_render_pass_store_ops: false,
            qcom_render_pass_transform: false,
            qcom_rotated_copy_commands: false,
            valve_mutable_descriptor_type: false,
            _unbuildable: Unbuildable(()),
        }
    }
    #[doc = r" Returns true if `self` is a superset of the parameter."]
    #[doc = r""]
    #[doc = r" That is, for each extension of the parameter that is true, the corresponding value"]
    #[doc = r" in self is true as well."]
    pub fn is_superset_of(&self, other: &Self) -> bool {
        (self.khr_16bit_storage || !other.khr_16bit_storage)
            && (self.khr_8bit_storage || !other.khr_8bit_storage)
            && (self.khr_acceleration_structure || !other.khr_acceleration_structure)
            && (self.khr_bind_memory2 || !other.khr_bind_memory2)
            && (self.khr_buffer_device_address || !other.khr_buffer_device_address)
            && (self.khr_copy_commands2 || !other.khr_copy_commands2)
            && (self.khr_create_renderpass2 || !other.khr_create_renderpass2)
            && (self.khr_dedicated_allocation || !other.khr_dedicated_allocation)
            && (self.khr_deferred_host_operations || !other.khr_deferred_host_operations)
            && (self.khr_depth_stencil_resolve || !other.khr_depth_stencil_resolve)
            && (self.khr_descriptor_update_template || !other.khr_descriptor_update_template)
            && (self.khr_device_group || !other.khr_device_group)
            && (self.khr_display_swapchain || !other.khr_display_swapchain)
            && (self.khr_draw_indirect_count || !other.khr_draw_indirect_count)
            && (self.khr_driver_properties || !other.khr_driver_properties)
            && (self.khr_external_fence || !other.khr_external_fence)
            && (self.khr_external_fence_fd || !other.khr_external_fence_fd)
            && (self.khr_external_fence_win32 || !other.khr_external_fence_win32)
            && (self.khr_external_memory || !other.khr_external_memory)
            && (self.khr_external_memory_fd || !other.khr_external_memory_fd)
            && (self.khr_external_memory_win32 || !other.khr_external_memory_win32)
            && (self.khr_external_semaphore || !other.khr_external_semaphore)
            && (self.khr_external_semaphore_fd || !other.khr_external_semaphore_fd)
            && (self.khr_external_semaphore_win32 || !other.khr_external_semaphore_win32)
            && (self.khr_fragment_shading_rate || !other.khr_fragment_shading_rate)
            && (self.khr_get_memory_requirements2 || !other.khr_get_memory_requirements2)
            && (self.khr_image_format_list || !other.khr_image_format_list)
            && (self.khr_imageless_framebuffer || !other.khr_imageless_framebuffer)
            && (self.khr_incremental_present || !other.khr_incremental_present)
            && (self.khr_maintenance1 || !other.khr_maintenance1)
            && (self.khr_maintenance2 || !other.khr_maintenance2)
            && (self.khr_maintenance3 || !other.khr_maintenance3)
            && (self.khr_multiview || !other.khr_multiview)
            && (self.khr_performance_query || !other.khr_performance_query)
            && (self.khr_pipeline_executable_properties
                || !other.khr_pipeline_executable_properties)
            && (self.khr_pipeline_library || !other.khr_pipeline_library)
            && (self.khr_portability_subset || !other.khr_portability_subset)
            && (self.khr_present_id || !other.khr_present_id)
            && (self.khr_present_wait || !other.khr_present_wait)
            && (self.khr_push_descriptor || !other.khr_push_descriptor)
            && (self.khr_ray_query || !other.khr_ray_query)
            && (self.khr_ray_tracing_pipeline || !other.khr_ray_tracing_pipeline)
            && (self.khr_relaxed_block_layout || !other.khr_relaxed_block_layout)
            && (self.khr_sampler_mirror_clamp_to_edge || !other.khr_sampler_mirror_clamp_to_edge)
            && (self.khr_sampler_ycbcr_conversion || !other.khr_sampler_ycbcr_conversion)
            && (self.khr_separate_depth_stencil_layouts
                || !other.khr_separate_depth_stencil_layouts)
            && (self.khr_shader_atomic_int64 || !other.khr_shader_atomic_int64)
            && (self.khr_shader_clock || !other.khr_shader_clock)
            && (self.khr_shader_draw_parameters || !other.khr_shader_draw_parameters)
            && (self.khr_shader_float16_int8 || !other.khr_shader_float16_int8)
            && (self.khr_shader_float_controls || !other.khr_shader_float_controls)
            && (self.khr_shader_integer_dot_product || !other.khr_shader_integer_dot_product)
            && (self.khr_shader_non_semantic_info || !other.khr_shader_non_semantic_info)
            && (self.khr_shader_subgroup_extended_types
                || !other.khr_shader_subgroup_extended_types)
            && (self.khr_shader_subgroup_uniform_control_flow
                || !other.khr_shader_subgroup_uniform_control_flow)
            && (self.khr_shader_terminate_invocation || !other.khr_shader_terminate_invocation)
            && (self.khr_shared_presentable_image || !other.khr_shared_presentable_image)
            && (self.khr_spirv_1_4 || !other.khr_spirv_1_4)
            && (self.khr_storage_buffer_storage_class || !other.khr_storage_buffer_storage_class)
            && (self.khr_swapchain || !other.khr_swapchain)
            && (self.khr_swapchain_mutable_format || !other.khr_swapchain_mutable_format)
            && (self.khr_synchronization2 || !other.khr_synchronization2)
            && (self.khr_timeline_semaphore || !other.khr_timeline_semaphore)
            && (self.khr_uniform_buffer_standard_layout
                || !other.khr_uniform_buffer_standard_layout)
            && (self.khr_variable_pointers || !other.khr_variable_pointers)
            && (self.khr_video_decode_queue || !other.khr_video_decode_queue)
            && (self.khr_video_encode_queue || !other.khr_video_encode_queue)
            && (self.khr_video_queue || !other.khr_video_queue)
            && (self.khr_vulkan_memory_model || !other.khr_vulkan_memory_model)
            && (self.khr_win32_keyed_mutex || !other.khr_win32_keyed_mutex)
            && (self.khr_workgroup_memory_explicit_layout
                || !other.khr_workgroup_memory_explicit_layout)
            && (self.khr_zero_initialize_workgroup_memory
                || !other.khr_zero_initialize_workgroup_memory)
            && (self.ext_4444_formats || !other.ext_4444_formats)
            && (self.ext_astc_decode_mode || !other.ext_astc_decode_mode)
            && (self.ext_blend_operation_advanced || !other.ext_blend_operation_advanced)
            && (self.ext_buffer_device_address || !other.ext_buffer_device_address)
            && (self.ext_calibrated_timestamps || !other.ext_calibrated_timestamps)
            && (self.ext_color_write_enable || !other.ext_color_write_enable)
            && (self.ext_conditional_rendering || !other.ext_conditional_rendering)
            && (self.ext_conservative_rasterization || !other.ext_conservative_rasterization)
            && (self.ext_custom_border_color || !other.ext_custom_border_color)
            && (self.ext_debug_marker || !other.ext_debug_marker)
            && (self.ext_depth_clip_enable || !other.ext_depth_clip_enable)
            && (self.ext_depth_range_unrestricted || !other.ext_depth_range_unrestricted)
            && (self.ext_descriptor_indexing || !other.ext_descriptor_indexing)
            && (self.ext_device_memory_report || !other.ext_device_memory_report)
            && (self.ext_discard_rectangles || !other.ext_discard_rectangles)
            && (self.ext_display_control || !other.ext_display_control)
            && (self.ext_extended_dynamic_state || !other.ext_extended_dynamic_state)
            && (self.ext_extended_dynamic_state2 || !other.ext_extended_dynamic_state2)
            && (self.ext_external_memory_dma_buf || !other.ext_external_memory_dma_buf)
            && (self.ext_external_memory_host || !other.ext_external_memory_host)
            && (self.ext_filter_cubic || !other.ext_filter_cubic)
            && (self.ext_fragment_density_map || !other.ext_fragment_density_map)
            && (self.ext_fragment_density_map2 || !other.ext_fragment_density_map2)
            && (self.ext_fragment_shader_interlock || !other.ext_fragment_shader_interlock)
            && (self.ext_full_screen_exclusive || !other.ext_full_screen_exclusive)
            && (self.ext_global_priority || !other.ext_global_priority)
            && (self.ext_global_priority_query || !other.ext_global_priority_query)
            && (self.ext_hdr_metadata || !other.ext_hdr_metadata)
            && (self.ext_host_query_reset || !other.ext_host_query_reset)
            && (self.ext_image_drm_format_modifier || !other.ext_image_drm_format_modifier)
            && (self.ext_image_robustness || !other.ext_image_robustness)
            && (self.ext_index_type_uint8 || !other.ext_index_type_uint8)
            && (self.ext_inline_uniform_block || !other.ext_inline_uniform_block)
            && (self.ext_line_rasterization || !other.ext_line_rasterization)
            && (self.ext_load_store_op_none || !other.ext_load_store_op_none)
            && (self.ext_memory_budget || !other.ext_memory_budget)
            && (self.ext_memory_priority || !other.ext_memory_priority)
            && (self.ext_multi_draw || !other.ext_multi_draw)
            && (self.ext_pageable_device_local_memory || !other.ext_pageable_device_local_memory)
            && (self.ext_pci_bus_info || !other.ext_pci_bus_info)
            && (self.ext_physical_device_drm || !other.ext_physical_device_drm)
            && (self.ext_pipeline_creation_cache_control
                || !other.ext_pipeline_creation_cache_control)
            && (self.ext_pipeline_creation_feedback || !other.ext_pipeline_creation_feedback)
            && (self.ext_post_depth_coverage || !other.ext_post_depth_coverage)
            && (self.ext_primitive_topology_list_restart
                || !other.ext_primitive_topology_list_restart)
            && (self.ext_private_data || !other.ext_private_data)
            && (self.ext_provoking_vertex || !other.ext_provoking_vertex)
            && (self.ext_queue_family_foreign || !other.ext_queue_family_foreign)
            && (self.ext_robustness2 || !other.ext_robustness2)
            && (self.ext_sample_locations || !other.ext_sample_locations)
            && (self.ext_sampler_filter_minmax || !other.ext_sampler_filter_minmax)
            && (self.ext_scalar_block_layout || !other.ext_scalar_block_layout)
            && (self.ext_separate_stencil_usage || !other.ext_separate_stencil_usage)
            && (self.ext_shader_atomic_float || !other.ext_shader_atomic_float)
            && (self.ext_shader_atomic_float2 || !other.ext_shader_atomic_float2)
            && (self.ext_shader_demote_to_helper_invocation
                || !other.ext_shader_demote_to_helper_invocation)
            && (self.ext_shader_image_atomic_int64 || !other.ext_shader_image_atomic_int64)
            && (self.ext_shader_stencil_export || !other.ext_shader_stencil_export)
            && (self.ext_shader_subgroup_ballot || !other.ext_shader_subgroup_ballot)
            && (self.ext_shader_subgroup_vote || !other.ext_shader_subgroup_vote)
            && (self.ext_shader_viewport_index_layer || !other.ext_shader_viewport_index_layer)
            && (self.ext_subgroup_size_control || !other.ext_subgroup_size_control)
            && (self.ext_texel_buffer_alignment || !other.ext_texel_buffer_alignment)
            && (self.ext_texture_compression_astc_hdr || !other.ext_texture_compression_astc_hdr)
            && (self.ext_tooling_info || !other.ext_tooling_info)
            && (self.ext_transform_feedback || !other.ext_transform_feedback)
            && (self.ext_validation_cache || !other.ext_validation_cache)
            && (self.ext_vertex_attribute_divisor || !other.ext_vertex_attribute_divisor)
            && (self.ext_vertex_input_dynamic_state || !other.ext_vertex_input_dynamic_state)
            && (self.ext_video_decode_h264 || !other.ext_video_decode_h264)
            && (self.ext_video_decode_h265 || !other.ext_video_decode_h265)
            && (self.ext_video_encode_h264 || !other.ext_video_encode_h264)
            && (self.ext_ycbcr_2plane_444_formats || !other.ext_ycbcr_2plane_444_formats)
            && (self.ext_ycbcr_image_arrays || !other.ext_ycbcr_image_arrays)
            && (self.amd_buffer_marker || !other.amd_buffer_marker)
            && (self.amd_device_coherent_memory || !other.amd_device_coherent_memory)
            && (self.amd_display_native_hdr || !other.amd_display_native_hdr)
            && (self.amd_draw_indirect_count || !other.amd_draw_indirect_count)
            && (self.amd_gcn_shader || !other.amd_gcn_shader)
            && (self.amd_gpu_shader_half_float || !other.amd_gpu_shader_half_float)
            && (self.amd_gpu_shader_int16 || !other.amd_gpu_shader_int16)
            && (self.amd_memory_overallocation_behavior
                || !other.amd_memory_overallocation_behavior)
            && (self.amd_mixed_attachment_samples || !other.amd_mixed_attachment_samples)
            && (self.amd_pipeline_compiler_control || !other.amd_pipeline_compiler_control)
            && (self.amd_rasterization_order || !other.amd_rasterization_order)
            && (self.amd_shader_ballot || !other.amd_shader_ballot)
            && (self.amd_shader_core_properties || !other.amd_shader_core_properties)
            && (self.amd_shader_core_properties2 || !other.amd_shader_core_properties2)
            && (self.amd_shader_explicit_vertex_parameter
                || !other.amd_shader_explicit_vertex_parameter)
            && (self.amd_shader_fragment_mask || !other.amd_shader_fragment_mask)
            && (self.amd_shader_image_load_store_lod || !other.amd_shader_image_load_store_lod)
            && (self.amd_shader_info || !other.amd_shader_info)
            && (self.amd_shader_trinary_minmax || !other.amd_shader_trinary_minmax)
            && (self.amd_texture_gather_bias_lod || !other.amd_texture_gather_bias_lod)
            && (self.android_external_memory_android_hardware_buffer
                || !other.android_external_memory_android_hardware_buffer)
            && (self.fuchsia_external_memory || !other.fuchsia_external_memory)
            && (self.fuchsia_external_semaphore || !other.fuchsia_external_semaphore)
            && (self.ggp_frame_token || !other.ggp_frame_token)
            && (self.google_decorate_string || !other.google_decorate_string)
            && (self.google_display_timing || !other.google_display_timing)
            && (self.google_hlsl_functionality1 || !other.google_hlsl_functionality1)
            && (self.google_user_type || !other.google_user_type)
            && (self.huawei_invocation_mask || !other.huawei_invocation_mask)
            && (self.huawei_subpass_shading || !other.huawei_subpass_shading)
            && (self.img_filter_cubic || !other.img_filter_cubic)
            && (self.img_format_pvrtc || !other.img_format_pvrtc)
            && (self.intel_performance_query || !other.intel_performance_query)
            && (self.intel_shader_integer_functions2 || !other.intel_shader_integer_functions2)
            && (self.nvx_binary_import || !other.nvx_binary_import)
            && (self.nvx_image_view_handle || !other.nvx_image_view_handle)
            && (self.nvx_multiview_per_view_attributes || !other.nvx_multiview_per_view_attributes)
            && (self.nv_acquire_winrt_display || !other.nv_acquire_winrt_display)
            && (self.nv_clip_space_w_scaling || !other.nv_clip_space_w_scaling)
            && (self.nv_compute_shader_derivatives || !other.nv_compute_shader_derivatives)
            && (self.nv_cooperative_matrix || !other.nv_cooperative_matrix)
            && (self.nv_corner_sampled_image || !other.nv_corner_sampled_image)
            && (self.nv_coverage_reduction_mode || !other.nv_coverage_reduction_mode)
            && (self.nv_dedicated_allocation || !other.nv_dedicated_allocation)
            && (self.nv_dedicated_allocation_image_aliasing
                || !other.nv_dedicated_allocation_image_aliasing)
            && (self.nv_device_diagnostic_checkpoints || !other.nv_device_diagnostic_checkpoints)
            && (self.nv_device_diagnostics_config || !other.nv_device_diagnostics_config)
            && (self.nv_device_generated_commands || !other.nv_device_generated_commands)
            && (self.nv_external_memory || !other.nv_external_memory)
            && (self.nv_external_memory_rdma || !other.nv_external_memory_rdma)
            && (self.nv_external_memory_win32 || !other.nv_external_memory_win32)
            && (self.nv_fill_rectangle || !other.nv_fill_rectangle)
            && (self.nv_fragment_coverage_to_color || !other.nv_fragment_coverage_to_color)
            && (self.nv_fragment_shader_barycentric || !other.nv_fragment_shader_barycentric)
            && (self.nv_fragment_shading_rate_enums || !other.nv_fragment_shading_rate_enums)
            && (self.nv_framebuffer_mixed_samples || !other.nv_framebuffer_mixed_samples)
            && (self.nv_geometry_shader_passthrough || !other.nv_geometry_shader_passthrough)
            && (self.nv_glsl_shader || !other.nv_glsl_shader)
            && (self.nv_inherited_viewport_scissor || !other.nv_inherited_viewport_scissor)
            && (self.nv_mesh_shader || !other.nv_mesh_shader)
            && (self.nv_ray_tracing || !other.nv_ray_tracing)
            && (self.nv_ray_tracing_motion_blur || !other.nv_ray_tracing_motion_blur)
            && (self.nv_representative_fragment_test || !other.nv_representative_fragment_test)
            && (self.nv_sample_mask_override_coverage || !other.nv_sample_mask_override_coverage)
            && (self.nv_scissor_exclusive || !other.nv_scissor_exclusive)
            && (self.nv_shader_image_footprint || !other.nv_shader_image_footprint)
            && (self.nv_shader_sm_builtins || !other.nv_shader_sm_builtins)
            && (self.nv_shader_subgroup_partitioned || !other.nv_shader_subgroup_partitioned)
            && (self.nv_shading_rate_image || !other.nv_shading_rate_image)
            && (self.nv_viewport_array2 || !other.nv_viewport_array2)
            && (self.nv_viewport_swizzle || !other.nv_viewport_swizzle)
            && (self.nv_win32_keyed_mutex || !other.nv_win32_keyed_mutex)
            && (self.qcom_render_pass_shader_resolve || !other.qcom_render_pass_shader_resolve)
            && (self.qcom_render_pass_store_ops || !other.qcom_render_pass_store_ops)
            && (self.qcom_render_pass_transform || !other.qcom_render_pass_transform)
            && (self.qcom_rotated_copy_commands || !other.qcom_rotated_copy_commands)
            && (self.valve_mutable_descriptor_type || !other.valve_mutable_descriptor_type)
    }
    #[doc = r" Returns the union of this list and another list."]
    #[inline]
    pub const fn union(&self, other: &Self) -> Self {
        Self {
            khr_16bit_storage: self.khr_16bit_storage || other.khr_16bit_storage,
            khr_8bit_storage: self.khr_8bit_storage || other.khr_8bit_storage,
            khr_acceleration_structure: self.khr_acceleration_structure
                || other.khr_acceleration_structure,
            khr_bind_memory2: self.khr_bind_memory2 || other.khr_bind_memory2,
            khr_buffer_device_address: self.khr_buffer_device_address
                || other.khr_buffer_device_address,
            khr_copy_commands2: self.khr_copy_commands2 || other.khr_copy_commands2,
            khr_create_renderpass2: self.khr_create_renderpass2 || other.khr_create_renderpass2,
            khr_dedicated_allocation: self.khr_dedicated_allocation
                || other.khr_dedicated_allocation,
            khr_deferred_host_operations: self.khr_deferred_host_operations
                || other.khr_deferred_host_operations,
            khr_depth_stencil_resolve: self.khr_depth_stencil_resolve
                || other.khr_depth_stencil_resolve,
            khr_descriptor_update_template: self.khr_descriptor_update_template
                || other.khr_descriptor_update_template,
            khr_device_group: self.khr_device_group || other.khr_device_group,
            khr_display_swapchain: self.khr_display_swapchain || other.khr_display_swapchain,
            khr_draw_indirect_count: self.khr_draw_indirect_count || other.khr_draw_indirect_count,
            khr_driver_properties: self.khr_driver_properties || other.khr_driver_properties,
            khr_external_fence: self.khr_external_fence || other.khr_external_fence,
            khr_external_fence_fd: self.khr_external_fence_fd || other.khr_external_fence_fd,
            khr_external_fence_win32: self.khr_external_fence_win32
                || other.khr_external_fence_win32,
            khr_external_memory: self.khr_external_memory || other.khr_external_memory,
            khr_external_memory_fd: self.khr_external_memory_fd || other.khr_external_memory_fd,
            khr_external_memory_win32: self.khr_external_memory_win32
                || other.khr_external_memory_win32,
            khr_external_semaphore: self.khr_external_semaphore || other.khr_external_semaphore,
            khr_external_semaphore_fd: self.khr_external_semaphore_fd
                || other.khr_external_semaphore_fd,
            khr_external_semaphore_win32: self.khr_external_semaphore_win32
                || other.khr_external_semaphore_win32,
            khr_fragment_shading_rate: self.khr_fragment_shading_rate
                || other.khr_fragment_shading_rate,
            khr_get_memory_requirements2: self.khr_get_memory_requirements2
                || other.khr_get_memory_requirements2,
            khr_image_format_list: self.khr_image_format_list || other.khr_image_format_list,
            khr_imageless_framebuffer: self.khr_imageless_framebuffer
                || other.khr_imageless_framebuffer,
            khr_incremental_present: self.khr_incremental_present || other.khr_incremental_present,
            khr_maintenance1: self.khr_maintenance1 || other.khr_maintenance1,
            khr_maintenance2: self.khr_maintenance2 || other.khr_maintenance2,
            khr_maintenance3: self.khr_maintenance3 || other.khr_maintenance3,
            khr_multiview: self.khr_multiview || other.khr_multiview,
            khr_performance_query: self.khr_performance_query || other.khr_performance_query,
            khr_pipeline_executable_properties: self.khr_pipeline_executable_properties
                || other.khr_pipeline_executable_properties,
            khr_pipeline_library: self.khr_pipeline_library || other.khr_pipeline_library,
            khr_portability_subset: self.khr_portability_subset || other.khr_portability_subset,
            khr_present_id: self.khr_present_id || other.khr_present_id,
            khr_present_wait: self.khr_present_wait || other.khr_present_wait,
            khr_push_descriptor: self.khr_push_descriptor || other.khr_push_descriptor,
            khr_ray_query: self.khr_ray_query || other.khr_ray_query,
            khr_ray_tracing_pipeline: self.khr_ray_tracing_pipeline
                || other.khr_ray_tracing_pipeline,
            khr_relaxed_block_layout: self.khr_relaxed_block_layout
                || other.khr_relaxed_block_layout,
            khr_sampler_mirror_clamp_to_edge: self.khr_sampler_mirror_clamp_to_edge
                || other.khr_sampler_mirror_clamp_to_edge,
            khr_sampler_ycbcr_conversion: self.khr_sampler_ycbcr_conversion
                || other.khr_sampler_ycbcr_conversion,
            khr_separate_depth_stencil_layouts: self.khr_separate_depth_stencil_layouts
                || other.khr_separate_depth_stencil_layouts,
            khr_shader_atomic_int64: self.khr_shader_atomic_int64 || other.khr_shader_atomic_int64,
            khr_shader_clock: self.khr_shader_clock || other.khr_shader_clock,
            khr_shader_draw_parameters: self.khr_shader_draw_parameters
                || other.khr_shader_draw_parameters,
            khr_shader_float16_int8: self.khr_shader_float16_int8 || other.khr_shader_float16_int8,
            khr_shader_float_controls: self.khr_shader_float_controls
                || other.khr_shader_float_controls,
            khr_shader_integer_dot_product: self.khr_shader_integer_dot_product
                || other.khr_shader_integer_dot_product,
            khr_shader_non_semantic_info: self.khr_shader_non_semantic_info
                || other.khr_shader_non_semantic_info,
            khr_shader_subgroup_extended_types: self.khr_shader_subgroup_extended_types
                || other.khr_shader_subgroup_extended_types,
            khr_shader_subgroup_uniform_control_flow: self.khr_shader_subgroup_uniform_control_flow
                || other.khr_shader_subgroup_uniform_control_flow,
            khr_shader_terminate_invocation: self.khr_shader_terminate_invocation
                || other.khr_shader_terminate_invocation,
            khr_shared_presentable_image: self.khr_shared_presentable_image
                || other.khr_shared_presentable_image,
            khr_spirv_1_4: self.khr_spirv_1_4 || other.khr_spirv_1_4,
            khr_storage_buffer_storage_class: self.khr_storage_buffer_storage_class
                || other.khr_storage_buffer_storage_class,
            khr_swapchain: self.khr_swapchain || other.khr_swapchain,
            khr_swapchain_mutable_format: self.khr_swapchain_mutable_format
                || other.khr_swapchain_mutable_format,
            khr_synchronization2: self.khr_synchronization2 || other.khr_synchronization2,
            khr_timeline_semaphore: self.khr_timeline_semaphore || other.khr_timeline_semaphore,
            khr_uniform_buffer_standard_layout: self.khr_uniform_buffer_standard_layout
                || other.khr_uniform_buffer_standard_layout,
            khr_variable_pointers: self.khr_variable_pointers || other.khr_variable_pointers,
            khr_video_decode_queue: self.khr_video_decode_queue || other.khr_video_decode_queue,
            khr_video_encode_queue: self.khr_video_encode_queue || other.khr_video_encode_queue,
            khr_video_queue: self.khr_video_queue || other.khr_video_queue,
            khr_vulkan_memory_model: self.khr_vulkan_memory_model || other.khr_vulkan_memory_model,
            khr_win32_keyed_mutex: self.khr_win32_keyed_mutex || other.khr_win32_keyed_mutex,
            khr_workgroup_memory_explicit_layout: self.khr_workgroup_memory_explicit_layout
                || other.khr_workgroup_memory_explicit_layout,
            khr_zero_initialize_workgroup_memory: self.khr_zero_initialize_workgroup_memory
                || other.khr_zero_initialize_workgroup_memory,
            ext_4444_formats: self.ext_4444_formats || other.ext_4444_formats,
            ext_astc_decode_mode: self.ext_astc_decode_mode || other.ext_astc_decode_mode,
            ext_blend_operation_advanced: self.ext_blend_operation_advanced
                || other.ext_blend_operation_advanced,
            ext_buffer_device_address: self.ext_buffer_device_address
                || other.ext_buffer_device_address,
            ext_calibrated_timestamps: self.ext_calibrated_timestamps
                || other.ext_calibrated_timestamps,
            ext_color_write_enable: self.ext_color_write_enable || other.ext_color_write_enable,
            ext_conditional_rendering: self.ext_conditional_rendering
                || other.ext_conditional_rendering,
            ext_conservative_rasterization: self.ext_conservative_rasterization
                || other.ext_conservative_rasterization,
            ext_custom_border_color: self.ext_custom_border_color || other.ext_custom_border_color,
            ext_debug_marker: self.ext_debug_marker || other.ext_debug_marker,
            ext_depth_clip_enable: self.ext_depth_clip_enable || other.ext_depth_clip_enable,
            ext_depth_range_unrestricted: self.ext_depth_range_unrestricted
                || other.ext_depth_range_unrestricted,
            ext_descriptor_indexing: self.ext_descriptor_indexing || other.ext_descriptor_indexing,
            ext_device_memory_report: self.ext_device_memory_report
                || other.ext_device_memory_report,
            ext_discard_rectangles: self.ext_discard_rectangles || other.ext_discard_rectangles,
            ext_display_control: self.ext_display_control || other.ext_display_control,
            ext_extended_dynamic_state: self.ext_extended_dynamic_state
                || other.ext_extended_dynamic_state,
            ext_extended_dynamic_state2: self.ext_extended_dynamic_state2
                || other.ext_extended_dynamic_state2,
            ext_external_memory_dma_buf: self.ext_external_memory_dma_buf
                || other.ext_external_memory_dma_buf,
            ext_external_memory_host: self.ext_external_memory_host
                || other.ext_external_memory_host,
            ext_filter_cubic: self.ext_filter_cubic || other.ext_filter_cubic,
            ext_fragment_density_map: self.ext_fragment_density_map
                || other.ext_fragment_density_map,
            ext_fragment_density_map2: self.ext_fragment_density_map2
                || other.ext_fragment_density_map2,
            ext_fragment_shader_interlock: self.ext_fragment_shader_interlock
                || other.ext_fragment_shader_interlock,
            ext_full_screen_exclusive: self.ext_full_screen_exclusive
                || other.ext_full_screen_exclusive,
            ext_global_priority: self.ext_global_priority || other.ext_global_priority,
            ext_global_priority_query: self.ext_global_priority_query
                || other.ext_global_priority_query,
            ext_hdr_metadata: self.ext_hdr_metadata || other.ext_hdr_metadata,
            ext_host_query_reset: self.ext_host_query_reset || other.ext_host_query_reset,
            ext_image_drm_format_modifier: self.ext_image_drm_format_modifier
                || other.ext_image_drm_format_modifier,
            ext_image_robustness: self.ext_image_robustness || other.ext_image_robustness,
            ext_index_type_uint8: self.ext_index_type_uint8 || other.ext_index_type_uint8,
            ext_inline_uniform_block: self.ext_inline_uniform_block
                || other.ext_inline_uniform_block,
            ext_line_rasterization: self.ext_line_rasterization || other.ext_line_rasterization,
            ext_load_store_op_none: self.ext_load_store_op_none || other.ext_load_store_op_none,
            ext_memory_budget: self.ext_memory_budget || other.ext_memory_budget,
            ext_memory_priority: self.ext_memory_priority || other.ext_memory_priority,
            ext_multi_draw: self.ext_multi_draw || other.ext_multi_draw,
            ext_pageable_device_local_memory: self.ext_pageable_device_local_memory
                || other.ext_pageable_device_local_memory,
            ext_pci_bus_info: self.ext_pci_bus_info || other.ext_pci_bus_info,
            ext_physical_device_drm: self.ext_physical_device_drm || other.ext_physical_device_drm,
            ext_pipeline_creation_cache_control: self.ext_pipeline_creation_cache_control
                || other.ext_pipeline_creation_cache_control,
            ext_pipeline_creation_feedback: self.ext_pipeline_creation_feedback
                || other.ext_pipeline_creation_feedback,
            ext_post_depth_coverage: self.ext_post_depth_coverage || other.ext_post_depth_coverage,
            ext_primitive_topology_list_restart: self.ext_primitive_topology_list_restart
                || other.ext_primitive_topology_list_restart,
            ext_private_data: self.ext_private_data || other.ext_private_data,
            ext_provoking_vertex: self.ext_provoking_vertex || other.ext_provoking_vertex,
            ext_queue_family_foreign: self.ext_queue_family_foreign
                || other.ext_queue_family_foreign,
            ext_robustness2: self.ext_robustness2 || other.ext_robustness2,
            ext_sample_locations: self.ext_sample_locations || other.ext_sample_locations,
            ext_sampler_filter_minmax: self.ext_sampler_filter_minmax
                || other.ext_sampler_filter_minmax,
            ext_scalar_block_layout: self.ext_scalar_block_layout || other.ext_scalar_block_layout,
            ext_separate_stencil_usage: self.ext_separate_stencil_usage
                || other.ext_separate_stencil_usage,
            ext_shader_atomic_float: self.ext_shader_atomic_float || other.ext_shader_atomic_float,
            ext_shader_atomic_float2: self.ext_shader_atomic_float2
                || other.ext_shader_atomic_float2,
            ext_shader_demote_to_helper_invocation: self.ext_shader_demote_to_helper_invocation
                || other.ext_shader_demote_to_helper_invocation,
            ext_shader_image_atomic_int64: self.ext_shader_image_atomic_int64
                || other.ext_shader_image_atomic_int64,
            ext_shader_stencil_export: self.ext_shader_stencil_export
                || other.ext_shader_stencil_export,
            ext_shader_subgroup_ballot: self.ext_shader_subgroup_ballot
                || other.ext_shader_subgroup_ballot,
            ext_shader_subgroup_vote: self.ext_shader_subgroup_vote
                || other.ext_shader_subgroup_vote,
            ext_shader_viewport_index_layer: self.ext_shader_viewport_index_layer
                || other.ext_shader_viewport_index_layer,
            ext_subgroup_size_control: self.ext_subgroup_size_control
                || other.ext_subgroup_size_control,
            ext_texel_buffer_alignment: self.ext_texel_buffer_alignment
                || other.ext_texel_buffer_alignment,
            ext_texture_compression_astc_hdr: self.ext_texture_compression_astc_hdr
                || other.ext_texture_compression_astc_hdr,
            ext_tooling_info: self.ext_tooling_info || other.ext_tooling_info,
            ext_transform_feedback: self.ext_transform_feedback || other.ext_transform_feedback,
            ext_validation_cache: self.ext_validation_cache || other.ext_validation_cache,
            ext_vertex_attribute_divisor: self.ext_vertex_attribute_divisor
                || other.ext_vertex_attribute_divisor,
            ext_vertex_input_dynamic_state: self.ext_vertex_input_dynamic_state
                || other.ext_vertex_input_dynamic_state,
            ext_video_decode_h264: self.ext_video_decode_h264 || other.ext_video_decode_h264,
            ext_video_decode_h265: self.ext_video_decode_h265 || other.ext_video_decode_h265,
            ext_video_encode_h264: self.ext_video_encode_h264 || other.ext_video_encode_h264,
            ext_ycbcr_2plane_444_formats: self.ext_ycbcr_2plane_444_formats
                || other.ext_ycbcr_2plane_444_formats,
            ext_ycbcr_image_arrays: self.ext_ycbcr_image_arrays || other.ext_ycbcr_image_arrays,
            amd_buffer_marker: self.amd_buffer_marker || other.amd_buffer_marker,
            amd_device_coherent_memory: self.amd_device_coherent_memory
                || other.amd_device_coherent_memory,
            amd_display_native_hdr: self.amd_display_native_hdr || other.amd_display_native_hdr,
            amd_draw_indirect_count: self.amd_draw_indirect_count || other.amd_draw_indirect_count,
            amd_gcn_shader: self.amd_gcn_shader || other.amd_gcn_shader,
            amd_gpu_shader_half_float: self.amd_gpu_shader_half_float
                || other.amd_gpu_shader_half_float,
            amd_gpu_shader_int16: self.amd_gpu_shader_int16 || other.amd_gpu_shader_int16,
            amd_memory_overallocation_behavior: self.amd_memory_overallocation_behavior
                || other.amd_memory_overallocation_behavior,
            amd_mixed_attachment_samples: self.amd_mixed_attachment_samples
                || other.amd_mixed_attachment_samples,
            amd_pipeline_compiler_control: self.amd_pipeline_compiler_control
                || other.amd_pipeline_compiler_control,
            amd_rasterization_order: self.amd_rasterization_order || other.amd_rasterization_order,
            amd_shader_ballot: self.amd_shader_ballot || other.amd_shader_ballot,
            amd_shader_core_properties: self.amd_shader_core_properties
                || other.amd_shader_core_properties,
            amd_shader_core_properties2: self.amd_shader_core_properties2
                || other.amd_shader_core_properties2,
            amd_shader_explicit_vertex_parameter: self.amd_shader_explicit_vertex_parameter
                || other.amd_shader_explicit_vertex_parameter,
            amd_shader_fragment_mask: self.amd_shader_fragment_mask
                || other.amd_shader_fragment_mask,
            amd_shader_image_load_store_lod: self.amd_shader_image_load_store_lod
                || other.amd_shader_image_load_store_lod,
            amd_shader_info: self.amd_shader_info || other.amd_shader_info,
            amd_shader_trinary_minmax: self.amd_shader_trinary_minmax
                || other.amd_shader_trinary_minmax,
            amd_texture_gather_bias_lod: self.amd_texture_gather_bias_lod
                || other.amd_texture_gather_bias_lod,
            android_external_memory_android_hardware_buffer: self
                .android_external_memory_android_hardware_buffer
                || other.android_external_memory_android_hardware_buffer,
            fuchsia_external_memory: self.fuchsia_external_memory || other.fuchsia_external_memory,
            fuchsia_external_semaphore: self.fuchsia_external_semaphore
                || other.fuchsia_external_semaphore,
            ggp_frame_token: self.ggp_frame_token || other.ggp_frame_token,
            google_decorate_string: self.google_decorate_string || other.google_decorate_string,
            google_display_timing: self.google_display_timing || other.google_display_timing,
            google_hlsl_functionality1: self.google_hlsl_functionality1
                || other.google_hlsl_functionality1,
            google_user_type: self.google_user_type || other.google_user_type,
            huawei_invocation_mask: self.huawei_invocation_mask || other.huawei_invocation_mask,
            huawei_subpass_shading: self.huawei_subpass_shading || other.huawei_subpass_shading,
            img_filter_cubic: self.img_filter_cubic || other.img_filter_cubic,
            img_format_pvrtc: self.img_format_pvrtc || other.img_format_pvrtc,
            intel_performance_query: self.intel_performance_query || other.intel_performance_query,
            intel_shader_integer_functions2: self.intel_shader_integer_functions2
                || other.intel_shader_integer_functions2,
            nvx_binary_import: self.nvx_binary_import || other.nvx_binary_import,
            nvx_image_view_handle: self.nvx_image_view_handle || other.nvx_image_view_handle,
            nvx_multiview_per_view_attributes: self.nvx_multiview_per_view_attributes
                || other.nvx_multiview_per_view_attributes,
            nv_acquire_winrt_display: self.nv_acquire_winrt_display
                || other.nv_acquire_winrt_display,
            nv_clip_space_w_scaling: self.nv_clip_space_w_scaling || other.nv_clip_space_w_scaling,
            nv_compute_shader_derivatives: self.nv_compute_shader_derivatives
                || other.nv_compute_shader_derivatives,
            nv_cooperative_matrix: self.nv_cooperative_matrix || other.nv_cooperative_matrix,
            nv_corner_sampled_image: self.nv_corner_sampled_image || other.nv_corner_sampled_image,
            nv_coverage_reduction_mode: self.nv_coverage_reduction_mode
                || other.nv_coverage_reduction_mode,
            nv_dedicated_allocation: self.nv_dedicated_allocation || other.nv_dedicated_allocation,
            nv_dedicated_allocation_image_aliasing: self.nv_dedicated_allocation_image_aliasing
                || other.nv_dedicated_allocation_image_aliasing,
            nv_device_diagnostic_checkpoints: self.nv_device_diagnostic_checkpoints
                || other.nv_device_diagnostic_checkpoints,
            nv_device_diagnostics_config: self.nv_device_diagnostics_config
                || other.nv_device_diagnostics_config,
            nv_device_generated_commands: self.nv_device_generated_commands
                || other.nv_device_generated_commands,
            nv_external_memory: self.nv_external_memory || other.nv_external_memory,
            nv_external_memory_rdma: self.nv_external_memory_rdma || other.nv_external_memory_rdma,
            nv_external_memory_win32: self.nv_external_memory_win32
                || other.nv_external_memory_win32,
            nv_fill_rectangle: self.nv_fill_rectangle || other.nv_fill_rectangle,
            nv_fragment_coverage_to_color: self.nv_fragment_coverage_to_color
                || other.nv_fragment_coverage_to_color,
            nv_fragment_shader_barycentric: self.nv_fragment_shader_barycentric
                || other.nv_fragment_shader_barycentric,
            nv_fragment_shading_rate_enums: self.nv_fragment_shading_rate_enums
                || other.nv_fragment_shading_rate_enums,
            nv_framebuffer_mixed_samples: self.nv_framebuffer_mixed_samples
                || other.nv_framebuffer_mixed_samples,
            nv_geometry_shader_passthrough: self.nv_geometry_shader_passthrough
                || other.nv_geometry_shader_passthrough,
            nv_glsl_shader: self.nv_glsl_shader || other.nv_glsl_shader,
            nv_inherited_viewport_scissor: self.nv_inherited_viewport_scissor
                || other.nv_inherited_viewport_scissor,
            nv_mesh_shader: self.nv_mesh_shader || other.nv_mesh_shader,
            nv_ray_tracing: self.nv_ray_tracing || other.nv_ray_tracing,
            nv_ray_tracing_motion_blur: self.nv_ray_tracing_motion_blur
                || other.nv_ray_tracing_motion_blur,
            nv_representative_fragment_test: self.nv_representative_fragment_test
                || other.nv_representative_fragment_test,
            nv_sample_mask_override_coverage: self.nv_sample_mask_override_coverage
                || other.nv_sample_mask_override_coverage,
            nv_scissor_exclusive: self.nv_scissor_exclusive || other.nv_scissor_exclusive,
            nv_shader_image_footprint: self.nv_shader_image_footprint
                || other.nv_shader_image_footprint,
            nv_shader_sm_builtins: self.nv_shader_sm_builtins || other.nv_shader_sm_builtins,
            nv_shader_subgroup_partitioned: self.nv_shader_subgroup_partitioned
                || other.nv_shader_subgroup_partitioned,
            nv_shading_rate_image: self.nv_shading_rate_image || other.nv_shading_rate_image,
            nv_viewport_array2: self.nv_viewport_array2 || other.nv_viewport_array2,
            nv_viewport_swizzle: self.nv_viewport_swizzle || other.nv_viewport_swizzle,
            nv_win32_keyed_mutex: self.nv_win32_keyed_mutex || other.nv_win32_keyed_mutex,
            qcom_render_pass_shader_resolve: self.qcom_render_pass_shader_resolve
                || other.qcom_render_pass_shader_resolve,
            qcom_render_pass_store_ops: self.qcom_render_pass_store_ops
                || other.qcom_render_pass_store_ops,
            qcom_render_pass_transform: self.qcom_render_pass_transform
                || other.qcom_render_pass_transform,
            qcom_rotated_copy_commands: self.qcom_rotated_copy_commands
                || other.qcom_rotated_copy_commands,
            valve_mutable_descriptor_type: self.valve_mutable_descriptor_type
                || other.valve_mutable_descriptor_type,
            _unbuildable: Unbuildable(()),
        }
    }
    #[doc = r" Returns the intersection of this list and another list."]
    #[inline]
    pub const fn intersection(&self, other: &Self) -> Self {
        Self {
            khr_16bit_storage: self.khr_16bit_storage && other.khr_16bit_storage,
            khr_8bit_storage: self.khr_8bit_storage && other.khr_8bit_storage,
            khr_acceleration_structure: self.khr_acceleration_structure
                && other.khr_acceleration_structure,
            khr_bind_memory2: self.khr_bind_memory2 && other.khr_bind_memory2,
            khr_buffer_device_address: self.khr_buffer_device_address
                && other.khr_buffer_device_address,
            khr_copy_commands2: self.khr_copy_commands2 && other.khr_copy_commands2,
            khr_create_renderpass2: self.khr_create_renderpass2 && other.khr_create_renderpass2,
            khr_dedicated_allocation: self.khr_dedicated_allocation
                && other.khr_dedicated_allocation,
            khr_deferred_host_operations: self.khr_deferred_host_operations
                && other.khr_deferred_host_operations,
            khr_depth_stencil_resolve: self.khr_depth_stencil_resolve
                && other.khr_depth_stencil_resolve,
            khr_descriptor_update_template: self.khr_descriptor_update_template
                && other.khr_descriptor_update_template,
            khr_device_group: self.khr_device_group && other.khr_device_group,
            khr_display_swapchain: self.khr_display_swapchain && other.khr_display_swapchain,
            khr_draw_indirect_count: self.khr_draw_indirect_count && other.khr_draw_indirect_count,
            khr_driver_properties: self.khr_driver_properties && other.khr_driver_properties,
            khr_external_fence: self.khr_external_fence && other.khr_external_fence,
            khr_external_fence_fd: self.khr_external_fence_fd && other.khr_external_fence_fd,
            khr_external_fence_win32: self.khr_external_fence_win32
                && other.khr_external_fence_win32,
            khr_external_memory: self.khr_external_memory && other.khr_external_memory,
            khr_external_memory_fd: self.khr_external_memory_fd && other.khr_external_memory_fd,
            khr_external_memory_win32: self.khr_external_memory_win32
                && other.khr_external_memory_win32,
            khr_external_semaphore: self.khr_external_semaphore && other.khr_external_semaphore,
            khr_external_semaphore_fd: self.khr_external_semaphore_fd
                && other.khr_external_semaphore_fd,
            khr_external_semaphore_win32: self.khr_external_semaphore_win32
                && other.khr_external_semaphore_win32,
            khr_fragment_shading_rate: self.khr_fragment_shading_rate
                && other.khr_fragment_shading_rate,
            khr_get_memory_requirements2: self.khr_get_memory_requirements2
                && other.khr_get_memory_requirements2,
            khr_image_format_list: self.khr_image_format_list && other.khr_image_format_list,
            khr_imageless_framebuffer: self.khr_imageless_framebuffer
                && other.khr_imageless_framebuffer,
            khr_incremental_present: self.khr_incremental_present && other.khr_incremental_present,
            khr_maintenance1: self.khr_maintenance1 && other.khr_maintenance1,
            khr_maintenance2: self.khr_maintenance2 && other.khr_maintenance2,
            khr_maintenance3: self.khr_maintenance3 && other.khr_maintenance3,
            khr_multiview: self.khr_multiview && other.khr_multiview,
            khr_performance_query: self.khr_performance_query && other.khr_performance_query,
            khr_pipeline_executable_properties: self.khr_pipeline_executable_properties
                && other.khr_pipeline_executable_properties,
            khr_pipeline_library: self.khr_pipeline_library && other.khr_pipeline_library,
            khr_portability_subset: self.khr_portability_subset && other.khr_portability_subset,
            khr_present_id: self.khr_present_id && other.khr_present_id,
            khr_present_wait: self.khr_present_wait && other.khr_present_wait,
            khr_push_descriptor: self.khr_push_descriptor && other.khr_push_descriptor,
            khr_ray_query: self.khr_ray_query && other.khr_ray_query,
            khr_ray_tracing_pipeline: self.khr_ray_tracing_pipeline
                && other.khr_ray_tracing_pipeline,
            khr_relaxed_block_layout: self.khr_relaxed_block_layout
                && other.khr_relaxed_block_layout,
            khr_sampler_mirror_clamp_to_edge: self.khr_sampler_mirror_clamp_to_edge
                && other.khr_sampler_mirror_clamp_to_edge,
            khr_sampler_ycbcr_conversion: self.khr_sampler_ycbcr_conversion
                && other.khr_sampler_ycbcr_conversion,
            khr_separate_depth_stencil_layouts: self.khr_separate_depth_stencil_layouts
                && other.khr_separate_depth_stencil_layouts,
            khr_shader_atomic_int64: self.khr_shader_atomic_int64 && other.khr_shader_atomic_int64,
            khr_shader_clock: self.khr_shader_clock && other.khr_shader_clock,
            khr_shader_draw_parameters: self.khr_shader_draw_parameters
                && other.khr_shader_draw_parameters,
            khr_shader_float16_int8: self.khr_shader_float16_int8 && other.khr_shader_float16_int8,
            khr_shader_float_controls: self.khr_shader_float_controls
                && other.khr_shader_float_controls,
            khr_shader_integer_dot_product: self.khr_shader_integer_dot_product
                && other.khr_shader_integer_dot_product,
            khr_shader_non_semantic_info: self.khr_shader_non_semantic_info
                && other.khr_shader_non_semantic_info,
            khr_shader_subgroup_extended_types: self.khr_shader_subgroup_extended_types
                && other.khr_shader_subgroup_extended_types,
            khr_shader_subgroup_uniform_control_flow: self.khr_shader_subgroup_uniform_control_flow
                && other.khr_shader_subgroup_uniform_control_flow,
            khr_shader_terminate_invocation: self.khr_shader_terminate_invocation
                && other.khr_shader_terminate_invocation,
            khr_shared_presentable_image: self.khr_shared_presentable_image
                && other.khr_shared_presentable_image,
            khr_spirv_1_4: self.khr_spirv_1_4 && other.khr_spirv_1_4,
            khr_storage_buffer_storage_class: self.khr_storage_buffer_storage_class
                && other.khr_storage_buffer_storage_class,
            khr_swapchain: self.khr_swapchain && other.khr_swapchain,
            khr_swapchain_mutable_format: self.khr_swapchain_mutable_format
                && other.khr_swapchain_mutable_format,
            khr_synchronization2: self.khr_synchronization2 && other.khr_synchronization2,
            khr_timeline_semaphore: self.khr_timeline_semaphore && other.khr_timeline_semaphore,
            khr_uniform_buffer_standard_layout: self.khr_uniform_buffer_standard_layout
                && other.khr_uniform_buffer_standard_layout,
            khr_variable_pointers: self.khr_variable_pointers && other.khr_variable_pointers,
            khr_video_decode_queue: self.khr_video_decode_queue && other.khr_video_decode_queue,
            khr_video_encode_queue: self.khr_video_encode_queue && other.khr_video_encode_queue,
            khr_video_queue: self.khr_video_queue && other.khr_video_queue,
            khr_vulkan_memory_model: self.khr_vulkan_memory_model && other.khr_vulkan_memory_model,
            khr_win32_keyed_mutex: self.khr_win32_keyed_mutex && other.khr_win32_keyed_mutex,
            khr_workgroup_memory_explicit_layout: self.khr_workgroup_memory_explicit_layout
                && other.khr_workgroup_memory_explicit_layout,
            khr_zero_initialize_workgroup_memory: self.khr_zero_initialize_workgroup_memory
                && other.khr_zero_initialize_workgroup_memory,
            ext_4444_formats: self.ext_4444_formats && other.ext_4444_formats,
            ext_astc_decode_mode: self.ext_astc_decode_mode && other.ext_astc_decode_mode,
            ext_blend_operation_advanced: self.ext_blend_operation_advanced
                && other.ext_blend_operation_advanced,
            ext_buffer_device_address: self.ext_buffer_device_address
                && other.ext_buffer_device_address,
            ext_calibrated_timestamps: self.ext_calibrated_timestamps
                && other.ext_calibrated_timestamps,
            ext_color_write_enable: self.ext_color_write_enable && other.ext_color_write_enable,
            ext_conditional_rendering: self.ext_conditional_rendering
                && other.ext_conditional_rendering,
            ext_conservative_rasterization: self.ext_conservative_rasterization
                && other.ext_conservative_rasterization,
            ext_custom_border_color: self.ext_custom_border_color && other.ext_custom_border_color,
            ext_debug_marker: self.ext_debug_marker && other.ext_debug_marker,
            ext_depth_clip_enable: self.ext_depth_clip_enable && other.ext_depth_clip_enable,
            ext_depth_range_unrestricted: self.ext_depth_range_unrestricted
                && other.ext_depth_range_unrestricted,
            ext_descriptor_indexing: self.ext_descriptor_indexing && other.ext_descriptor_indexing,
            ext_device_memory_report: self.ext_device_memory_report
                && other.ext_device_memory_report,
            ext_discard_rectangles: self.ext_discard_rectangles && other.ext_discard_rectangles,
            ext_display_control: self.ext_display_control && other.ext_display_control,
            ext_extended_dynamic_state: self.ext_extended_dynamic_state
                && other.ext_extended_dynamic_state,
            ext_extended_dynamic_state2: self.ext_extended_dynamic_state2
                && other.ext_extended_dynamic_state2,
            ext_external_memory_dma_buf: self.ext_external_memory_dma_buf
                && other.ext_external_memory_dma_buf,
            ext_external_memory_host: self.ext_external_memory_host
                && other.ext_external_memory_host,
            ext_filter_cubic: self.ext_filter_cubic && other.ext_filter_cubic,
            ext_fragment_density_map: self.ext_fragment_density_map
                && other.ext_fragment_density_map,
            ext_fragment_density_map2: self.ext_fragment_density_map2
                && other.ext_fragment_density_map2,
            ext_fragment_shader_interlock: self.ext_fragment_shader_interlock
                && other.ext_fragment_shader_interlock,
            ext_full_screen_exclusive: self.ext_full_screen_exclusive
                && other.ext_full_screen_exclusive,
            ext_global_priority: self.ext_global_priority && other.ext_global_priority,
            ext_global_priority_query: self.ext_global_priority_query
                && other.ext_global_priority_query,
            ext_hdr_metadata: self.ext_hdr_metadata && other.ext_hdr_metadata,
            ext_host_query_reset: self.ext_host_query_reset && other.ext_host_query_reset,
            ext_image_drm_format_modifier: self.ext_image_drm_format_modifier
                && other.ext_image_drm_format_modifier,
            ext_image_robustness: self.ext_image_robustness && other.ext_image_robustness,
            ext_index_type_uint8: self.ext_index_type_uint8 && other.ext_index_type_uint8,
            ext_inline_uniform_block: self.ext_inline_uniform_block
                && other.ext_inline_uniform_block,
            ext_line_rasterization: self.ext_line_rasterization && other.ext_line_rasterization,
            ext_load_store_op_none: self.ext_load_store_op_none && other.ext_load_store_op_none,
            ext_memory_budget: self.ext_memory_budget && other.ext_memory_budget,
            ext_memory_priority: self.ext_memory_priority && other.ext_memory_priority,
            ext_multi_draw: self.ext_multi_draw && other.ext_multi_draw,
            ext_pageable_device_local_memory: self.ext_pageable_device_local_memory
                && other.ext_pageable_device_local_memory,
            ext_pci_bus_info: self.ext_pci_bus_info && other.ext_pci_bus_info,
            ext_physical_device_drm: self.ext_physical_device_drm && other.ext_physical_device_drm,
            ext_pipeline_creation_cache_control: self.ext_pipeline_creation_cache_control
                && other.ext_pipeline_creation_cache_control,
            ext_pipeline_creation_feedback: self.ext_pipeline_creation_feedback
                && other.ext_pipeline_creation_feedback,
            ext_post_depth_coverage: self.ext_post_depth_coverage && other.ext_post_depth_coverage,
            ext_primitive_topology_list_restart: self.ext_primitive_topology_list_restart
                && other.ext_primitive_topology_list_restart,
            ext_private_data: self.ext_private_data && other.ext_private_data,
            ext_provoking_vertex: self.ext_provoking_vertex && other.ext_provoking_vertex,
            ext_queue_family_foreign: self.ext_queue_family_foreign
                && other.ext_queue_family_foreign,
            ext_robustness2: self.ext_robustness2 && other.ext_robustness2,
            ext_sample_locations: self.ext_sample_locations && other.ext_sample_locations,
            ext_sampler_filter_minmax: self.ext_sampler_filter_minmax
                && other.ext_sampler_filter_minmax,
            ext_scalar_block_layout: self.ext_scalar_block_layout && other.ext_scalar_block_layout,
            ext_separate_stencil_usage: self.ext_separate_stencil_usage
                && other.ext_separate_stencil_usage,
            ext_shader_atomic_float: self.ext_shader_atomic_float && other.ext_shader_atomic_float,
            ext_shader_atomic_float2: self.ext_shader_atomic_float2
                && other.ext_shader_atomic_float2,
            ext_shader_demote_to_helper_invocation: self.ext_shader_demote_to_helper_invocation
                && other.ext_shader_demote_to_helper_invocation,
            ext_shader_image_atomic_int64: self.ext_shader_image_atomic_int64
                && other.ext_shader_image_atomic_int64,
            ext_shader_stencil_export: self.ext_shader_stencil_export
                && other.ext_shader_stencil_export,
            ext_shader_subgroup_ballot: self.ext_shader_subgroup_ballot
                && other.ext_shader_subgroup_ballot,
            ext_shader_subgroup_vote: self.ext_shader_subgroup_vote
                && other.ext_shader_subgroup_vote,
            ext_shader_viewport_index_layer: self.ext_shader_viewport_index_layer
                && other.ext_shader_viewport_index_layer,
            ext_subgroup_size_control: self.ext_subgroup_size_control
                && other.ext_subgroup_size_control,
            ext_texel_buffer_alignment: self.ext_texel_buffer_alignment
                && other.ext_texel_buffer_alignment,
            ext_texture_compression_astc_hdr: self.ext_texture_compression_astc_hdr
                && other.ext_texture_compression_astc_hdr,
            ext_tooling_info: self.ext_tooling_info && other.ext_tooling_info,
            ext_transform_feedback: self.ext_transform_feedback && other.ext_transform_feedback,
            ext_validation_cache: self.ext_validation_cache && other.ext_validation_cache,
            ext_vertex_attribute_divisor: self.ext_vertex_attribute_divisor
                && other.ext_vertex_attribute_divisor,
            ext_vertex_input_dynamic_state: self.ext_vertex_input_dynamic_state
                && other.ext_vertex_input_dynamic_state,
            ext_video_decode_h264: self.ext_video_decode_h264 && other.ext_video_decode_h264,
            ext_video_decode_h265: self.ext_video_decode_h265 && other.ext_video_decode_h265,
            ext_video_encode_h264: self.ext_video_encode_h264 && other.ext_video_encode_h264,
            ext_ycbcr_2plane_444_formats: self.ext_ycbcr_2plane_444_formats
                && other.ext_ycbcr_2plane_444_formats,
            ext_ycbcr_image_arrays: self.ext_ycbcr_image_arrays && other.ext_ycbcr_image_arrays,
            amd_buffer_marker: self.amd_buffer_marker && other.amd_buffer_marker,
            amd_device_coherent_memory: self.amd_device_coherent_memory
                && other.amd_device_coherent_memory,
            amd_display_native_hdr: self.amd_display_native_hdr && other.amd_display_native_hdr,
            amd_draw_indirect_count: self.amd_draw_indirect_count && other.amd_draw_indirect_count,
            amd_gcn_shader: self.amd_gcn_shader && other.amd_gcn_shader,
            amd_gpu_shader_half_float: self.amd_gpu_shader_half_float
                && other.amd_gpu_shader_half_float,
            amd_gpu_shader_int16: self.amd_gpu_shader_int16 && other.amd_gpu_shader_int16,
            amd_memory_overallocation_behavior: self.amd_memory_overallocation_behavior
                && other.amd_memory_overallocation_behavior,
            amd_mixed_attachment_samples: self.amd_mixed_attachment_samples
                && other.amd_mixed_attachment_samples,
            amd_pipeline_compiler_control: self.amd_pipeline_compiler_control
                && other.amd_pipeline_compiler_control,
            amd_rasterization_order: self.amd_rasterization_order && other.amd_rasterization_order,
            amd_shader_ballot: self.amd_shader_ballot && other.amd_shader_ballot,
            amd_shader_core_properties: self.amd_shader_core_properties
                && other.amd_shader_core_properties,
            amd_shader_core_properties2: self.amd_shader_core_properties2
                && other.amd_shader_core_properties2,
            amd_shader_explicit_vertex_parameter: self.amd_shader_explicit_vertex_parameter
                && other.amd_shader_explicit_vertex_parameter,
            amd_shader_fragment_mask: self.amd_shader_fragment_mask
                && other.amd_shader_fragment_mask,
            amd_shader_image_load_store_lod: self.amd_shader_image_load_store_lod
                && other.amd_shader_image_load_store_lod,
            amd_shader_info: self.amd_shader_info && other.amd_shader_info,
            amd_shader_trinary_minmax: self.amd_shader_trinary_minmax
                && other.amd_shader_trinary_minmax,
            amd_texture_gather_bias_lod: self.amd_texture_gather_bias_lod
                && other.amd_texture_gather_bias_lod,
            android_external_memory_android_hardware_buffer: self
                .android_external_memory_android_hardware_buffer
                && other.android_external_memory_android_hardware_buffer,
            fuchsia_external_memory: self.fuchsia_external_memory && other.fuchsia_external_memory,
            fuchsia_external_semaphore: self.fuchsia_external_semaphore
                && other.fuchsia_external_semaphore,
            ggp_frame_token: self.ggp_frame_token && other.ggp_frame_token,
            google_decorate_string: self.google_decorate_string && other.google_decorate_string,
            google_display_timing: self.google_display_timing && other.google_display_timing,
            google_hlsl_functionality1: self.google_hlsl_functionality1
                && other.google_hlsl_functionality1,
            google_user_type: self.google_user_type && other.google_user_type,
            huawei_invocation_mask: self.huawei_invocation_mask && other.huawei_invocation_mask,
            huawei_subpass_shading: self.huawei_subpass_shading && other.huawei_subpass_shading,
            img_filter_cubic: self.img_filter_cubic && other.img_filter_cubic,
            img_format_pvrtc: self.img_format_pvrtc && other.img_format_pvrtc,
            intel_performance_query: self.intel_performance_query && other.intel_performance_query,
            intel_shader_integer_functions2: self.intel_shader_integer_functions2
                && other.intel_shader_integer_functions2,
            nvx_binary_import: self.nvx_binary_import && other.nvx_binary_import,
            nvx_image_view_handle: self.nvx_image_view_handle && other.nvx_image_view_handle,
            nvx_multiview_per_view_attributes: self.nvx_multiview_per_view_attributes
                && other.nvx_multiview_per_view_attributes,
            nv_acquire_winrt_display: self.nv_acquire_winrt_display
                && other.nv_acquire_winrt_display,
            nv_clip_space_w_scaling: self.nv_clip_space_w_scaling && other.nv_clip_space_w_scaling,
            nv_compute_shader_derivatives: self.nv_compute_shader_derivatives
                && other.nv_compute_shader_derivatives,
            nv_cooperative_matrix: self.nv_cooperative_matrix && other.nv_cooperative_matrix,
            nv_corner_sampled_image: self.nv_corner_sampled_image && other.nv_corner_sampled_image,
            nv_coverage_reduction_mode: self.nv_coverage_reduction_mode
                && other.nv_coverage_reduction_mode,
            nv_dedicated_allocation: self.nv_dedicated_allocation && other.nv_dedicated_allocation,
            nv_dedicated_allocation_image_aliasing: self.nv_dedicated_allocation_image_aliasing
                && other.nv_dedicated_allocation_image_aliasing,
            nv_device_diagnostic_checkpoints: self.nv_device_diagnostic_checkpoints
                && other.nv_device_diagnostic_checkpoints,
            nv_device_diagnostics_config: self.nv_device_diagnostics_config
                && other.nv_device_diagnostics_config,
            nv_device_generated_commands: self.nv_device_generated_commands
                && other.nv_device_generated_commands,
            nv_external_memory: self.nv_external_memory && other.nv_external_memory,
            nv_external_memory_rdma: self.nv_external_memory_rdma && other.nv_external_memory_rdma,
            nv_external_memory_win32: self.nv_external_memory_win32
                && other.nv_external_memory_win32,
            nv_fill_rectangle: self.nv_fill_rectangle && other.nv_fill_rectangle,
            nv_fragment_coverage_to_color: self.nv_fragment_coverage_to_color
                && other.nv_fragment_coverage_to_color,
            nv_fragment_shader_barycentric: self.nv_fragment_shader_barycentric
                && other.nv_fragment_shader_barycentric,
            nv_fragment_shading_rate_enums: self.nv_fragment_shading_rate_enums
                && other.nv_fragment_shading_rate_enums,
            nv_framebuffer_mixed_samples: self.nv_framebuffer_mixed_samples
                && other.nv_framebuffer_mixed_samples,
            nv_geometry_shader_passthrough: self.nv_geometry_shader_passthrough
                && other.nv_geometry_shader_passthrough,
            nv_glsl_shader: self.nv_glsl_shader && other.nv_glsl_shader,
            nv_inherited_viewport_scissor: self.nv_inherited_viewport_scissor
                && other.nv_inherited_viewport_scissor,
            nv_mesh_shader: self.nv_mesh_shader && other.nv_mesh_shader,
            nv_ray_tracing: self.nv_ray_tracing && other.nv_ray_tracing,
            nv_ray_tracing_motion_blur: self.nv_ray_tracing_motion_blur
                && other.nv_ray_tracing_motion_blur,
            nv_representative_fragment_test: self.nv_representative_fragment_test
                && other.nv_representative_fragment_test,
            nv_sample_mask_override_coverage: self.nv_sample_mask_override_coverage
                && other.nv_sample_mask_override_coverage,
            nv_scissor_exclusive: self.nv_scissor_exclusive && other.nv_scissor_exclusive,
            nv_shader_image_footprint: self.nv_shader_image_footprint
                && other.nv_shader_image_footprint,
            nv_shader_sm_builtins: self.nv_shader_sm_builtins && other.nv_shader_sm_builtins,
            nv_shader_subgroup_partitioned: self.nv_shader_subgroup_partitioned
                && other.nv_shader_subgroup_partitioned,
            nv_shading_rate_image: self.nv_shading_rate_image && other.nv_shading_rate_image,
            nv_viewport_array2: self.nv_viewport_array2 && other.nv_viewport_array2,
            nv_viewport_swizzle: self.nv_viewport_swizzle && other.nv_viewport_swizzle,
            nv_win32_keyed_mutex: self.nv_win32_keyed_mutex && other.nv_win32_keyed_mutex,
            qcom_render_pass_shader_resolve: self.qcom_render_pass_shader_resolve
                && other.qcom_render_pass_shader_resolve,
            qcom_render_pass_store_ops: self.qcom_render_pass_store_ops
                && other.qcom_render_pass_store_ops,
            qcom_render_pass_transform: self.qcom_render_pass_transform
                && other.qcom_render_pass_transform,
            qcom_rotated_copy_commands: self.qcom_rotated_copy_commands
                && other.qcom_rotated_copy_commands,
            valve_mutable_descriptor_type: self.valve_mutable_descriptor_type
                && other.valve_mutable_descriptor_type,
            _unbuildable: Unbuildable(()),
        }
    }
    #[doc = r" Returns the difference of another list from this list."]
    #[inline]
    pub const fn difference(&self, other: &Self) -> Self {
        Self {
            khr_16bit_storage: self.khr_16bit_storage && !other.khr_16bit_storage,
            khr_8bit_storage: self.khr_8bit_storage && !other.khr_8bit_storage,
            khr_acceleration_structure: self.khr_acceleration_structure
                && !other.khr_acceleration_structure,
            khr_bind_memory2: self.khr_bind_memory2 && !other.khr_bind_memory2,
            khr_buffer_device_address: self.khr_buffer_device_address
                && !other.khr_buffer_device_address,
            khr_copy_commands2: self.khr_copy_commands2 && !other.khr_copy_commands2,
            khr_create_renderpass2: self.khr_create_renderpass2 && !other.khr_create_renderpass2,
            khr_dedicated_allocation: self.khr_dedicated_allocation
                && !other.khr_dedicated_allocation,
            khr_deferred_host_operations: self.khr_deferred_host_operations
                && !other.khr_deferred_host_operations,
            khr_depth_stencil_resolve: self.khr_depth_stencil_resolve
                && !other.khr_depth_stencil_resolve,
            khr_descriptor_update_template: self.khr_descriptor_update_template
                && !other.khr_descriptor_update_template,
            khr_device_group: self.khr_device_group && !other.khr_device_group,
            khr_display_swapchain: self.khr_display_swapchain && !other.khr_display_swapchain,
            khr_draw_indirect_count: self.khr_draw_indirect_count && !other.khr_draw_indirect_count,
            khr_driver_properties: self.khr_driver_properties && !other.khr_driver_properties,
            khr_external_fence: self.khr_external_fence && !other.khr_external_fence,
            khr_external_fence_fd: self.khr_external_fence_fd && !other.khr_external_fence_fd,
            khr_external_fence_win32: self.khr_external_fence_win32
                && !other.khr_external_fence_win32,
            khr_external_memory: self.khr_external_memory && !other.khr_external_memory,
            khr_external_memory_fd: self.khr_external_memory_fd && !other.khr_external_memory_fd,
            khr_external_memory_win32: self.khr_external_memory_win32
                && !other.khr_external_memory_win32,
            khr_external_semaphore: self.khr_external_semaphore && !other.khr_external_semaphore,
            khr_external_semaphore_fd: self.khr_external_semaphore_fd
                && !other.khr_external_semaphore_fd,
            khr_external_semaphore_win32: self.khr_external_semaphore_win32
                && !other.khr_external_semaphore_win32,
            khr_fragment_shading_rate: self.khr_fragment_shading_rate
                && !other.khr_fragment_shading_rate,
            khr_get_memory_requirements2: self.khr_get_memory_requirements2
                && !other.khr_get_memory_requirements2,
            khr_image_format_list: self.khr_image_format_list && !other.khr_image_format_list,
            khr_imageless_framebuffer: self.khr_imageless_framebuffer
                && !other.khr_imageless_framebuffer,
            khr_incremental_present: self.khr_incremental_present && !other.khr_incremental_present,
            khr_maintenance1: self.khr_maintenance1 && !other.khr_maintenance1,
            khr_maintenance2: self.khr_maintenance2 && !other.khr_maintenance2,
            khr_maintenance3: self.khr_maintenance3 && !other.khr_maintenance3,
            khr_multiview: self.khr_multiview && !other.khr_multiview,
            khr_performance_query: self.khr_performance_query && !other.khr_performance_query,
            khr_pipeline_executable_properties: self.khr_pipeline_executable_properties
                && !other.khr_pipeline_executable_properties,
            khr_pipeline_library: self.khr_pipeline_library && !other.khr_pipeline_library,
            khr_portability_subset: self.khr_portability_subset && !other.khr_portability_subset,
            khr_present_id: self.khr_present_id && !other.khr_present_id,
            khr_present_wait: self.khr_present_wait && !other.khr_present_wait,
            khr_push_descriptor: self.khr_push_descriptor && !other.khr_push_descriptor,
            khr_ray_query: self.khr_ray_query && !other.khr_ray_query,
            khr_ray_tracing_pipeline: self.khr_ray_tracing_pipeline
                && !other.khr_ray_tracing_pipeline,
            khr_relaxed_block_layout: self.khr_relaxed_block_layout
                && !other.khr_relaxed_block_layout,
            khr_sampler_mirror_clamp_to_edge: self.khr_sampler_mirror_clamp_to_edge
                && !other.khr_sampler_mirror_clamp_to_edge,
            khr_sampler_ycbcr_conversion: self.khr_sampler_ycbcr_conversion
                && !other.khr_sampler_ycbcr_conversion,
            khr_separate_depth_stencil_layouts: self.khr_separate_depth_stencil_layouts
                && !other.khr_separate_depth_stencil_layouts,
            khr_shader_atomic_int64: self.khr_shader_atomic_int64 && !other.khr_shader_atomic_int64,
            khr_shader_clock: self.khr_shader_clock && !other.khr_shader_clock,
            khr_shader_draw_parameters: self.khr_shader_draw_parameters
                && !other.khr_shader_draw_parameters,
            khr_shader_float16_int8: self.khr_shader_float16_int8 && !other.khr_shader_float16_int8,
            khr_shader_float_controls: self.khr_shader_float_controls
                && !other.khr_shader_float_controls,
            khr_shader_integer_dot_product: self.khr_shader_integer_dot_product
                && !other.khr_shader_integer_dot_product,
            khr_shader_non_semantic_info: self.khr_shader_non_semantic_info
                && !other.khr_shader_non_semantic_info,
            khr_shader_subgroup_extended_types: self.khr_shader_subgroup_extended_types
                && !other.khr_shader_subgroup_extended_types,
            khr_shader_subgroup_uniform_control_flow: self.khr_shader_subgroup_uniform_control_flow
                && !other.khr_shader_subgroup_uniform_control_flow,
            khr_shader_terminate_invocation: self.khr_shader_terminate_invocation
                && !other.khr_shader_terminate_invocation,
            khr_shared_presentable_image: self.khr_shared_presentable_image
                && !other.khr_shared_presentable_image,
            khr_spirv_1_4: self.khr_spirv_1_4 && !other.khr_spirv_1_4,
            khr_storage_buffer_storage_class: self.khr_storage_buffer_storage_class
                && !other.khr_storage_buffer_storage_class,
            khr_swapchain: self.khr_swapchain && !other.khr_swapchain,
            khr_swapchain_mutable_format: self.khr_swapchain_mutable_format
                && !other.khr_swapchain_mutable_format,
            khr_synchronization2: self.khr_synchronization2 && !other.khr_synchronization2,
            khr_timeline_semaphore: self.khr_timeline_semaphore && !other.khr_timeline_semaphore,
            khr_uniform_buffer_standard_layout: self.khr_uniform_buffer_standard_layout
                && !other.khr_uniform_buffer_standard_layout,
            khr_variable_pointers: self.khr_variable_pointers && !other.khr_variable_pointers,
            khr_video_decode_queue: self.khr_video_decode_queue && !other.khr_video_decode_queue,
            khr_video_encode_queue: self.khr_video_encode_queue && !other.khr_video_encode_queue,
            khr_video_queue: self.khr_video_queue && !other.khr_video_queue,
            khr_vulkan_memory_model: self.khr_vulkan_memory_model && !other.khr_vulkan_memory_model,
            khr_win32_keyed_mutex: self.khr_win32_keyed_mutex && !other.khr_win32_keyed_mutex,
            khr_workgroup_memory_explicit_layout: self.khr_workgroup_memory_explicit_layout
                && !other.khr_workgroup_memory_explicit_layout,
            khr_zero_initialize_workgroup_memory: self.khr_zero_initialize_workgroup_memory
                && !other.khr_zero_initialize_workgroup_memory,
            ext_4444_formats: self.ext_4444_formats && !other.ext_4444_formats,
            ext_astc_decode_mode: self.ext_astc_decode_mode && !other.ext_astc_decode_mode,
            ext_blend_operation_advanced: self.ext_blend_operation_advanced
                && !other.ext_blend_operation_advanced,
            ext_buffer_device_address: self.ext_buffer_device_address
                && !other.ext_buffer_device_address,
            ext_calibrated_timestamps: self.ext_calibrated_timestamps
                && !other.ext_calibrated_timestamps,
            ext_color_write_enable: self.ext_color_write_enable && !other.ext_color_write_enable,
            ext_conditional_rendering: self.ext_conditional_rendering
                && !other.ext_conditional_rendering,
            ext_conservative_rasterization: self.ext_conservative_rasterization
                && !other.ext_conservative_rasterization,
            ext_custom_border_color: self.ext_custom_border_color && !other.ext_custom_border_color,
            ext_debug_marker: self.ext_debug_marker && !other.ext_debug_marker,
            ext_depth_clip_enable: self.ext_depth_clip_enable && !other.ext_depth_clip_enable,
            ext_depth_range_unrestricted: self.ext_depth_range_unrestricted
                && !other.ext_depth_range_unrestricted,
            ext_descriptor_indexing: self.ext_descriptor_indexing && !other.ext_descriptor_indexing,
            ext_device_memory_report: self.ext_device_memory_report
                && !other.ext_device_memory_report,
            ext_discard_rectangles: self.ext_discard_rectangles && !other.ext_discard_rectangles,
            ext_display_control: self.ext_display_control && !other.ext_display_control,
            ext_extended_dynamic_state: self.ext_extended_dynamic_state
                && !other.ext_extended_dynamic_state,
            ext_extended_dynamic_state2: self.ext_extended_dynamic_state2
                && !other.ext_extended_dynamic_state2,
            ext_external_memory_dma_buf: self.ext_external_memory_dma_buf
                && !other.ext_external_memory_dma_buf,
            ext_external_memory_host: self.ext_external_memory_host
                && !other.ext_external_memory_host,
            ext_filter_cubic: self.ext_filter_cubic && !other.ext_filter_cubic,
            ext_fragment_density_map: self.ext_fragment_density_map
                && !other.ext_fragment_density_map,
            ext_fragment_density_map2: self.ext_fragment_density_map2
                && !other.ext_fragment_density_map2,
            ext_fragment_shader_interlock: self.ext_fragment_shader_interlock
                && !other.ext_fragment_shader_interlock,
            ext_full_screen_exclusive: self.ext_full_screen_exclusive
                && !other.ext_full_screen_exclusive,
            ext_global_priority: self.ext_global_priority && !other.ext_global_priority,
            ext_global_priority_query: self.ext_global_priority_query
                && !other.ext_global_priority_query,
            ext_hdr_metadata: self.ext_hdr_metadata && !other.ext_hdr_metadata,
            ext_host_query_reset: self.ext_host_query_reset && !other.ext_host_query_reset,
            ext_image_drm_format_modifier: self.ext_image_drm_format_modifier
                && !other.ext_image_drm_format_modifier,
            ext_image_robustness: self.ext_image_robustness && !other.ext_image_robustness,
            ext_index_type_uint8: self.ext_index_type_uint8 && !other.ext_index_type_uint8,
            ext_inline_uniform_block: self.ext_inline_uniform_block
                && !other.ext_inline_uniform_block,
            ext_line_rasterization: self.ext_line_rasterization && !other.ext_line_rasterization,
            ext_load_store_op_none: self.ext_load_store_op_none && !other.ext_load_store_op_none,
            ext_memory_budget: self.ext_memory_budget && !other.ext_memory_budget,
            ext_memory_priority: self.ext_memory_priority && !other.ext_memory_priority,
            ext_multi_draw: self.ext_multi_draw && !other.ext_multi_draw,
            ext_pageable_device_local_memory: self.ext_pageable_device_local_memory
                && !other.ext_pageable_device_local_memory,
            ext_pci_bus_info: self.ext_pci_bus_info && !other.ext_pci_bus_info,
            ext_physical_device_drm: self.ext_physical_device_drm && !other.ext_physical_device_drm,
            ext_pipeline_creation_cache_control: self.ext_pipeline_creation_cache_control
                && !other.ext_pipeline_creation_cache_control,
            ext_pipeline_creation_feedback: self.ext_pipeline_creation_feedback
                && !other.ext_pipeline_creation_feedback,
            ext_post_depth_coverage: self.ext_post_depth_coverage && !other.ext_post_depth_coverage,
            ext_primitive_topology_list_restart: self.ext_primitive_topology_list_restart
                && !other.ext_primitive_topology_list_restart,
            ext_private_data: self.ext_private_data && !other.ext_private_data,
            ext_provoking_vertex: self.ext_provoking_vertex && !other.ext_provoking_vertex,
            ext_queue_family_foreign: self.ext_queue_family_foreign
                && !other.ext_queue_family_foreign,
            ext_robustness2: self.ext_robustness2 && !other.ext_robustness2,
            ext_sample_locations: self.ext_sample_locations && !other.ext_sample_locations,
            ext_sampler_filter_minmax: self.ext_sampler_filter_minmax
                && !other.ext_sampler_filter_minmax,
            ext_scalar_block_layout: self.ext_scalar_block_layout && !other.ext_scalar_block_layout,
            ext_separate_stencil_usage: self.ext_separate_stencil_usage
                && !other.ext_separate_stencil_usage,
            ext_shader_atomic_float: self.ext_shader_atomic_float && !other.ext_shader_atomic_float,
            ext_shader_atomic_float2: self.ext_shader_atomic_float2
                && !other.ext_shader_atomic_float2,
            ext_shader_demote_to_helper_invocation: self.ext_shader_demote_to_helper_invocation
                && !other.ext_shader_demote_to_helper_invocation,
            ext_shader_image_atomic_int64: self.ext_shader_image_atomic_int64
                && !other.ext_shader_image_atomic_int64,
            ext_shader_stencil_export: self.ext_shader_stencil_export
                && !other.ext_shader_stencil_export,
            ext_shader_subgroup_ballot: self.ext_shader_subgroup_ballot
                && !other.ext_shader_subgroup_ballot,
            ext_shader_subgroup_vote: self.ext_shader_subgroup_vote
                && !other.ext_shader_subgroup_vote,
            ext_shader_viewport_index_layer: self.ext_shader_viewport_index_layer
                && !other.ext_shader_viewport_index_layer,
            ext_subgroup_size_control: self.ext_subgroup_size_control
                && !other.ext_subgroup_size_control,
            ext_texel_buffer_alignment: self.ext_texel_buffer_alignment
                && !other.ext_texel_buffer_alignment,
            ext_texture_compression_astc_hdr: self.ext_texture_compression_astc_hdr
                && !other.ext_texture_compression_astc_hdr,
            ext_tooling_info: self.ext_tooling_info && !other.ext_tooling_info,
            ext_transform_feedback: self.ext_transform_feedback && !other.ext_transform_feedback,
            ext_validation_cache: self.ext_validation_cache && !other.ext_validation_cache,
            ext_vertex_attribute_divisor: self.ext_vertex_attribute_divisor
                && !other.ext_vertex_attribute_divisor,
            ext_vertex_input_dynamic_state: self.ext_vertex_input_dynamic_state
                && !other.ext_vertex_input_dynamic_state,
            ext_video_decode_h264: self.ext_video_decode_h264 && !other.ext_video_decode_h264,
            ext_video_decode_h265: self.ext_video_decode_h265 && !other.ext_video_decode_h265,
            ext_video_encode_h264: self.ext_video_encode_h264 && !other.ext_video_encode_h264,
            ext_ycbcr_2plane_444_formats: self.ext_ycbcr_2plane_444_formats
                && !other.ext_ycbcr_2plane_444_formats,
            ext_ycbcr_image_arrays: self.ext_ycbcr_image_arrays && !other.ext_ycbcr_image_arrays,
            amd_buffer_marker: self.amd_buffer_marker && !other.amd_buffer_marker,
            amd_device_coherent_memory: self.amd_device_coherent_memory
                && !other.amd_device_coherent_memory,
            amd_display_native_hdr: self.amd_display_native_hdr && !other.amd_display_native_hdr,
            amd_draw_indirect_count: self.amd_draw_indirect_count && !other.amd_draw_indirect_count,
            amd_gcn_shader: self.amd_gcn_shader && !other.amd_gcn_shader,
            amd_gpu_shader_half_float: self.amd_gpu_shader_half_float
                && !other.amd_gpu_shader_half_float,
            amd_gpu_shader_int16: self.amd_gpu_shader_int16 && !other.amd_gpu_shader_int16,
            amd_memory_overallocation_behavior: self.amd_memory_overallocation_behavior
                && !other.amd_memory_overallocation_behavior,
            amd_mixed_attachment_samples: self.amd_mixed_attachment_samples
                && !other.amd_mixed_attachment_samples,
            amd_pipeline_compiler_control: self.amd_pipeline_compiler_control
                && !other.amd_pipeline_compiler_control,
            amd_rasterization_order: self.amd_rasterization_order && !other.amd_rasterization_order,
            amd_shader_ballot: self.amd_shader_ballot && !other.amd_shader_ballot,
            amd_shader_core_properties: self.amd_shader_core_properties
                && !other.amd_shader_core_properties,
            amd_shader_core_properties2: self.amd_shader_core_properties2
                && !other.amd_shader_core_properties2,
            amd_shader_explicit_vertex_parameter: self.amd_shader_explicit_vertex_parameter
                && !other.amd_shader_explicit_vertex_parameter,
            amd_shader_fragment_mask: self.amd_shader_fragment_mask
                && !other.amd_shader_fragment_mask,
            amd_shader_image_load_store_lod: self.amd_shader_image_load_store_lod
                && !other.amd_shader_image_load_store_lod,
            amd_shader_info: self.amd_shader_info && !other.amd_shader_info,
            amd_shader_trinary_minmax: self.amd_shader_trinary_minmax
                && !other.amd_shader_trinary_minmax,
            amd_texture_gather_bias_lod: self.amd_texture_gather_bias_lod
                && !other.amd_texture_gather_bias_lod,
            android_external_memory_android_hardware_buffer: self
                .android_external_memory_android_hardware_buffer
                && !other.android_external_memory_android_hardware_buffer,
            fuchsia_external_memory: self.fuchsia_external_memory && !other.fuchsia_external_memory,
            fuchsia_external_semaphore: self.fuchsia_external_semaphore
                && !other.fuchsia_external_semaphore,
            ggp_frame_token: self.ggp_frame_token && !other.ggp_frame_token,
            google_decorate_string: self.google_decorate_string && !other.google_decorate_string,
            google_display_timing: self.google_display_timing && !other.google_display_timing,
            google_hlsl_functionality1: self.google_hlsl_functionality1
                && !other.google_hlsl_functionality1,
            google_user_type: self.google_user_type && !other.google_user_type,
            huawei_invocation_mask: self.huawei_invocation_mask && !other.huawei_invocation_mask,
            huawei_subpass_shading: self.huawei_subpass_shading && !other.huawei_subpass_shading,
            img_filter_cubic: self.img_filter_cubic && !other.img_filter_cubic,
            img_format_pvrtc: self.img_format_pvrtc && !other.img_format_pvrtc,
            intel_performance_query: self.intel_performance_query && !other.intel_performance_query,
            intel_shader_integer_functions2: self.intel_shader_integer_functions2
                && !other.intel_shader_integer_functions2,
            nvx_binary_import: self.nvx_binary_import && !other.nvx_binary_import,
            nvx_image_view_handle: self.nvx_image_view_handle && !other.nvx_image_view_handle,
            nvx_multiview_per_view_attributes: self.nvx_multiview_per_view_attributes
                && !other.nvx_multiview_per_view_attributes,
            nv_acquire_winrt_display: self.nv_acquire_winrt_display
                && !other.nv_acquire_winrt_display,
            nv_clip_space_w_scaling: self.nv_clip_space_w_scaling && !other.nv_clip_space_w_scaling,
            nv_compute_shader_derivatives: self.nv_compute_shader_derivatives
                && !other.nv_compute_shader_derivatives,
            nv_cooperative_matrix: self.nv_cooperative_matrix && !other.nv_cooperative_matrix,
            nv_corner_sampled_image: self.nv_corner_sampled_image && !other.nv_corner_sampled_image,
            nv_coverage_reduction_mode: self.nv_coverage_reduction_mode
                && !other.nv_coverage_reduction_mode,
            nv_dedicated_allocation: self.nv_dedicated_allocation && !other.nv_dedicated_allocation,
            nv_dedicated_allocation_image_aliasing: self.nv_dedicated_allocation_image_aliasing
                && !other.nv_dedicated_allocation_image_aliasing,
            nv_device_diagnostic_checkpoints: self.nv_device_diagnostic_checkpoints
                && !other.nv_device_diagnostic_checkpoints,
            nv_device_diagnostics_config: self.nv_device_diagnostics_config
                && !other.nv_device_diagnostics_config,
            nv_device_generated_commands: self.nv_device_generated_commands
                && !other.nv_device_generated_commands,
            nv_external_memory: self.nv_external_memory && !other.nv_external_memory,
            nv_external_memory_rdma: self.nv_external_memory_rdma && !other.nv_external_memory_rdma,
            nv_external_memory_win32: self.nv_external_memory_win32
                && !other.nv_external_memory_win32,
            nv_fill_rectangle: self.nv_fill_rectangle && !other.nv_fill_rectangle,
            nv_fragment_coverage_to_color: self.nv_fragment_coverage_to_color
                && !other.nv_fragment_coverage_to_color,
            nv_fragment_shader_barycentric: self.nv_fragment_shader_barycentric
                && !other.nv_fragment_shader_barycentric,
            nv_fragment_shading_rate_enums: self.nv_fragment_shading_rate_enums
                && !other.nv_fragment_shading_rate_enums,
            nv_framebuffer_mixed_samples: self.nv_framebuffer_mixed_samples
                && !other.nv_framebuffer_mixed_samples,
            nv_geometry_shader_passthrough: self.nv_geometry_shader_passthrough
                && !other.nv_geometry_shader_passthrough,
            nv_glsl_shader: self.nv_glsl_shader && !other.nv_glsl_shader,
            nv_inherited_viewport_scissor: self.nv_inherited_viewport_scissor
                && !other.nv_inherited_viewport_scissor,
            nv_mesh_shader: self.nv_mesh_shader && !other.nv_mesh_shader,
            nv_ray_tracing: self.nv_ray_tracing && !other.nv_ray_tracing,
            nv_ray_tracing_motion_blur: self.nv_ray_tracing_motion_blur
                && !other.nv_ray_tracing_motion_blur,
            nv_representative_fragment_test: self.nv_representative_fragment_test
                && !other.nv_representative_fragment_test,
            nv_sample_mask_override_coverage: self.nv_sample_mask_override_coverage
                && !other.nv_sample_mask_override_coverage,
            nv_scissor_exclusive: self.nv_scissor_exclusive && !other.nv_scissor_exclusive,
            nv_shader_image_footprint: self.nv_shader_image_footprint
                && !other.nv_shader_image_footprint,
            nv_shader_sm_builtins: self.nv_shader_sm_builtins && !other.nv_shader_sm_builtins,
            nv_shader_subgroup_partitioned: self.nv_shader_subgroup_partitioned
                && !other.nv_shader_subgroup_partitioned,
            nv_shading_rate_image: self.nv_shading_rate_image && !other.nv_shading_rate_image,
            nv_viewport_array2: self.nv_viewport_array2 && !other.nv_viewport_array2,
            nv_viewport_swizzle: self.nv_viewport_swizzle && !other.nv_viewport_swizzle,
            nv_win32_keyed_mutex: self.nv_win32_keyed_mutex && !other.nv_win32_keyed_mutex,
            qcom_render_pass_shader_resolve: self.qcom_render_pass_shader_resolve
                && !other.qcom_render_pass_shader_resolve,
            qcom_render_pass_store_ops: self.qcom_render_pass_store_ops
                && !other.qcom_render_pass_store_ops,
            qcom_render_pass_transform: self.qcom_render_pass_transform
                && !other.qcom_render_pass_transform,
            qcom_rotated_copy_commands: self.qcom_rotated_copy_commands
                && !other.qcom_rotated_copy_commands,
            valve_mutable_descriptor_type: self.valve_mutable_descriptor_type
                && !other.valve_mutable_descriptor_type,
            _unbuildable: Unbuildable(()),
        }
    }
}
impl std::fmt::Debug for DeviceExtensions {
    #[allow(unused_assignments)]
    fn fmt(&self, f: &mut Formatter) -> std::fmt::Result {
        write!(f, "[")?;
        let mut first = true;
        if self.khr_16bit_storage {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_16bit_storage")?;
        }
        if self.khr_8bit_storage {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_8bit_storage")?;
        }
        if self.khr_acceleration_structure {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_acceleration_structure")?;
        }
        if self.khr_bind_memory2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_bind_memory2")?;
        }
        if self.khr_buffer_device_address {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_buffer_device_address")?;
        }
        if self.khr_copy_commands2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_copy_commands2")?;
        }
        if self.khr_create_renderpass2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_create_renderpass2")?;
        }
        if self.khr_dedicated_allocation {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_dedicated_allocation")?;
        }
        if self.khr_deferred_host_operations {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_deferred_host_operations")?;
        }
        if self.khr_depth_stencil_resolve {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_depth_stencil_resolve")?;
        }
        if self.khr_descriptor_update_template {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_descriptor_update_template")?;
        }
        if self.khr_device_group {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_device_group")?;
        }
        if self.khr_display_swapchain {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_display_swapchain")?;
        }
        if self.khr_draw_indirect_count {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_draw_indirect_count")?;
        }
        if self.khr_driver_properties {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_driver_properties")?;
        }
        if self.khr_external_fence {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_fence")?;
        }
        if self.khr_external_fence_fd {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_fence_fd")?;
        }
        if self.khr_external_fence_win32 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_fence_win32")?;
        }
        if self.khr_external_memory {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_memory")?;
        }
        if self.khr_external_memory_fd {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_memory_fd")?;
        }
        if self.khr_external_memory_win32 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_memory_win32")?;
        }
        if self.khr_external_semaphore {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_semaphore")?;
        }
        if self.khr_external_semaphore_fd {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_semaphore_fd")?;
        }
        if self.khr_external_semaphore_win32 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_external_semaphore_win32")?;
        }
        if self.khr_fragment_shading_rate {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_fragment_shading_rate")?;
        }
        if self.khr_get_memory_requirements2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_get_memory_requirements2")?;
        }
        if self.khr_image_format_list {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_image_format_list")?;
        }
        if self.khr_imageless_framebuffer {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_imageless_framebuffer")?;
        }
        if self.khr_incremental_present {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_incremental_present")?;
        }
        if self.khr_maintenance1 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_maintenance1")?;
        }
        if self.khr_maintenance2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_maintenance2")?;
        }
        if self.khr_maintenance3 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_maintenance3")?;
        }
        if self.khr_multiview {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_multiview")?;
        }
        if self.khr_performance_query {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_performance_query")?;
        }
        if self.khr_pipeline_executable_properties {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_pipeline_executable_properties")?;
        }
        if self.khr_pipeline_library {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_pipeline_library")?;
        }
        if self.khr_portability_subset {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_portability_subset")?;
        }
        if self.khr_present_id {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_present_id")?;
        }
        if self.khr_present_wait {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_present_wait")?;
        }
        if self.khr_push_descriptor {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_push_descriptor")?;
        }
        if self.khr_ray_query {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_ray_query")?;
        }
        if self.khr_ray_tracing_pipeline {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_ray_tracing_pipeline")?;
        }
        if self.khr_relaxed_block_layout {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_relaxed_block_layout")?;
        }
        if self.khr_sampler_mirror_clamp_to_edge {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_sampler_mirror_clamp_to_edge")?;
        }
        if self.khr_sampler_ycbcr_conversion {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_sampler_ycbcr_conversion")?;
        }
        if self.khr_separate_depth_stencil_layouts {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_separate_depth_stencil_layouts")?;
        }
        if self.khr_shader_atomic_int64 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_atomic_int64")?;
        }
        if self.khr_shader_clock {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_clock")?;
        }
        if self.khr_shader_draw_parameters {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_draw_parameters")?;
        }
        if self.khr_shader_float16_int8 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_float16_int8")?;
        }
        if self.khr_shader_float_controls {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_float_controls")?;
        }
        if self.khr_shader_integer_dot_product {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_integer_dot_product")?;
        }
        if self.khr_shader_non_semantic_info {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_non_semantic_info")?;
        }
        if self.khr_shader_subgroup_extended_types {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_subgroup_extended_types")?;
        }
        if self.khr_shader_subgroup_uniform_control_flow {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_subgroup_uniform_control_flow")?;
        }
        if self.khr_shader_terminate_invocation {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shader_terminate_invocation")?;
        }
        if self.khr_shared_presentable_image {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_shared_presentable_image")?;
        }
        if self.khr_spirv_1_4 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_spirv_1_4")?;
        }
        if self.khr_storage_buffer_storage_class {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_storage_buffer_storage_class")?;
        }
        if self.khr_swapchain {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_swapchain")?;
        }
        if self.khr_swapchain_mutable_format {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_swapchain_mutable_format")?;
        }
        if self.khr_synchronization2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_synchronization2")?;
        }
        if self.khr_timeline_semaphore {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_timeline_semaphore")?;
        }
        if self.khr_uniform_buffer_standard_layout {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_uniform_buffer_standard_layout")?;
        }
        if self.khr_variable_pointers {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_variable_pointers")?;
        }
        if self.khr_video_decode_queue {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_video_decode_queue")?;
        }
        if self.khr_video_encode_queue {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_video_encode_queue")?;
        }
        if self.khr_video_queue {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_video_queue")?;
        }
        if self.khr_vulkan_memory_model {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_vulkan_memory_model")?;
        }
        if self.khr_win32_keyed_mutex {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_win32_keyed_mutex")?;
        }
        if self.khr_workgroup_memory_explicit_layout {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_workgroup_memory_explicit_layout")?;
        }
        if self.khr_zero_initialize_workgroup_memory {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_KHR_zero_initialize_workgroup_memory")?;
        }
        if self.ext_4444_formats {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_4444_formats")?;
        }
        if self.ext_astc_decode_mode {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_astc_decode_mode")?;
        }
        if self.ext_blend_operation_advanced {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_blend_operation_advanced")?;
        }
        if self.ext_buffer_device_address {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_buffer_device_address")?;
        }
        if self.ext_calibrated_timestamps {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_calibrated_timestamps")?;
        }
        if self.ext_color_write_enable {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_color_write_enable")?;
        }
        if self.ext_conditional_rendering {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_conditional_rendering")?;
        }
        if self.ext_conservative_rasterization {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_conservative_rasterization")?;
        }
        if self.ext_custom_border_color {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_custom_border_color")?;
        }
        if self.ext_debug_marker {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_debug_marker")?;
        }
        if self.ext_depth_clip_enable {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_depth_clip_enable")?;
        }
        if self.ext_depth_range_unrestricted {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_depth_range_unrestricted")?;
        }
        if self.ext_descriptor_indexing {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_descriptor_indexing")?;
        }
        if self.ext_device_memory_report {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_device_memory_report")?;
        }
        if self.ext_discard_rectangles {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_discard_rectangles")?;
        }
        if self.ext_display_control {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_display_control")?;
        }
        if self.ext_extended_dynamic_state {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_extended_dynamic_state")?;
        }
        if self.ext_extended_dynamic_state2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_extended_dynamic_state2")?;
        }
        if self.ext_external_memory_dma_buf {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_external_memory_dma_buf")?;
        }
        if self.ext_external_memory_host {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_external_memory_host")?;
        }
        if self.ext_filter_cubic {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_filter_cubic")?;
        }
        if self.ext_fragment_density_map {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_fragment_density_map")?;
        }
        if self.ext_fragment_density_map2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_fragment_density_map2")?;
        }
        if self.ext_fragment_shader_interlock {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_fragment_shader_interlock")?;
        }
        if self.ext_full_screen_exclusive {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_full_screen_exclusive")?;
        }
        if self.ext_global_priority {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_global_priority")?;
        }
        if self.ext_global_priority_query {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_global_priority_query")?;
        }
        if self.ext_hdr_metadata {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_hdr_metadata")?;
        }
        if self.ext_host_query_reset {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_host_query_reset")?;
        }
        if self.ext_image_drm_format_modifier {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_image_drm_format_modifier")?;
        }
        if self.ext_image_robustness {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_image_robustness")?;
        }
        if self.ext_index_type_uint8 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_index_type_uint8")?;
        }
        if self.ext_inline_uniform_block {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_inline_uniform_block")?;
        }
        if self.ext_line_rasterization {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_line_rasterization")?;
        }
        if self.ext_load_store_op_none {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_load_store_op_none")?;
        }
        if self.ext_memory_budget {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_memory_budget")?;
        }
        if self.ext_memory_priority {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_memory_priority")?;
        }
        if self.ext_multi_draw {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_multi_draw")?;
        }
        if self.ext_pageable_device_local_memory {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_pageable_device_local_memory")?;
        }
        if self.ext_pci_bus_info {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_pci_bus_info")?;
        }
        if self.ext_physical_device_drm {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_physical_device_drm")?;
        }
        if self.ext_pipeline_creation_cache_control {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_pipeline_creation_cache_control")?;
        }
        if self.ext_pipeline_creation_feedback {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_pipeline_creation_feedback")?;
        }
        if self.ext_post_depth_coverage {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_post_depth_coverage")?;
        }
        if self.ext_primitive_topology_list_restart {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_primitive_topology_list_restart")?;
        }
        if self.ext_private_data {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_private_data")?;
        }
        if self.ext_provoking_vertex {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_provoking_vertex")?;
        }
        if self.ext_queue_family_foreign {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_queue_family_foreign")?;
        }
        if self.ext_robustness2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_robustness2")?;
        }
        if self.ext_sample_locations {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_sample_locations")?;
        }
        if self.ext_sampler_filter_minmax {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_sampler_filter_minmax")?;
        }
        if self.ext_scalar_block_layout {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_scalar_block_layout")?;
        }
        if self.ext_separate_stencil_usage {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_separate_stencil_usage")?;
        }
        if self.ext_shader_atomic_float {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_atomic_float")?;
        }
        if self.ext_shader_atomic_float2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_atomic_float2")?;
        }
        if self.ext_shader_demote_to_helper_invocation {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_demote_to_helper_invocation")?;
        }
        if self.ext_shader_image_atomic_int64 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_image_atomic_int64")?;
        }
        if self.ext_shader_stencil_export {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_stencil_export")?;
        }
        if self.ext_shader_subgroup_ballot {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_subgroup_ballot")?;
        }
        if self.ext_shader_subgroup_vote {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_subgroup_vote")?;
        }
        if self.ext_shader_viewport_index_layer {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_shader_viewport_index_layer")?;
        }
        if self.ext_subgroup_size_control {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_subgroup_size_control")?;
        }
        if self.ext_texel_buffer_alignment {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_texel_buffer_alignment")?;
        }
        if self.ext_texture_compression_astc_hdr {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_texture_compression_astc_hdr")?;
        }
        if self.ext_tooling_info {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_tooling_info")?;
        }
        if self.ext_transform_feedback {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_transform_feedback")?;
        }
        if self.ext_validation_cache {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_validation_cache")?;
        }
        if self.ext_vertex_attribute_divisor {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_vertex_attribute_divisor")?;
        }
        if self.ext_vertex_input_dynamic_state {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_vertex_input_dynamic_state")?;
        }
        if self.ext_video_decode_h264 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_video_decode_h264")?;
        }
        if self.ext_video_decode_h265 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_video_decode_h265")?;
        }
        if self.ext_video_encode_h264 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_video_encode_h264")?;
        }
        if self.ext_ycbcr_2plane_444_formats {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_ycbcr_2plane_444_formats")?;
        }
        if self.ext_ycbcr_image_arrays {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_EXT_ycbcr_image_arrays")?;
        }
        if self.amd_buffer_marker {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_buffer_marker")?;
        }
        if self.amd_device_coherent_memory {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_device_coherent_memory")?;
        }
        if self.amd_display_native_hdr {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_display_native_hdr")?;
        }
        if self.amd_draw_indirect_count {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_draw_indirect_count")?;
        }
        if self.amd_gcn_shader {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_gcn_shader")?;
        }
        if self.amd_gpu_shader_half_float {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_gpu_shader_half_float")?;
        }
        if self.amd_gpu_shader_int16 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_gpu_shader_int16")?;
        }
        if self.amd_memory_overallocation_behavior {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_memory_overallocation_behavior")?;
        }
        if self.amd_mixed_attachment_samples {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_mixed_attachment_samples")?;
        }
        if self.amd_pipeline_compiler_control {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_pipeline_compiler_control")?;
        }
        if self.amd_rasterization_order {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_rasterization_order")?;
        }
        if self.amd_shader_ballot {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_ballot")?;
        }
        if self.amd_shader_core_properties {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_core_properties")?;
        }
        if self.amd_shader_core_properties2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_core_properties2")?;
        }
        if self.amd_shader_explicit_vertex_parameter {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_explicit_vertex_parameter")?;
        }
        if self.amd_shader_fragment_mask {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_fragment_mask")?;
        }
        if self.amd_shader_image_load_store_lod {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_image_load_store_lod")?;
        }
        if self.amd_shader_info {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_info")?;
        }
        if self.amd_shader_trinary_minmax {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_shader_trinary_minmax")?;
        }
        if self.amd_texture_gather_bias_lod {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_AMD_texture_gather_bias_lod")?;
        }
        if self.android_external_memory_android_hardware_buffer {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_ANDROID_external_memory_android_hardware_buffer")?;
        }
        if self.fuchsia_external_memory {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_FUCHSIA_external_memory")?;
        }
        if self.fuchsia_external_semaphore {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_FUCHSIA_external_semaphore")?;
        }
        if self.ggp_frame_token {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_GGP_frame_token")?;
        }
        if self.google_decorate_string {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_GOOGLE_decorate_string")?;
        }
        if self.google_display_timing {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_GOOGLE_display_timing")?;
        }
        if self.google_hlsl_functionality1 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_GOOGLE_hlsl_functionality1")?;
        }
        if self.google_user_type {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_GOOGLE_user_type")?;
        }
        if self.huawei_invocation_mask {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_HUAWEI_invocation_mask")?;
        }
        if self.huawei_subpass_shading {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_HUAWEI_subpass_shading")?;
        }
        if self.img_filter_cubic {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_IMG_filter_cubic")?;
        }
        if self.img_format_pvrtc {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_IMG_format_pvrtc")?;
        }
        if self.intel_performance_query {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_INTEL_performance_query")?;
        }
        if self.intel_shader_integer_functions2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_INTEL_shader_integer_functions2")?;
        }
        if self.nvx_binary_import {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NVX_binary_import")?;
        }
        if self.nvx_image_view_handle {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NVX_image_view_handle")?;
        }
        if self.nvx_multiview_per_view_attributes {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NVX_multiview_per_view_attributes")?;
        }
        if self.nv_acquire_winrt_display {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_acquire_winrt_display")?;
        }
        if self.nv_clip_space_w_scaling {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_clip_space_w_scaling")?;
        }
        if self.nv_compute_shader_derivatives {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_compute_shader_derivatives")?;
        }
        if self.nv_cooperative_matrix {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_cooperative_matrix")?;
        }
        if self.nv_corner_sampled_image {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_corner_sampled_image")?;
        }
        if self.nv_coverage_reduction_mode {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_coverage_reduction_mode")?;
        }
        if self.nv_dedicated_allocation {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_dedicated_allocation")?;
        }
        if self.nv_dedicated_allocation_image_aliasing {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_dedicated_allocation_image_aliasing")?;
        }
        if self.nv_device_diagnostic_checkpoints {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_device_diagnostic_checkpoints")?;
        }
        if self.nv_device_diagnostics_config {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_device_diagnostics_config")?;
        }
        if self.nv_device_generated_commands {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_device_generated_commands")?;
        }
        if self.nv_external_memory {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_external_memory")?;
        }
        if self.nv_external_memory_rdma {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_external_memory_rdma")?;
        }
        if self.nv_external_memory_win32 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_external_memory_win32")?;
        }
        if self.nv_fill_rectangle {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_fill_rectangle")?;
        }
        if self.nv_fragment_coverage_to_color {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_fragment_coverage_to_color")?;
        }
        if self.nv_fragment_shader_barycentric {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_fragment_shader_barycentric")?;
        }
        if self.nv_fragment_shading_rate_enums {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_fragment_shading_rate_enums")?;
        }
        if self.nv_framebuffer_mixed_samples {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_framebuffer_mixed_samples")?;
        }
        if self.nv_geometry_shader_passthrough {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_geometry_shader_passthrough")?;
        }
        if self.nv_glsl_shader {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_glsl_shader")?;
        }
        if self.nv_inherited_viewport_scissor {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_inherited_viewport_scissor")?;
        }
        if self.nv_mesh_shader {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_mesh_shader")?;
        }
        if self.nv_ray_tracing {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_ray_tracing")?;
        }
        if self.nv_ray_tracing_motion_blur {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_ray_tracing_motion_blur")?;
        }
        if self.nv_representative_fragment_test {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_representative_fragment_test")?;
        }
        if self.nv_sample_mask_override_coverage {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_sample_mask_override_coverage")?;
        }
        if self.nv_scissor_exclusive {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_scissor_exclusive")?;
        }
        if self.nv_shader_image_footprint {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_shader_image_footprint")?;
        }
        if self.nv_shader_sm_builtins {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_shader_sm_builtins")?;
        }
        if self.nv_shader_subgroup_partitioned {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_shader_subgroup_partitioned")?;
        }
        if self.nv_shading_rate_image {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_shading_rate_image")?;
        }
        if self.nv_viewport_array2 {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_viewport_array2")?;
        }
        if self.nv_viewport_swizzle {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_viewport_swizzle")?;
        }
        if self.nv_win32_keyed_mutex {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_NV_win32_keyed_mutex")?;
        }
        if self.qcom_render_pass_shader_resolve {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_QCOM_render_pass_shader_resolve")?;
        }
        if self.qcom_render_pass_store_ops {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_QCOM_render_pass_store_ops")?;
        }
        if self.qcom_render_pass_transform {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_QCOM_render_pass_transform")?;
        }
        if self.qcom_rotated_copy_commands {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_QCOM_rotated_copy_commands")?;
        }
        if self.valve_mutable_descriptor_type {
            if !first {
                write!(f, ", ")?
            } else {
                first = false;
            }
            f.write_str("VK_VALVE_mutable_descriptor_type")?;
        }
        write!(f, "]")
    }
}
impl<'a, I> From<I> for DeviceExtensions
where
    I: IntoIterator<Item = &'a CStr>,
{
    fn from(names: I) -> Self {
        let mut extensions = Self::none();
        for name in names {
            match name.to_bytes() {
                b"VK_KHR_16bit_storage" => {
                    extensions.khr_16bit_storage = true;
                }
                b"VK_KHR_8bit_storage" => {
                    extensions.khr_8bit_storage = true;
                }
                b"VK_KHR_acceleration_structure" => {
                    extensions.khr_acceleration_structure = true;
                }
                b"VK_KHR_bind_memory2" => {
                    extensions.khr_bind_memory2 = true;
                }
                b"VK_KHR_buffer_device_address" => {
                    extensions.khr_buffer_device_address = true;
                }
                b"VK_KHR_copy_commands2" => {
                    extensions.khr_copy_commands2 = true;
                }
                b"VK_KHR_create_renderpass2" => {
                    extensions.khr_create_renderpass2 = true;
                }
                b"VK_KHR_dedicated_allocation" => {
                    extensions.khr_dedicated_allocation = true;
                }
                b"VK_KHR_deferred_host_operations" => {
                    extensions.khr_deferred_host_operations = true;
                }
                b"VK_KHR_depth_stencil_resolve" => {
                    extensions.khr_depth_stencil_resolve = true;
                }
                b"VK_KHR_descriptor_update_template" => {
                    extensions.khr_descriptor_update_template = true;
                }
                b"VK_KHR_device_group" => {
                    extensions.khr_device_group = true;
                }
                b"VK_KHR_display_swapchain" => {
                    extensions.khr_display_swapchain = true;
                }
                b"VK_KHR_draw_indirect_count" => {
                    extensions.khr_draw_indirect_count = true;
                }
                b"VK_KHR_driver_properties" => {
                    extensions.khr_driver_properties = true;
                }
                b"VK_KHR_external_fence" => {
                    extensions.khr_external_fence = true;
                }
                b"VK_KHR_external_fence_fd" => {
                    extensions.khr_external_fence_fd = true;
                }
                b"VK_KHR_external_fence_win32" => {
                    extensions.khr_external_fence_win32 = true;
                }
                b"VK_KHR_external_memory" => {
                    extensions.khr_external_memory = true;
                }
                b"VK_KHR_external_memory_fd" => {
                    extensions.khr_external_memory_fd = true;
                }
                b"VK_KHR_external_memory_win32" => {
                    extensions.khr_external_memory_win32 = true;
                }
                b"VK_KHR_external_semaphore" => {
                    extensions.khr_external_semaphore = true;
                }
                b"VK_KHR_external_semaphore_fd" => {
                    extensions.khr_external_semaphore_fd = true;
                }
                b"VK_KHR_external_semaphore_win32" => {
                    extensions.khr_external_semaphore_win32 = true;
                }
                b"VK_KHR_fragment_shading_rate" => {
                    extensions.khr_fragment_shading_rate = true;
                }
                b"VK_KHR_get_memory_requirements2" => {
                    extensions.khr_get_memory_requirements2 = true;
                }
                b"VK_KHR_image_format_list" => {
                    extensions.khr_image_format_list = true;
                }
                b"VK_KHR_imageless_framebuffer" => {
                    extensions.khr_imageless_framebuffer = true;
                }
                b"VK_KHR_incremental_present" => {
                    extensions.khr_incremental_present = true;
                }
                b"VK_KHR_maintenance1" => {
                    extensions.khr_maintenance1 = true;
                }
                b"VK_KHR_maintenance2" => {
                    extensions.khr_maintenance2 = true;
                }
                b"VK_KHR_maintenance3" => {
                    extensions.khr_maintenance3 = true;
                }
                b"VK_KHR_multiview" => {
                    extensions.khr_multiview = true;
                }
                b"VK_KHR_performance_query" => {
                    extensions.khr_performance_query = true;
                }
                b"VK_KHR_pipeline_executable_properties" => {
                    extensions.khr_pipeline_executable_properties = true;
                }
                b"VK_KHR_pipeline_library" => {
                    extensions.khr_pipeline_library = true;
                }
                b"VK_KHR_portability_subset" => {
                    extensions.khr_portability_subset = true;
                }
                b"VK_KHR_present_id" => {
                    extensions.khr_present_id = true;
                }
                b"VK_KHR_present_wait" => {
                    extensions.khr_present_wait = true;
                }
                b"VK_KHR_push_descriptor" => {
                    extensions.khr_push_descriptor = true;
                }
                b"VK_KHR_ray_query" => {
                    extensions.khr_ray_query = true;
                }
                b"VK_KHR_ray_tracing_pipeline" => {
                    extensions.khr_ray_tracing_pipeline = true;
                }
                b"VK_KHR_relaxed_block_layout" => {
                    extensions.khr_relaxed_block_layout = true;
                }
                b"VK_KHR_sampler_mirror_clamp_to_edge" => {
                    extensions.khr_sampler_mirror_clamp_to_edge = true;
                }
                b"VK_KHR_sampler_ycbcr_conversion" => {
                    extensions.khr_sampler_ycbcr_conversion = true;
                }
                b"VK_KHR_separate_depth_stencil_layouts" => {
                    extensions.khr_separate_depth_stencil_layouts = true;
                }
                b"VK_KHR_shader_atomic_int64" => {
                    extensions.khr_shader_atomic_int64 = true;
                }
                b"VK_KHR_shader_clock" => {
                    extensions.khr_shader_clock = true;
                }
                b"VK_KHR_shader_draw_parameters" => {
                    extensions.khr_shader_draw_parameters = true;
                }
                b"VK_KHR_shader_float16_int8" => {
                    extensions.khr_shader_float16_int8 = true;
                }
                b"VK_KHR_shader_float_controls" => {
                    extensions.khr_shader_float_controls = true;
                }
                b"VK_KHR_shader_integer_dot_product" => {
                    extensions.khr_shader_integer_dot_product = true;
                }
                b"VK_KHR_shader_non_semantic_info" => {
                    extensions.khr_shader_non_semantic_info = true;
                }
                b"VK_KHR_shader_subgroup_extended_types" => {
                    extensions.khr_shader_subgroup_extended_types = true;
                }
                b"VK_KHR_shader_subgroup_uniform_control_flow" => {
                    extensions.khr_shader_subgroup_uniform_control_flow = true;
                }
                b"VK_KHR_shader_terminate_invocation" => {
                    extensions.khr_shader_terminate_invocation = true;
                }
                b"VK_KHR_shared_presentable_image" => {
                    extensions.khr_shared_presentable_image = true;
                }
                b"VK_KHR_spirv_1_4" => {
                    extensions.khr_spirv_1_4 = true;
                }
                b"VK_KHR_storage_buffer_storage_class" => {
                    extensions.khr_storage_buffer_storage_class = true;
                }
                b"VK_KHR_swapchain" => {
                    extensions.khr_swapchain = true;
                }
                b"VK_KHR_swapchain_mutable_format" => {
                    extensions.khr_swapchain_mutable_format = true;
                }
                b"VK_KHR_synchronization2" => {
                    extensions.khr_synchronization2 = true;
                }
                b"VK_KHR_timeline_semaphore" => {
                    extensions.khr_timeline_semaphore = true;
                }
                b"VK_KHR_uniform_buffer_standard_layout" => {
                    extensions.khr_uniform_buffer_standard_layout = true;
                }
                b"VK_KHR_variable_pointers" => {
                    extensions.khr_variable_pointers = true;
                }
                b"VK_KHR_video_decode_queue" => {
                    extensions.khr_video_decode_queue = true;
                }
                b"VK_KHR_video_encode_queue" => {
                    extensions.khr_video_encode_queue = true;
                }
                b"VK_KHR_video_queue" => {
                    extensions.khr_video_queue = true;
                }
                b"VK_KHR_vulkan_memory_model" => {
                    extensions.khr_vulkan_memory_model = true;
                }
                b"VK_KHR_win32_keyed_mutex" => {
                    extensions.khr_win32_keyed_mutex = true;
                }
                b"VK_KHR_workgroup_memory_explicit_layout" => {
                    extensions.khr_workgroup_memory_explicit_layout = true;
                }
                b"VK_KHR_zero_initialize_workgroup_memory" => {
                    extensions.khr_zero_initialize_workgroup_memory = true;
                }
                b"VK_EXT_4444_formats" => {
                    extensions.ext_4444_formats = true;
                }
                b"VK_EXT_astc_decode_mode" => {
                    extensions.ext_astc_decode_mode = true;
                }
                b"VK_EXT_blend_operation_advanced" => {
                    extensions.ext_blend_operation_advanced = true;
                }
                b"VK_EXT_buffer_device_address" => {
                    extensions.ext_buffer_device_address = true;
                }
                b"VK_EXT_calibrated_timestamps" => {
                    extensions.ext_calibrated_timestamps = true;
                }
                b"VK_EXT_color_write_enable" => {
                    extensions.ext_color_write_enable = true;
                }
                b"VK_EXT_conditional_rendering" => {
                    extensions.ext_conditional_rendering = true;
                }
                b"VK_EXT_conservative_rasterization" => {
                    extensions.ext_conservative_rasterization = true;
                }
                b"VK_EXT_custom_border_color" => {
                    extensions.ext_custom_border_color = true;
                }
                b"VK_EXT_debug_marker" => {
                    extensions.ext_debug_marker = true;
                }
                b"VK_EXT_depth_clip_enable" => {
                    extensions.ext_depth_clip_enable = true;
                }
                b"VK_EXT_depth_range_unrestricted" => {
                    extensions.ext_depth_range_unrestricted = true;
                }
                b"VK_EXT_descriptor_indexing" => {
                    extensions.ext_descriptor_indexing = true;
                }
                b"VK_EXT_device_memory_report" => {
                    extensions.ext_device_memory_report = true;
                }
                b"VK_EXT_discard_rectangles" => {
                    extensions.ext_discard_rectangles = true;
                }
                b"VK_EXT_display_control" => {
                    extensions.ext_display_control = true;
                }
                b"VK_EXT_extended_dynamic_state" => {
                    extensions.ext_extended_dynamic_state = true;
                }
                b"VK_EXT_extended_dynamic_state2" => {
                    extensions.ext_extended_dynamic_state2 = true;
                }
                b"VK_EXT_external_memory_dma_buf" => {
                    extensions.ext_external_memory_dma_buf = true;
                }
                b"VK_EXT_external_memory_host" => {
                    extensions.ext_external_memory_host = true;
                }
                b"VK_EXT_filter_cubic" => {
                    extensions.ext_filter_cubic = true;
                }
                b"VK_EXT_fragment_density_map" => {
                    extensions.ext_fragment_density_map = true;
                }
                b"VK_EXT_fragment_density_map2" => {
                    extensions.ext_fragment_density_map2 = true;
                }
                b"VK_EXT_fragment_shader_interlock" => {
                    extensions.ext_fragment_shader_interlock = true;
                }
                b"VK_EXT_full_screen_exclusive" => {
                    extensions.ext_full_screen_exclusive = true;
                }
                b"VK_EXT_global_priority" => {
                    extensions.ext_global_priority = true;
                }
                b"VK_EXT_global_priority_query" => {
                    extensions.ext_global_priority_query = true;
                }
                b"VK_EXT_hdr_metadata" => {
                    extensions.ext_hdr_metadata = true;
                }
                b"VK_EXT_host_query_reset" => {
                    extensions.ext_host_query_reset = true;
                }
                b"VK_EXT_image_drm_format_modifier" => {
                    extensions.ext_image_drm_format_modifier = true;
                }
                b"VK_EXT_image_robustness" => {
                    extensions.ext_image_robustness = true;
                }
                b"VK_EXT_index_type_uint8" => {
                    extensions.ext_index_type_uint8 = true;
                }
                b"VK_EXT_inline_uniform_block" => {
                    extensions.ext_inline_uniform_block = true;
                }
                b"VK_EXT_line_rasterization" => {
                    extensions.ext_line_rasterization = true;
                }
                b"VK_EXT_load_store_op_none" => {
                    extensions.ext_load_store_op_none = true;
                }
                b"VK_EXT_memory_budget" => {
                    extensions.ext_memory_budget = true;
                }
                b"VK_EXT_memory_priority" => {
                    extensions.ext_memory_priority = true;
                }
                b"VK_EXT_multi_draw" => {
                    extensions.ext_multi_draw = true;
                }
                b"VK_EXT_pageable_device_local_memory" => {
                    extensions.ext_pageable_device_local_memory = true;
                }
                b"VK_EXT_pci_bus_info" => {
                    extensions.ext_pci_bus_info = true;
                }
                b"VK_EXT_physical_device_drm" => {
                    extensions.ext_physical_device_drm = true;
                }
                b"VK_EXT_pipeline_creation_cache_control" => {
                    extensions.ext_pipeline_creation_cache_control = true;
                }
                b"VK_EXT_pipeline_creation_feedback" => {
                    extensions.ext_pipeline_creation_feedback = true;
                }
                b"VK_EXT_post_depth_coverage" => {
                    extensions.ext_post_depth_coverage = true;
                }
                b"VK_EXT_primitive_topology_list_restart" => {
                    extensions.ext_primitive_topology_list_restart = true;
                }
                b"VK_EXT_private_data" => {
                    extensions.ext_private_data = true;
                }
                b"VK_EXT_provoking_vertex" => {
                    extensions.ext_provoking_vertex = true;
                }
                b"VK_EXT_queue_family_foreign" => {
                    extensions.ext_queue_family_foreign = true;
                }
                b"VK_EXT_robustness2" => {
                    extensions.ext_robustness2 = true;
                }
                b"VK_EXT_sample_locations" => {
                    extensions.ext_sample_locations = true;
                }
                b"VK_EXT_sampler_filter_minmax" => {
                    extensions.ext_sampler_filter_minmax = true;
                }
                b"VK_EXT_scalar_block_layout" => {
                    extensions.ext_scalar_block_layout = true;
                }
                b"VK_EXT_separate_stencil_usage" => {
                    extensions.ext_separate_stencil_usage = true;
                }
                b"VK_EXT_shader_atomic_float" => {
                    extensions.ext_shader_atomic_float = true;
                }
                b"VK_EXT_shader_atomic_float2" => {
                    extensions.ext_shader_atomic_float2 = true;
                }
                b"VK_EXT_shader_demote_to_helper_invocation" => {
                    extensions.ext_shader_demote_to_helper_invocation = true;
                }
                b"VK_EXT_shader_image_atomic_int64" => {
                    extensions.ext_shader_image_atomic_int64 = true;
                }
                b"VK_EXT_shader_stencil_export" => {
                    extensions.ext_shader_stencil_export = true;
                }
                b"VK_EXT_shader_subgroup_ballot" => {
                    extensions.ext_shader_subgroup_ballot = true;
                }
                b"VK_EXT_shader_subgroup_vote" => {
                    extensions.ext_shader_subgroup_vote = true;
                }
                b"VK_EXT_shader_viewport_index_layer" => {
                    extensions.ext_shader_viewport_index_layer = true;
                }
                b"VK_EXT_subgroup_size_control" => {
                    extensions.ext_subgroup_size_control = true;
                }
                b"VK_EXT_texel_buffer_alignment" => {
                    extensions.ext_texel_buffer_alignment = true;
                }
                b"VK_EXT_texture_compression_astc_hdr" => {
                    extensions.ext_texture_compression_astc_hdr = true;
                }
                b"VK_EXT_tooling_info" => {
                    extensions.ext_tooling_info = true;
                }
                b"VK_EXT_transform_feedback" => {
                    extensions.ext_transform_feedback = true;
                }
                b"VK_EXT_validation_cache" => {
                    extensions.ext_validation_cache = true;
                }
                b"VK_EXT_vertex_attribute_divisor" => {
                    extensions.ext_vertex_attribute_divisor = true;
                }
                b"VK_EXT_vertex_input_dynamic_state" => {
                    extensions.ext_vertex_input_dynamic_state = true;
                }
                b"VK_EXT_video_decode_h264" => {
                    extensions.ext_video_decode_h264 = true;
                }
                b"VK_EXT_video_decode_h265" => {
                    extensions.ext_video_decode_h265 = true;
                }
                b"VK_EXT_video_encode_h264" => {
                    extensions.ext_video_encode_h264 = true;
                }
                b"VK_EXT_ycbcr_2plane_444_formats" => {
                    extensions.ext_ycbcr_2plane_444_formats = true;
                }
                b"VK_EXT_ycbcr_image_arrays" => {
                    extensions.ext_ycbcr_image_arrays = true;
                }
                b"VK_AMD_buffer_marker" => {
                    extensions.amd_buffer_marker = true;
                }
                b"VK_AMD_device_coherent_memory" => {
                    extensions.amd_device_coherent_memory = true;
                }
                b"VK_AMD_display_native_hdr" => {
                    extensions.amd_display_native_hdr = true;
                }
                b"VK_AMD_draw_indirect_count" => {
                    extensions.amd_draw_indirect_count = true;
                }
                b"VK_AMD_gcn_shader" => {
                    extensions.amd_gcn_shader = true;
                }
                b"VK_AMD_gpu_shader_half_float" => {
                    extensions.amd_gpu_shader_half_float = true;
                }
                b"VK_AMD_gpu_shader_int16" => {
                    extensions.amd_gpu_shader_int16 = true;
                }
                b"VK_AMD_memory_overallocation_behavior" => {
                    extensions.amd_memory_overallocation_behavior = true;
                }
                b"VK_AMD_mixed_attachment_samples" => {
                    extensions.amd_mixed_attachment_samples = true;
                }
                b"VK_AMD_pipeline_compiler_control" => {
                    extensions.amd_pipeline_compiler_control = true;
                }
                b"VK_AMD_rasterization_order" => {
                    extensions.amd_rasterization_order = true;
                }
                b"VK_AMD_shader_ballot" => {
                    extensions.amd_shader_ballot = true;
                }
                b"VK_AMD_shader_core_properties" => {
                    extensions.amd_shader_core_properties = true;
                }
                b"VK_AMD_shader_core_properties2" => {
                    extensions.amd_shader_core_properties2 = true;
                }
                b"VK_AMD_shader_explicit_vertex_parameter" => {
                    extensions.amd_shader_explicit_vertex_parameter = true;
                }
                b"VK_AMD_shader_fragment_mask" => {
                    extensions.amd_shader_fragment_mask = true;
                }
                b"VK_AMD_shader_image_load_store_lod" => {
                    extensions.amd_shader_image_load_store_lod = true;
                }
                b"VK_AMD_shader_info" => {
                    extensions.amd_shader_info = true;
                }
                b"VK_AMD_shader_trinary_minmax" => {
                    extensions.amd_shader_trinary_minmax = true;
                }
                b"VK_AMD_texture_gather_bias_lod" => {
                    extensions.amd_texture_gather_bias_lod = true;
                }
                b"VK_ANDROID_external_memory_android_hardware_buffer" => {
                    extensions.android_external_memory_android_hardware_buffer = true;
                }
                b"VK_FUCHSIA_external_memory" => {
                    extensions.fuchsia_external_memory = true;
                }
                b"VK_FUCHSIA_external_semaphore" => {
                    extensions.fuchsia_external_semaphore = true;
                }
                b"VK_GGP_frame_token" => {
                    extensions.ggp_frame_token = true;
                }
                b"VK_GOOGLE_decorate_string" => {
                    extensions.google_decorate_string = true;
                }
                b"VK_GOOGLE_display_timing" => {
                    extensions.google_display_timing = true;
                }
                b"VK_GOOGLE_hlsl_functionality1" => {
                    extensions.google_hlsl_functionality1 = true;
                }
                b"VK_GOOGLE_user_type" => {
                    extensions.google_user_type = true;
                }
                b"VK_HUAWEI_invocation_mask" => {
                    extensions.huawei_invocation_mask = true;
                }
                b"VK_HUAWEI_subpass_shading" => {
                    extensions.huawei_subpass_shading = true;
                }
                b"VK_IMG_filter_cubic" => {
                    extensions.img_filter_cubic = true;
                }
                b"VK_IMG_format_pvrtc" => {
                    extensions.img_format_pvrtc = true;
                }
                b"VK_INTEL_performance_query" => {
                    extensions.intel_performance_query = true;
                }
                b"VK_INTEL_shader_integer_functions2" => {
                    extensions.intel_shader_integer_functions2 = true;
                }
                b"VK_NVX_binary_import" => {
                    extensions.nvx_binary_import = true;
                }
                b"VK_NVX_image_view_handle" => {
                    extensions.nvx_image_view_handle = true;
                }
                b"VK_NVX_multiview_per_view_attributes" => {
                    extensions.nvx_multiview_per_view_attributes = true;
                }
                b"VK_NV_acquire_winrt_display" => {
                    extensions.nv_acquire_winrt_display = true;
                }
                b"VK_NV_clip_space_w_scaling" => {
                    extensions.nv_clip_space_w_scaling = true;
                }
                b"VK_NV_compute_shader_derivatives" => {
                    extensions.nv_compute_shader_derivatives = true;
                }
                b"VK_NV_cooperative_matrix" => {
                    extensions.nv_cooperative_matrix = true;
                }
                b"VK_NV_corner_sampled_image" => {
                    extensions.nv_corner_sampled_image = true;
                }
                b"VK_NV_coverage_reduction_mode" => {
                    extensions.nv_coverage_reduction_mode = true;
                }
                b"VK_NV_dedicated_allocation" => {
                    extensions.nv_dedicated_allocation = true;
                }
                b"VK_NV_dedicated_allocation_image_aliasing" => {
                    extensions.nv_dedicated_allocation_image_aliasing = true;
                }
                b"VK_NV_device_diagnostic_checkpoints" => {
                    extensions.nv_device_diagnostic_checkpoints = true;
                }
                b"VK_NV_device_diagnostics_config" => {
                    extensions.nv_device_diagnostics_config = true;
                }
                b"VK_NV_device_generated_commands" => {
                    extensions.nv_device_generated_commands = true;
                }
                b"VK_NV_external_memory" => {
                    extensions.nv_external_memory = true;
                }
                b"VK_NV_external_memory_rdma" => {
                    extensions.nv_external_memory_rdma = true;
                }
                b"VK_NV_external_memory_win32" => {
                    extensions.nv_external_memory_win32 = true;
                }
                b"VK_NV_fill_rectangle" => {
                    extensions.nv_fill_rectangle = true;
                }
                b"VK_NV_fragment_coverage_to_color" => {
                    extensions.nv_fragment_coverage_to_color = true;
                }
                b"VK_NV_fragment_shader_barycentric" => {
                    extensions.nv_fragment_shader_barycentric = true;
                }
                b"VK_NV_fragment_shading_rate_enums" => {
                    extensions.nv_fragment_shading_rate_enums = true;
                }
                b"VK_NV_framebuffer_mixed_samples" => {
                    extensions.nv_framebuffer_mixed_samples = true;
                }
                b"VK_NV_geometry_shader_passthrough" => {
                    extensions.nv_geometry_shader_passthrough = true;
                }
                b"VK_NV_glsl_shader" => {
                    extensions.nv_glsl_shader = true;
                }
                b"VK_NV_inherited_viewport_scissor" => {
                    extensions.nv_inherited_viewport_scissor = true;
                }
                b"VK_NV_mesh_shader" => {
                    extensions.nv_mesh_shader = true;
                }
                b"VK_NV_ray_tracing" => {
                    extensions.nv_ray_tracing = true;
                }
                b"VK_NV_ray_tracing_motion_blur" => {
                    extensions.nv_ray_tracing_motion_blur = true;
                }
                b"VK_NV_representative_fragment_test" => {
                    extensions.nv_representative_fragment_test = true;
                }
                b"VK_NV_sample_mask_override_coverage" => {
                    extensions.nv_sample_mask_override_coverage = true;
                }
                b"VK_NV_scissor_exclusive" => {
                    extensions.nv_scissor_exclusive = true;
                }
                b"VK_NV_shader_image_footprint" => {
                    extensions.nv_shader_image_footprint = true;
                }
                b"VK_NV_shader_sm_builtins" => {
                    extensions.nv_shader_sm_builtins = true;
                }
                b"VK_NV_shader_subgroup_partitioned" => {
                    extensions.nv_shader_subgroup_partitioned = true;
                }
                b"VK_NV_shading_rate_image" => {
                    extensions.nv_shading_rate_image = true;
                }
                b"VK_NV_viewport_array2" => {
                    extensions.nv_viewport_array2 = true;
                }
                b"VK_NV_viewport_swizzle" => {
                    extensions.nv_viewport_swizzle = true;
                }
                b"VK_NV_win32_keyed_mutex" => {
                    extensions.nv_win32_keyed_mutex = true;
                }
                b"VK_QCOM_render_pass_shader_resolve" => {
                    extensions.qcom_render_pass_shader_resolve = true;
                }
                b"VK_QCOM_render_pass_store_ops" => {
                    extensions.qcom_render_pass_store_ops = true;
                }
                b"VK_QCOM_render_pass_transform" => {
                    extensions.qcom_render_pass_transform = true;
                }
                b"VK_QCOM_rotated_copy_commands" => {
                    extensions.qcom_rotated_copy_commands = true;
                }
                b"VK_VALVE_mutable_descriptor_type" => {
                    extensions.valve_mutable_descriptor_type = true;
                }
                _ => (),
            }
        }
        extensions
    }
}
impl<'a> From<&'a DeviceExtensions> for Vec<CString> {
    fn from(x: &'a DeviceExtensions) -> Self {
        let mut data = Self::new();
        if x.khr_16bit_storage {
            data.push(CString::new(&"VK_KHR_16bit_storage"[..]).unwrap());
        }
        if x.khr_8bit_storage {
            data.push(CString::new(&"VK_KHR_8bit_storage"[..]).unwrap());
        }
        if x.khr_acceleration_structure {
            data.push(CString::new(&"VK_KHR_acceleration_structure"[..]).unwrap());
        }
        if x.khr_bind_memory2 {
            data.push(CString::new(&"VK_KHR_bind_memory2"[..]).unwrap());
        }
        if x.khr_buffer_device_address {
            data.push(CString::new(&"VK_KHR_buffer_device_address"[..]).unwrap());
        }
        if x.khr_copy_commands2 {
            data.push(CString::new(&"VK_KHR_copy_commands2"[..]).unwrap());
        }
        if x.khr_create_renderpass2 {
            data.push(CString::new(&"VK_KHR_create_renderpass2"[..]).unwrap());
        }
        if x.khr_dedicated_allocation {
            data.push(CString::new(&"VK_KHR_dedicated_allocation"[..]).unwrap());
        }
        if x.khr_deferred_host_operations {
            data.push(CString::new(&"VK_KHR_deferred_host_operations"[..]).unwrap());
        }
        if x.khr_depth_stencil_resolve {
            data.push(CString::new(&"VK_KHR_depth_stencil_resolve"[..]).unwrap());
        }
        if x.khr_descriptor_update_template {
            data.push(CString::new(&"VK_KHR_descriptor_update_template"[..]).unwrap());
        }
        if x.khr_device_group {
            data.push(CString::new(&"VK_KHR_device_group"[..]).unwrap());
        }
        if x.khr_display_swapchain {
            data.push(CString::new(&"VK_KHR_display_swapchain"[..]).unwrap());
        }
        if x.khr_draw_indirect_count {
            data.push(CString::new(&"VK_KHR_draw_indirect_count"[..]).unwrap());
        }
        if x.khr_driver_properties {
            data.push(CString::new(&"VK_KHR_driver_properties"[..]).unwrap());
        }
        if x.khr_external_fence {
            data.push(CString::new(&"VK_KHR_external_fence"[..]).unwrap());
        }
        if x.khr_external_fence_fd {
            data.push(CString::new(&"VK_KHR_external_fence_fd"[..]).unwrap());
        }
        if x.khr_external_fence_win32 {
            data.push(CString::new(&"VK_KHR_external_fence_win32"[..]).unwrap());
        }
        if x.khr_external_memory {
            data.push(CString::new(&"VK_KHR_external_memory"[..]).unwrap());
        }
        if x.khr_external_memory_fd {
            data.push(CString::new(&"VK_KHR_external_memory_fd"[..]).unwrap());
        }
        if x.khr_external_memory_win32 {
            data.push(CString::new(&"VK_KHR_external_memory_win32"[..]).unwrap());
        }
        if x.khr_external_semaphore {
            data.push(CString::new(&"VK_KHR_external_semaphore"[..]).unwrap());
        }
        if x.khr_external_semaphore_fd {
            data.push(CString::new(&"VK_KHR_external_semaphore_fd"[..]).unwrap());
        }
        if x.khr_external_semaphore_win32 {
            data.push(CString::new(&"VK_KHR_external_semaphore_win32"[..]).unwrap());
        }
        if x.khr_fragment_shading_rate {
            data.push(CString::new(&"VK_KHR_fragment_shading_rate"[..]).unwrap());
        }
        if x.khr_get_memory_requirements2 {
            data.push(CString::new(&"VK_KHR_get_memory_requirements2"[..]).unwrap());
        }
        if x.khr_image_format_list {
            data.push(CString::new(&"VK_KHR_image_format_list"[..]).unwrap());
        }
        if x.khr_imageless_framebuffer {
            data.push(CString::new(&"VK_KHR_imageless_framebuffer"[..]).unwrap());
        }
        if x.khr_incremental_present {
            data.push(CString::new(&"VK_KHR_incremental_present"[..]).unwrap());
        }
        if x.khr_maintenance1 {
            data.push(CString::new(&"VK_KHR_maintenance1"[..]).unwrap());
        }
        if x.khr_maintenance2 {
            data.push(CString::new(&"VK_KHR_maintenance2"[..]).unwrap());
        }
        if x.khr_maintenance3 {
            data.push(CString::new(&"VK_KHR_maintenance3"[..]).unwrap());
        }
        if x.khr_multiview {
            data.push(CString::new(&"VK_KHR_multiview"[..]).unwrap());
        }
        if x.khr_performance_query {
            data.push(CString::new(&"VK_KHR_performance_query"[..]).unwrap());
        }
        if x.khr_pipeline_executable_properties {
            data.push(CString::new(&"VK_KHR_pipeline_executable_properties"[..]).unwrap());
        }
        if x.khr_pipeline_library {
            data.push(CString::new(&"VK_KHR_pipeline_library"[..]).unwrap());
        }
        if x.khr_portability_subset {
            data.push(CString::new(&"VK_KHR_portability_subset"[..]).unwrap());
        }
        if x.khr_present_id {
            data.push(CString::new(&"VK_KHR_present_id"[..]).unwrap());
        }
        if x.khr_present_wait {
            data.push(CString::new(&"VK_KHR_present_wait"[..]).unwrap());
        }
        if x.khr_push_descriptor {
            data.push(CString::new(&"VK_KHR_push_descriptor"[..]).unwrap());
        }
        if x.khr_ray_query {
            data.push(CString::new(&"VK_KHR_ray_query"[..]).unwrap());
        }
        if x.khr_ray_tracing_pipeline {
            data.push(CString::new(&"VK_KHR_ray_tracing_pipeline"[..]).unwrap());
        }
        if x.khr_relaxed_block_layout {
            data.push(CString::new(&"VK_KHR_relaxed_block_layout"[..]).unwrap());
        }
        if x.khr_sampler_mirror_clamp_to_edge {
            data.push(CString::new(&"VK_KHR_sampler_mirror_clamp_to_edge"[..]).unwrap());
        }
        if x.khr_sampler_ycbcr_conversion {
            data.push(CString::new(&"VK_KHR_sampler_ycbcr_conversion"[..]).unwrap());
        }
        if x.khr_separate_depth_stencil_layouts {
            data.push(CString::new(&"VK_KHR_separate_depth_stencil_layouts"[..]).unwrap());
        }
        if x.khr_shader_atomic_int64 {
            data.push(CString::new(&"VK_KHR_shader_atomic_int64"[..]).unwrap());
        }
        if x.khr_shader_clock {
            data.push(CString::new(&"VK_KHR_shader_clock"[..]).unwrap());
        }
        if x.khr_shader_draw_parameters {
            data.push(CString::new(&"VK_KHR_shader_draw_parameters"[..]).unwrap());
        }
        if x.khr_shader_float16_int8 {
            data.push(CString::new(&"VK_KHR_shader_float16_int8"[..]).unwrap());
        }
        if x.khr_shader_float_controls {
            data.push(CString::new(&"VK_KHR_shader_float_controls"[..]).unwrap());
        }
        if x.khr_shader_integer_dot_product {
            data.push(CString::new(&"VK_KHR_shader_integer_dot_product"[..]).unwrap());
        }
        if x.khr_shader_non_semantic_info {
            data.push(CString::new(&"VK_KHR_shader_non_semantic_info"[..]).unwrap());
        }
        if x.khr_shader_subgroup_extended_types {
            data.push(CString::new(&"VK_KHR_shader_subgroup_extended_types"[..]).unwrap());
        }
        if x.khr_shader_subgroup_uniform_control_flow {
            data.push(CString::new(&"VK_KHR_shader_subgroup_uniform_control_flow"[..]).unwrap());
        }
        if x.khr_shader_terminate_invocation {
            data.push(CString::new(&"VK_KHR_shader_terminate_invocation"[..]).unwrap());
        }
        if x.khr_shared_presentable_image {
            data.push(CString::new(&"VK_KHR_shared_presentable_image"[..]).unwrap());
        }
        if x.khr_spirv_1_4 {
            data.push(CString::new(&"VK_KHR_spirv_1_4"[..]).unwrap());
        }
        if x.khr_storage_buffer_storage_class {
            data.push(CString::new(&"VK_KHR_storage_buffer_storage_class"[..]).unwrap());
        }
        if x.khr_swapchain {
            data.push(CString::new(&"VK_KHR_swapchain"[..]).unwrap());
        }
        if x.khr_swapchain_mutable_format {
            data.push(CString::new(&"VK_KHR_swapchain_mutable_format"[..]).unwrap());
        }
        if x.khr_synchronization2 {
            data.push(CString::new(&"VK_KHR_synchronization2"[..]).unwrap());
        }
        if x.khr_timeline_semaphore {
            data.push(CString::new(&"VK_KHR_timeline_semaphore"[..]).unwrap());
        }
        if x.khr_uniform_buffer_standard_layout {
            data.push(CString::new(&"VK_KHR_uniform_buffer_standard_layout"[..]).unwrap());
        }
        if x.khr_variable_pointers {
            data.push(CString::new(&"VK_KHR_variable_pointers"[..]).unwrap());
        }
        if x.khr_video_decode_queue {
            data.push(CString::new(&"VK_KHR_video_decode_queue"[..]).unwrap());
        }
        if x.khr_video_encode_queue {
            data.push(CString::new(&"VK_KHR_video_encode_queue"[..]).unwrap());
        }
        if x.khr_video_queue {
            data.push(CString::new(&"VK_KHR_video_queue"[..]).unwrap());
        }
        if x.khr_vulkan_memory_model {
            data.push(CString::new(&"VK_KHR_vulkan_memory_model"[..]).unwrap());
        }
        if x.khr_win32_keyed_mutex {
            data.push(CString::new(&"VK_KHR_win32_keyed_mutex"[..]).unwrap());
        }
        if x.khr_workgroup_memory_explicit_layout {
            data.push(CString::new(&"VK_KHR_workgroup_memory_explicit_layout"[..]).unwrap());
        }
        if x.khr_zero_initialize_workgroup_memory {
            data.push(CString::new(&"VK_KHR_zero_initialize_workgroup_memory"[..]).unwrap());
        }
        if x.ext_4444_formats {
            data.push(CString::new(&"VK_EXT_4444_formats"[..]).unwrap());
        }
        if x.ext_astc_decode_mode {
            data.push(CString::new(&"VK_EXT_astc_decode_mode"[..]).unwrap());
        }
        if x.ext_blend_operation_advanced {
            data.push(CString::new(&"VK_EXT_blend_operation_advanced"[..]).unwrap());
        }
        if x.ext_buffer_device_address {
            data.push(CString::new(&"VK_EXT_buffer_device_address"[..]).unwrap());
        }
        if x.ext_calibrated_timestamps {
            data.push(CString::new(&"VK_EXT_calibrated_timestamps"[..]).unwrap());
        }
        if x.ext_color_write_enable {
            data.push(CString::new(&"VK_EXT_color_write_enable"[..]).unwrap());
        }
        if x.ext_conditional_rendering {
            data.push(CString::new(&"VK_EXT_conditional_rendering"[..]).unwrap());
        }
        if x.ext_conservative_rasterization {
            data.push(CString::new(&"VK_EXT_conservative_rasterization"[..]).unwrap());
        }
        if x.ext_custom_border_color {
            data.push(CString::new(&"VK_EXT_custom_border_color"[..]).unwrap());
        }
        if x.ext_debug_marker {
            data.push(CString::new(&"VK_EXT_debug_marker"[..]).unwrap());
        }
        if x.ext_depth_clip_enable {
            data.push(CString::new(&"VK_EXT_depth_clip_enable"[..]).unwrap());
        }
        if x.ext_depth_range_unrestricted {
            data.push(CString::new(&"VK_EXT_depth_range_unrestricted"[..]).unwrap());
        }
        if x.ext_descriptor_indexing {
            data.push(CString::new(&"VK_EXT_descriptor_indexing"[..]).unwrap());
        }
        if x.ext_device_memory_report {
            data.push(CString::new(&"VK_EXT_device_memory_report"[..]).unwrap());
        }
        if x.ext_discard_rectangles {
            data.push(CString::new(&"VK_EXT_discard_rectangles"[..]).unwrap());
        }
        if x.ext_display_control {
            data.push(CString::new(&"VK_EXT_display_control"[..]).unwrap());
        }
        if x.ext_extended_dynamic_state {
            data.push(CString::new(&"VK_EXT_extended_dynamic_state"[..]).unwrap());
        }
        if x.ext_extended_dynamic_state2 {
            data.push(CString::new(&"VK_EXT_extended_dynamic_state2"[..]).unwrap());
        }
        if x.ext_external_memory_dma_buf {
            data.push(CString::new(&"VK_EXT_external_memory_dma_buf"[..]).unwrap());
        }
        if x.ext_external_memory_host {
            data.push(CString::new(&"VK_EXT_external_memory_host"[..]).unwrap());
        }
        if x.ext_filter_cubic {
            data.push(CString::new(&"VK_EXT_filter_cubic"[..]).unwrap());
        }
        if x.ext_fragment_density_map {
            data.push(CString::new(&"VK_EXT_fragment_density_map"[..]).unwrap());
        }
        if x.ext_fragment_density_map2 {
            data.push(CString::new(&"VK_EXT_fragment_density_map2"[..]).unwrap());
        }
        if x.ext_fragment_shader_interlock {
            data.push(CString::new(&"VK_EXT_fragment_shader_interlock"[..]).unwrap());
        }
        if x.ext_full_screen_exclusive {
            data.push(CString::new(&"VK_EXT_full_screen_exclusive"[..]).unwrap());
        }
        if x.ext_global_priority {
            data.push(CString::new(&"VK_EXT_global_priority"[..]).unwrap());
        }
        if x.ext_global_priority_query {
            data.push(CString::new(&"VK_EXT_global_priority_query"[..]).unwrap());
        }
        if x.ext_hdr_metadata {
            data.push(CString::new(&"VK_EXT_hdr_metadata"[..]).unwrap());
        }
        if x.ext_host_query_reset {
            data.push(CString::new(&"VK_EXT_host_query_reset"[..]).unwrap());
        }
        if x.ext_image_drm_format_modifier {
            data.push(CString::new(&"VK_EXT_image_drm_format_modifier"[..]).unwrap());
        }
        if x.ext_image_robustness {
            data.push(CString::new(&"VK_EXT_image_robustness"[..]).unwrap());
        }
        if x.ext_index_type_uint8 {
            data.push(CString::new(&"VK_EXT_index_type_uint8"[..]).unwrap());
        }
        if x.ext_inline_uniform_block {
            data.push(CString::new(&"VK_EXT_inline_uniform_block"[..]).unwrap());
        }
        if x.ext_line_rasterization {
            data.push(CString::new(&"VK_EXT_line_rasterization"[..]).unwrap());
        }
        if x.ext_load_store_op_none {
            data.push(CString::new(&"VK_EXT_load_store_op_none"[..]).unwrap());
        }
        if x.ext_memory_budget {
            data.push(CString::new(&"VK_EXT_memory_budget"[..]).unwrap());
        }
        if x.ext_memory_priority {
            data.push(CString::new(&"VK_EXT_memory_priority"[..]).unwrap());
        }
        if x.ext_multi_draw {
            data.push(CString::new(&"VK_EXT_multi_draw"[..]).unwrap());
        }
        if x.ext_pageable_device_local_memory {
            data.push(CString::new(&"VK_EXT_pageable_device_local_memory"[..]).unwrap());
        }
        if x.ext_pci_bus_info {
            data.push(CString::new(&"VK_EXT_pci_bus_info"[..]).unwrap());
        }
        if x.ext_physical_device_drm {
            data.push(CString::new(&"VK_EXT_physical_device_drm"[..]).unwrap());
        }
        if x.ext_pipeline_creation_cache_control {
            data.push(CString::new(&"VK_EXT_pipeline_creation_cache_control"[..]).unwrap());
        }
        if x.ext_pipeline_creation_feedback {
            data.push(CString::new(&"VK_EXT_pipeline_creation_feedback"[..]).unwrap());
        }
        if x.ext_post_depth_coverage {
            data.push(CString::new(&"VK_EXT_post_depth_coverage"[..]).unwrap());
        }
        if x.ext_primitive_topology_list_restart {
            data.push(CString::new(&"VK_EXT_primitive_topology_list_restart"[..]).unwrap());
        }
        if x.ext_private_data {
            data.push(CString::new(&"VK_EXT_private_data"[..]).unwrap());
        }
        if x.ext_provoking_vertex {
            data.push(CString::new(&"VK_EXT_provoking_vertex"[..]).unwrap());
        }
        if x.ext_queue_family_foreign {
            data.push(CString::new(&"VK_EXT_queue_family_foreign"[..]).unwrap());
        }
        if x.ext_robustness2 {
            data.push(CString::new(&"VK_EXT_robustness2"[..]).unwrap());
        }
        if x.ext_sample_locations {
            data.push(CString::new(&"VK_EXT_sample_locations"[..]).unwrap());
        }
        if x.ext_sampler_filter_minmax {
            data.push(CString::new(&"VK_EXT_sampler_filter_minmax"[..]).unwrap());
        }
        if x.ext_scalar_block_layout {
            data.push(CString::new(&"VK_EXT_scalar_block_layout"[..]).unwrap());
        }
        if x.ext_separate_stencil_usage {
            data.push(CString::new(&"VK_EXT_separate_stencil_usage"[..]).unwrap());
        }
        if x.ext_shader_atomic_float {
            data.push(CString::new(&"VK_EXT_shader_atomic_float"[..]).unwrap());
        }
        if x.ext_shader_atomic_float2 {
            data.push(CString::new(&"VK_EXT_shader_atomic_float2"[..]).unwrap());
        }
        if x.ext_shader_demote_to_helper_invocation {
            data.push(CString::new(&"VK_EXT_shader_demote_to_helper_invocation"[..]).unwrap());
        }
        if x.ext_shader_image_atomic_int64 {
            data.push(CString::new(&"VK_EXT_shader_image_atomic_int64"[..]).unwrap());
        }
        if x.ext_shader_stencil_export {
            data.push(CString::new(&"VK_EXT_shader_stencil_export"[..]).unwrap());
        }
        if x.ext_shader_subgroup_ballot {
            data.push(CString::new(&"VK_EXT_shader_subgroup_ballot"[..]).unwrap());
        }
        if x.ext_shader_subgroup_vote {
            data.push(CString::new(&"VK_EXT_shader_subgroup_vote"[..]).unwrap());
        }
        if x.ext_shader_viewport_index_layer {
            data.push(CString::new(&"VK_EXT_shader_viewport_index_layer"[..]).unwrap());
        }
        if x.ext_subgroup_size_control {
            data.push(CString::new(&"VK_EXT_subgroup_size_control"[..]).unwrap());
        }
        if x.ext_texel_buffer_alignment {
            data.push(CString::new(&"VK_EXT_texel_buffer_alignment"[..]).unwrap());
        }
        if x.ext_texture_compression_astc_hdr {
            data.push(CString::new(&"VK_EXT_texture_compression_astc_hdr"[..]).unwrap());
        }
        if x.ext_tooling_info {
            data.push(CString::new(&"VK_EXT_tooling_info"[..]).unwrap());
        }
        if x.ext_transform_feedback {
            data.push(CString::new(&"VK_EXT_transform_feedback"[..]).unwrap());
        }
        if x.ext_validation_cache {
            data.push(CString::new(&"VK_EXT_validation_cache"[..]).unwrap());
        }
        if x.ext_vertex_attribute_divisor {
            data.push(CString::new(&"VK_EXT_vertex_attribute_divisor"[..]).unwrap());
        }
        if x.ext_vertex_input_dynamic_state {
            data.push(CString::new(&"VK_EXT_vertex_input_dynamic_state"[..]).unwrap());
        }
        if x.ext_video_decode_h264 {
            data.push(CString::new(&"VK_EXT_video_decode_h264"[..]).unwrap());
        }
        if x.ext_video_decode_h265 {
            data.push(CString::new(&"VK_EXT_video_decode_h265"[..]).unwrap());
        }
        if x.ext_video_encode_h264 {
            data.push(CString::new(&"VK_EXT_video_encode_h264"[..]).unwrap());
        }
        if x.ext_ycbcr_2plane_444_formats {
            data.push(CString::new(&"VK_EXT_ycbcr_2plane_444_formats"[..]).unwrap());
        }
        if x.ext_ycbcr_image_arrays {
            data.push(CString::new(&"VK_EXT_ycbcr_image_arrays"[..]).unwrap());
        }
        if x.amd_buffer_marker {
            data.push(CString::new(&"VK_AMD_buffer_marker"[..]).unwrap());
        }
        if x.amd_device_coherent_memory {
            data.push(CString::new(&"VK_AMD_device_coherent_memory"[..]).unwrap());
        }
        if x.amd_display_native_hdr {
            data.push(CString::new(&"VK_AMD_display_native_hdr"[..]).unwrap());
        }
        if x.amd_draw_indirect_count {
            data.push(CString::new(&"VK_AMD_draw_indirect_count"[..]).unwrap());
        }
        if x.amd_gcn_shader {
            data.push(CString::new(&"VK_AMD_gcn_shader"[..]).unwrap());
        }
        if x.amd_gpu_shader_half_float {
            data.push(CString::new(&"VK_AMD_gpu_shader_half_float"[..]).unwrap());
        }
        if x.amd_gpu_shader_int16 {
            data.push(CString::new(&"VK_AMD_gpu_shader_int16"[..]).unwrap());
        }
        if x.amd_memory_overallocation_behavior {
            data.push(CString::new(&"VK_AMD_memory_overallocation_behavior"[..]).unwrap());
        }
        if x.amd_mixed_attachment_samples {
            data.push(CString::new(&"VK_AMD_mixed_attachment_samples"[..]).unwrap());
        }
        if x.amd_pipeline_compiler_control {
            data.push(CString::new(&"VK_AMD_pipeline_compiler_control"[..]).unwrap());
        }
        if x.amd_rasterization_order {
            data.push(CString::new(&"VK_AMD_rasterization_order"[..]).unwrap());
        }
        if x.amd_shader_ballot {
            data.push(CString::new(&"VK_AMD_shader_ballot"[..]).unwrap());
        }
        if x.amd_shader_core_properties {
            data.push(CString::new(&"VK_AMD_shader_core_properties"[..]).unwrap());
        }
        if x.amd_shader_core_properties2 {
            data.push(CString::new(&"VK_AMD_shader_core_properties2"[..]).unwrap());
        }
        if x.amd_shader_explicit_vertex_parameter {
            data.push(CString::new(&"VK_AMD_shader_explicit_vertex_parameter"[..]).unwrap());
        }
        if x.amd_shader_fragment_mask {
            data.push(CString::new(&"VK_AMD_shader_fragment_mask"[..]).unwrap());
        }
        if x.amd_shader_image_load_store_lod {
            data.push(CString::new(&"VK_AMD_shader_image_load_store_lod"[..]).unwrap());
        }
        if x.amd_shader_info {
            data.push(CString::new(&"VK_AMD_shader_info"[..]).unwrap());
        }
        if x.amd_shader_trinary_minmax {
            data.push(CString::new(&"VK_AMD_shader_trinary_minmax"[..]).unwrap());
        }
        if x.amd_texture_gather_bias_lod {
            data.push(CString::new(&"VK_AMD_texture_gather_bias_lod"[..]).unwrap());
        }
        if x.android_external_memory_android_hardware_buffer {
            data.push(
                CString::new(&"VK_ANDROID_external_memory_android_hardware_buffer"[..]).unwrap(),
            );
        }
        if x.fuchsia_external_memory {
            data.push(CString::new(&"VK_FUCHSIA_external_memory"[..]).unwrap());
        }
        if x.fuchsia_external_semaphore {
            data.push(CString::new(&"VK_FUCHSIA_external_semaphore"[..]).unwrap());
        }
        if x.ggp_frame_token {
            data.push(CString::new(&"VK_GGP_frame_token"[..]).unwrap());
        }
        if x.google_decorate_string {
            data.push(CString::new(&"VK_GOOGLE_decorate_string"[..]).unwrap());
        }
        if x.google_display_timing {
            data.push(CString::new(&"VK_GOOGLE_display_timing"[..]).unwrap());
        }
        if x.google_hlsl_functionality1 {
            data.push(CString::new(&"VK_GOOGLE_hlsl_functionality1"[..]).unwrap());
        }
        if x.google_user_type {
            data.push(CString::new(&"VK_GOOGLE_user_type"[..]).unwrap());
        }
        if x.huawei_invocation_mask {
            data.push(CString::new(&"VK_HUAWEI_invocation_mask"[..]).unwrap());
        }
        if x.huawei_subpass_shading {
            data.push(CString::new(&"VK_HUAWEI_subpass_shading"[..]).unwrap());
        }
        if x.img_filter_cubic {
            data.push(CString::new(&"VK_IMG_filter_cubic"[..]).unwrap());
        }
        if x.img_format_pvrtc {
            data.push(CString::new(&"VK_IMG_format_pvrtc"[..]).unwrap());
        }
        if x.intel_performance_query {
            data.push(CString::new(&"VK_INTEL_performance_query"[..]).unwrap());
        }
        if x.intel_shader_integer_functions2 {
            data.push(CString::new(&"VK_INTEL_shader_integer_functions2"[..]).unwrap());
        }
        if x.nvx_binary_import {
            data.push(CString::new(&"VK_NVX_binary_import"[..]).unwrap());
        }
        if x.nvx_image_view_handle {
            data.push(CString::new(&"VK_NVX_image_view_handle"[..]).unwrap());
        }
        if x.nvx_multiview_per_view_attributes {
            data.push(CString::new(&"VK_NVX_multiview_per_view_attributes"[..]).unwrap());
        }
        if x.nv_acquire_winrt_display {
            data.push(CString::new(&"VK_NV_acquire_winrt_display"[..]).unwrap());
        }
        if x.nv_clip_space_w_scaling {
            data.push(CString::new(&"VK_NV_clip_space_w_scaling"[..]).unwrap());
        }
        if x.nv_compute_shader_derivatives {
            data.push(CString::new(&"VK_NV_compute_shader_derivatives"[..]).unwrap());
        }
        if x.nv_cooperative_matrix {
            data.push(CString::new(&"VK_NV_cooperative_matrix"[..]).unwrap());
        }
        if x.nv_corner_sampled_image {
            data.push(CString::new(&"VK_NV_corner_sampled_image"[..]).unwrap());
        }
        if x.nv_coverage_reduction_mode {
            data.push(CString::new(&"VK_NV_coverage_reduction_mode"[..]).unwrap());
        }
        if x.nv_dedicated_allocation {
            data.push(CString::new(&"VK_NV_dedicated_allocation"[..]).unwrap());
        }
        if x.nv_dedicated_allocation_image_aliasing {
            data.push(CString::new(&"VK_NV_dedicated_allocation_image_aliasing"[..]).unwrap());
        }
        if x.nv_device_diagnostic_checkpoints {
            data.push(CString::new(&"VK_NV_device_diagnostic_checkpoints"[..]).unwrap());
        }
        if x.nv_device_diagnostics_config {
            data.push(CString::new(&"VK_NV_device_diagnostics_config"[..]).unwrap());
        }
        if x.nv_device_generated_commands {
            data.push(CString::new(&"VK_NV_device_generated_commands"[..]).unwrap());
        }
        if x.nv_external_memory {
            data.push(CString::new(&"VK_NV_external_memory"[..]).unwrap());
        }
        if x.nv_external_memory_rdma {
            data.push(CString::new(&"VK_NV_external_memory_rdma"[..]).unwrap());
        }
        if x.nv_external_memory_win32 {
            data.push(CString::new(&"VK_NV_external_memory_win32"[..]).unwrap());
        }
        if x.nv_fill_rectangle {
            data.push(CString::new(&"VK_NV_fill_rectangle"[..]).unwrap());
        }
        if x.nv_fragment_coverage_to_color {
            data.push(CString::new(&"VK_NV_fragment_coverage_to_color"[..]).unwrap());
        }
        if x.nv_fragment_shader_barycentric {
            data.push(CString::new(&"VK_NV_fragment_shader_barycentric"[..]).unwrap());
        }
        if x.nv_fragment_shading_rate_enums {
            data.push(CString::new(&"VK_NV_fragment_shading_rate_enums"[..]).unwrap());
        }
        if x.nv_framebuffer_mixed_samples {
            data.push(CString::new(&"VK_NV_framebuffer_mixed_samples"[..]).unwrap());
        }
        if x.nv_geometry_shader_passthrough {
            data.push(CString::new(&"VK_NV_geometry_shader_passthrough"[..]).unwrap());
        }
        if x.nv_glsl_shader {
            data.push(CString::new(&"VK_NV_glsl_shader"[..]).unwrap());
        }
        if x.nv_inherited_viewport_scissor {
            data.push(CString::new(&"VK_NV_inherited_viewport_scissor"[..]).unwrap());
        }
        if x.nv_mesh_shader {
            data.push(CString::new(&"VK_NV_mesh_shader"[..]).unwrap());
        }
        if x.nv_ray_tracing {
            data.push(CString::new(&"VK_NV_ray_tracing"[..]).unwrap());
        }
        if x.nv_ray_tracing_motion_blur {
            data.push(CString::new(&"VK_NV_ray_tracing_motion_blur"[..]).unwrap());
        }
        if x.nv_representative_fragment_test {
            data.push(CString::new(&"VK_NV_representative_fragment_test"[..]).unwrap());
        }
        if x.nv_sample_mask_override_coverage {
            data.push(CString::new(&"VK_NV_sample_mask_override_coverage"[..]).unwrap());
        }
        if x.nv_scissor_exclusive {
            data.push(CString::new(&"VK_NV_scissor_exclusive"[..]).unwrap());
        }
        if x.nv_shader_image_footprint {
            data.push(CString::new(&"VK_NV_shader_image_footprint"[..]).unwrap());
        }
        if x.nv_shader_sm_builtins {
            data.push(CString::new(&"VK_NV_shader_sm_builtins"[..]).unwrap());
        }
        if x.nv_shader_subgroup_partitioned {
            data.push(CString::new(&"VK_NV_shader_subgroup_partitioned"[..]).unwrap());
        }
        if x.nv_shading_rate_image {
            data.push(CString::new(&"VK_NV_shading_rate_image"[..]).unwrap());
        }
        if x.nv_viewport_array2 {
            data.push(CString::new(&"VK_NV_viewport_array2"[..]).unwrap());
        }
        if x.nv_viewport_swizzle {
            data.push(CString::new(&"VK_NV_viewport_swizzle"[..]).unwrap());
        }
        if x.nv_win32_keyed_mutex {
            data.push(CString::new(&"VK_NV_win32_keyed_mutex"[..]).unwrap());
        }
        if x.qcom_render_pass_shader_resolve {
            data.push(CString::new(&"VK_QCOM_render_pass_shader_resolve"[..]).unwrap());
        }
        if x.qcom_render_pass_store_ops {
            data.push(CString::new(&"VK_QCOM_render_pass_store_ops"[..]).unwrap());
        }
        if x.qcom_render_pass_transform {
            data.push(CString::new(&"VK_QCOM_render_pass_transform"[..]).unwrap());
        }
        if x.qcom_rotated_copy_commands {
            data.push(CString::new(&"VK_QCOM_rotated_copy_commands"[..]).unwrap());
        }
        if x.valve_mutable_descriptor_type {
            data.push(CString::new(&"VK_VALVE_mutable_descriptor_type"[..]).unwrap());
        }
        data
    }
}
impl DeviceExtensions {
    #[doc = r" Checks enabled extensions against the device version, instance extensions and each other."]
    pub(super) fn check_requirements(
        &self,
        supported: &DeviceExtensions,
        api_version: Version,
        instance_extensions: &InstanceExtensions,
    ) -> Result<(), ExtensionRestrictionError> {
        let device_extensions = self;
        if self.khr_16bit_storage {
            if !supported.khr_16bit_storage {
                return Err(ExtensionRestrictionError {
                    extension: "khr_16bit_storage",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_16bit_storage",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_storage_buffer_storage_class)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_16bit_storage",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_storage_buffer_storage_class"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_8bit_storage {
            if !supported.khr_8bit_storage {
                return Err(ExtensionRestrictionError {
                    extension: "khr_8bit_storage",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_8bit_storage",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_storage_buffer_storage_class)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_8bit_storage",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_storage_buffer_storage_class"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_acceleration_structure {
            if !supported.khr_acceleration_structure {
                return Err(ExtensionRestrictionError {
                    extension: "khr_acceleration_structure",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_acceleration_structure",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.ext_descriptor_indexing) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_acceleration_structure",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["ext_descriptor_indexing"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_buffer_device_address) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_acceleration_structure",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_buffer_device_address"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_deferred_host_operations) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_acceleration_structure",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_deferred_host_operations"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_bind_memory2 {
            if !supported.khr_bind_memory2 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_bind_memory2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_buffer_device_address {
            if !supported.khr_buffer_device_address {
                return Err(ExtensionRestrictionError {
                    extension: "khr_buffer_device_address",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_buffer_device_address",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if self.ext_buffer_device_address {
                return Err(ExtensionRestrictionError {
                    extension: "khr_buffer_device_address",
                    restriction: ExtensionRestriction::ConflictsDeviceExtension(
                        "ext_buffer_device_address",
                    ),
                });
            }
        } else {
        }
        if self.khr_copy_commands2 {
            if !supported.khr_copy_commands2 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_copy_commands2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_create_renderpass2 {
            if !supported.khr_create_renderpass2 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_create_renderpass2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_multiview) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_create_renderpass2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_multiview"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_create_renderpass2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_dedicated_allocation {
            if !supported.khr_dedicated_allocation {
                return Err(ExtensionRestrictionError {
                    extension: "khr_dedicated_allocation",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_get_memory_requirements2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_dedicated_allocation",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_get_memory_requirements2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_deferred_host_operations {
            if !supported.khr_deferred_host_operations {
                return Err(ExtensionRestrictionError {
                    extension: "khr_deferred_host_operations",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_depth_stencil_resolve {
            if !supported.khr_depth_stencil_resolve {
                return Err(ExtensionRestrictionError {
                    extension: "khr_depth_stencil_resolve",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_create_renderpass2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_depth_stencil_resolve",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_create_renderpass2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_descriptor_update_template {
            if !supported.khr_descriptor_update_template {
                return Err(ExtensionRestrictionError {
                    extension: "khr_descriptor_update_template",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_device_group {
            if !supported.khr_device_group {
                return Err(ExtensionRestrictionError {
                    extension: "khr_device_group",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || instance_extensions.khr_device_group_creation) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_device_group",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_device_group_creation"],
                    }),
                });
            }
        } else {
        }
        if self.khr_display_swapchain {
            if !supported.khr_display_swapchain {
                return Err(ExtensionRestrictionError {
                    extension: "khr_display_swapchain",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_display_swapchain",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(instance_extensions.khr_display) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_display_swapchain",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_display"],
                    }),
                });
            }
        } else {
        }
        if self.khr_draw_indirect_count {
            if !supported.khr_draw_indirect_count {
                return Err(ExtensionRestrictionError {
                    extension: "khr_draw_indirect_count",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_driver_properties {
            if !supported.khr_driver_properties {
                return Err(ExtensionRestrictionError {
                    extension: "khr_driver_properties",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_driver_properties",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_fence {
            if !supported.khr_external_fence {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_fence",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_external_fence_capabilities)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_fence",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_external_fence_capabilities"],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_fence_fd {
            if !supported.khr_external_fence_fd {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_fence_fd",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_fence) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_fence_fd",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_fence"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_fence_win32 {
            if !supported.khr_external_fence_win32 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_fence_win32",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_fence) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_fence_win32",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_fence"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_memory {
            if !supported.khr_external_memory {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_memory",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_external_memory_capabilities)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_memory",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_external_memory_capabilities"],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_memory_fd {
            if !supported.khr_external_memory_fd {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_memory_fd",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_memory_fd",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_memory_win32 {
            if !supported.khr_external_memory_win32 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_memory_win32",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_memory_win32",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_semaphore {
            if !supported.khr_external_semaphore {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_semaphore",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_external_semaphore_capabilities)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_semaphore",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_external_semaphore_capabilities"],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_semaphore_fd {
            if !supported.khr_external_semaphore_fd {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_semaphore_fd",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_semaphore) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_semaphore_fd",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_semaphore"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_external_semaphore_win32 {
            if !supported.khr_external_semaphore_win32 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_semaphore_win32",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_semaphore) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_external_semaphore_win32",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_semaphore"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_fragment_shading_rate {
            if !supported.khr_fragment_shading_rate {
                return Err(ExtensionRestrictionError {
                    extension: "khr_fragment_shading_rate",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_create_renderpass2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_fragment_shading_rate",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_create_renderpass2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_fragment_shading_rate",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_get_memory_requirements2 {
            if !supported.khr_get_memory_requirements2 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_get_memory_requirements2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_image_format_list {
            if !supported.khr_image_format_list {
                return Err(ExtensionRestrictionError {
                    extension: "khr_image_format_list",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_imageless_framebuffer {
            if !supported.khr_imageless_framebuffer {
                return Err(ExtensionRestrictionError {
                    extension: "khr_imageless_framebuffer",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_imageless_framebuffer",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_image_format_list) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_imageless_framebuffer",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_image_format_list"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_incremental_present {
            if !supported.khr_incremental_present {
                return Err(ExtensionRestrictionError {
                    extension: "khr_incremental_present",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_incremental_present",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_maintenance1 {
            if !supported.khr_maintenance1 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_maintenance1",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_maintenance2 {
            if !supported.khr_maintenance2 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_maintenance2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_maintenance3 {
            if !supported.khr_maintenance3 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_maintenance3",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_maintenance3",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_multiview {
            if !supported.khr_multiview {
                return Err(ExtensionRestrictionError {
                    extension: "khr_multiview",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_multiview",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_performance_query {
            if !supported.khr_performance_query {
                return Err(ExtensionRestrictionError {
                    extension: "khr_performance_query",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_performance_query",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_pipeline_executable_properties {
            if !supported.khr_pipeline_executable_properties {
                return Err(ExtensionRestrictionError {
                    extension: "khr_pipeline_executable_properties",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_pipeline_executable_properties",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_pipeline_library {
            if !supported.khr_pipeline_library {
                return Err(ExtensionRestrictionError {
                    extension: "khr_pipeline_library",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_portability_subset {
            if !supported.khr_portability_subset {
                return Err(ExtensionRestrictionError {
                    extension: "khr_portability_subset",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_portability_subset",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
            if supported.khr_portability_subset {
                return Err(ExtensionRestrictionError {
                    extension: "khr_portability_subset",
                    restriction: ExtensionRestriction::RequiredIfSupported,
                });
            }
        }
        if self.khr_present_id {
            if !supported.khr_present_id {
                return Err(ExtensionRestrictionError {
                    extension: "khr_present_id",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_present_id",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_present_wait {
            if !supported.khr_present_wait {
                return Err(ExtensionRestrictionError {
                    extension: "khr_present_wait",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_present_wait",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_present_id) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_present_wait",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_present_id"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_push_descriptor {
            if !supported.khr_push_descriptor {
                return Err(ExtensionRestrictionError {
                    extension: "khr_push_descriptor",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_push_descriptor",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_ray_query {
            if !supported.khr_ray_query {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_query",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_query",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_spirv_1_4) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_query",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_spirv_1_4"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_query",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_acceleration_structure"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_ray_tracing_pipeline {
            if !supported.khr_ray_tracing_pipeline {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_tracing_pipeline",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_tracing_pipeline",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_spirv_1_4) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_tracing_pipeline",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_spirv_1_4"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_acceleration_structure) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_ray_tracing_pipeline",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_acceleration_structure"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_relaxed_block_layout {
            if !supported.khr_relaxed_block_layout {
                return Err(ExtensionRestrictionError {
                    extension: "khr_relaxed_block_layout",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_sampler_mirror_clamp_to_edge {
            if !supported.khr_sampler_mirror_clamp_to_edge {
                return Err(ExtensionRestrictionError {
                    extension: "khr_sampler_mirror_clamp_to_edge",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_sampler_ycbcr_conversion {
            if !supported.khr_sampler_ycbcr_conversion {
                return Err(ExtensionRestrictionError {
                    extension: "khr_sampler_ycbcr_conversion",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_sampler_ycbcr_conversion",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance1"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_bind_memory2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_sampler_ycbcr_conversion",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_bind_memory2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_get_memory_requirements2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_sampler_ycbcr_conversion",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_get_memory_requirements2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_sampler_ycbcr_conversion",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_separate_depth_stencil_layouts {
            if !supported.khr_separate_depth_stencil_layouts {
                return Err(ExtensionRestrictionError {
                    extension: "khr_separate_depth_stencil_layouts",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_separate_depth_stencil_layouts",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_create_renderpass2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_separate_depth_stencil_layouts",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_create_renderpass2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_atomic_int64 {
            if !supported.khr_shader_atomic_int64 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_atomic_int64",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_atomic_int64",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_clock {
            if !supported.khr_shader_clock {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_clock",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_clock",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_draw_parameters {
            if !supported.khr_shader_draw_parameters {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_draw_parameters",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_shader_float16_int8 {
            if !supported.khr_shader_float16_int8 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_float16_int8",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_float16_int8",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_float_controls {
            if !supported.khr_shader_float_controls {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_float_controls",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_float_controls",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_integer_dot_product {
            if !supported.khr_shader_integer_dot_product {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_integer_dot_product",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_integer_dot_product",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_non_semantic_info {
            if !supported.khr_shader_non_semantic_info {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_non_semantic_info",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_shader_subgroup_extended_types {
            if !supported.khr_shader_subgroup_extended_types {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_subgroup_extended_types",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_subgroup_extended_types",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_subgroup_uniform_control_flow {
            if !supported.khr_shader_subgroup_uniform_control_flow {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_subgroup_uniform_control_flow",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_subgroup_uniform_control_flow",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_shader_terminate_invocation {
            if !supported.khr_shader_terminate_invocation {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_terminate_invocation",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shader_terminate_invocation",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_shared_presentable_image {
            if !supported.khr_shared_presentable_image {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shared_presentable_image",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shared_presentable_image",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shared_presentable_image",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_shared_presentable_image",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_get_surface_capabilities2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_spirv_1_4 {
            if !supported.khr_spirv_1_4 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_spirv_1_4",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_spirv_1_4",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_shader_float_controls) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_spirv_1_4",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_shader_float_controls"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_storage_buffer_storage_class {
            if !supported.khr_storage_buffer_storage_class {
                return Err(ExtensionRestrictionError {
                    extension: "khr_storage_buffer_storage_class",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_swapchain {
            if !supported.khr_swapchain {
                return Err(ExtensionRestrictionError {
                    extension: "khr_swapchain",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(instance_extensions.khr_surface) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_swapchain",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_surface"],
                    }),
                });
            }
        } else {
        }
        if self.khr_swapchain_mutable_format {
            if !supported.khr_swapchain_mutable_format {
                return Err(ExtensionRestrictionError {
                    extension: "khr_swapchain_mutable_format",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_swapchain_mutable_format",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_swapchain_mutable_format",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_image_format_list) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_swapchain_mutable_format",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_image_format_list"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_synchronization2 {
            if !supported.khr_synchronization2 {
                return Err(ExtensionRestrictionError {
                    extension: "khr_synchronization2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_synchronization2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_timeline_semaphore {
            if !supported.khr_timeline_semaphore {
                return Err(ExtensionRestrictionError {
                    extension: "khr_timeline_semaphore",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_timeline_semaphore",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_uniform_buffer_standard_layout {
            if !supported.khr_uniform_buffer_standard_layout {
                return Err(ExtensionRestrictionError {
                    extension: "khr_uniform_buffer_standard_layout",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_uniform_buffer_standard_layout",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_variable_pointers {
            if !supported.khr_variable_pointers {
                return Err(ExtensionRestrictionError {
                    extension: "khr_variable_pointers",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_variable_pointers",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_storage_buffer_storage_class)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_variable_pointers",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_storage_buffer_storage_class"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_video_decode_queue {
            if !supported.khr_video_decode_queue {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_decode_queue",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_video_queue) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_decode_queue",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_video_queue"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_synchronization2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_decode_queue",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_synchronization2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_video_encode_queue {
            if !supported.khr_video_encode_queue {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_encode_queue",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_video_queue) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_encode_queue",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_video_queue"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_synchronization2) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_encode_queue",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_synchronization2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_video_queue {
            if !supported.khr_video_queue {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_queue",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_queue",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_sampler_ycbcr_conversion) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_video_queue",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_sampler_ycbcr_conversion"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_vulkan_memory_model {
            if !supported.khr_vulkan_memory_model {
                return Err(ExtensionRestrictionError {
                    extension: "khr_vulkan_memory_model",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.khr_win32_keyed_mutex {
            if !supported.khr_win32_keyed_mutex {
                return Err(ExtensionRestrictionError {
                    extension: "khr_win32_keyed_mutex",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_external_memory_win32) {
                return Err(ExtensionRestrictionError {
                    extension: "khr_win32_keyed_mutex",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_external_memory_win32"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.khr_workgroup_memory_explicit_layout {
            if !supported.khr_workgroup_memory_explicit_layout {
                return Err(ExtensionRestrictionError {
                    extension: "khr_workgroup_memory_explicit_layout",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_workgroup_memory_explicit_layout",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.khr_zero_initialize_workgroup_memory {
            if !supported.khr_zero_initialize_workgroup_memory {
                return Err(ExtensionRestrictionError {
                    extension: "khr_zero_initialize_workgroup_memory",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "khr_zero_initialize_workgroup_memory",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_4444_formats {
            if !supported.ext_4444_formats {
                return Err(ExtensionRestrictionError {
                    extension: "ext_4444_formats",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_4444_formats",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_astc_decode_mode {
            if !supported.ext_astc_decode_mode {
                return Err(ExtensionRestrictionError {
                    extension: "ext_astc_decode_mode",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_astc_decode_mode",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_blend_operation_advanced {
            if !supported.ext_blend_operation_advanced {
                return Err(ExtensionRestrictionError {
                    extension: "ext_blend_operation_advanced",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_buffer_device_address {
            if !supported.ext_buffer_device_address {
                return Err(ExtensionRestrictionError {
                    extension: "ext_buffer_device_address",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_buffer_device_address",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if self.khr_buffer_device_address {
                return Err(ExtensionRestrictionError {
                    extension: "ext_buffer_device_address",
                    restriction: ExtensionRestriction::ConflictsDeviceExtension(
                        "khr_buffer_device_address",
                    ),
                });
            }
        } else {
        }
        if self.ext_calibrated_timestamps {
            if !supported.ext_calibrated_timestamps {
                return Err(ExtensionRestrictionError {
                    extension: "ext_calibrated_timestamps",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_calibrated_timestamps",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_color_write_enable {
            if !supported.ext_color_write_enable {
                return Err(ExtensionRestrictionError {
                    extension: "ext_color_write_enable",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_color_write_enable",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_conditional_rendering {
            if !supported.ext_conditional_rendering {
                return Err(ExtensionRestrictionError {
                    extension: "ext_conditional_rendering",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_conservative_rasterization {
            if !supported.ext_conservative_rasterization {
                return Err(ExtensionRestrictionError {
                    extension: "ext_conservative_rasterization",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_conservative_rasterization",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_custom_border_color {
            if !supported.ext_custom_border_color {
                return Err(ExtensionRestrictionError {
                    extension: "ext_custom_border_color",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_debug_marker {
            if !supported.ext_debug_marker {
                return Err(ExtensionRestrictionError {
                    extension: "ext_debug_marker",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(instance_extensions.ext_debug_report) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_debug_marker",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["ext_debug_report"],
                    }),
                });
            }
        } else {
        }
        if self.ext_depth_clip_enable {
            if !supported.ext_depth_clip_enable {
                return Err(ExtensionRestrictionError {
                    extension: "ext_depth_clip_enable",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_depth_range_unrestricted {
            if !supported.ext_depth_range_unrestricted {
                return Err(ExtensionRestrictionError {
                    extension: "ext_depth_range_unrestricted",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_descriptor_indexing {
            if !supported.ext_descriptor_indexing {
                return Err(ExtensionRestrictionError {
                    extension: "ext_descriptor_indexing",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_descriptor_indexing",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance3) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_descriptor_indexing",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance3"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_device_memory_report {
            if !supported.ext_device_memory_report {
                return Err(ExtensionRestrictionError {
                    extension: "ext_device_memory_report",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_device_memory_report",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_discard_rectangles {
            if !supported.ext_discard_rectangles {
                return Err(ExtensionRestrictionError {
                    extension: "ext_discard_rectangles",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_discard_rectangles",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_display_control {
            if !supported.ext_display_control {
                return Err(ExtensionRestrictionError {
                    extension: "ext_display_control",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(instance_extensions.ext_display_surface_counter) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_display_control",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["ext_display_surface_counter"],
                    }),
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_display_control",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_extended_dynamic_state {
            if !supported.ext_extended_dynamic_state {
                return Err(ExtensionRestrictionError {
                    extension: "ext_extended_dynamic_state",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_extended_dynamic_state",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_extended_dynamic_state2 {
            if !supported.ext_extended_dynamic_state2 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_extended_dynamic_state2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_extended_dynamic_state2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_external_memory_dma_buf {
            if !supported.ext_external_memory_dma_buf {
                return Err(ExtensionRestrictionError {
                    extension: "ext_external_memory_dma_buf",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_external_memory_fd) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_external_memory_dma_buf",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_external_memory_fd"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_external_memory_host {
            if !supported.ext_external_memory_host {
                return Err(ExtensionRestrictionError {
                    extension: "ext_external_memory_host",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_external_memory_host",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_filter_cubic {
            if !supported.ext_filter_cubic {
                return Err(ExtensionRestrictionError {
                    extension: "ext_filter_cubic",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_fragment_density_map {
            if !supported.ext_fragment_density_map {
                return Err(ExtensionRestrictionError {
                    extension: "ext_fragment_density_map",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_fragment_density_map",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_fragment_density_map2 {
            if !supported.ext_fragment_density_map2 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_fragment_density_map2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.ext_fragment_density_map) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_fragment_density_map2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["ext_fragment_density_map"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_fragment_shader_interlock {
            if !supported.ext_fragment_shader_interlock {
                return Err(ExtensionRestrictionError {
                    extension: "ext_fragment_shader_interlock",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_fragment_shader_interlock",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_full_screen_exclusive {
            if !supported.ext_full_screen_exclusive {
                return Err(ExtensionRestrictionError {
                    extension: "ext_full_screen_exclusive",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_full_screen_exclusive",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(instance_extensions.khr_surface) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_full_screen_exclusive",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_surface"],
                    }),
                });
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_full_screen_exclusive",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_get_surface_capabilities2"],
                    }),
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_full_screen_exclusive",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_global_priority {
            if !supported.ext_global_priority {
                return Err(ExtensionRestrictionError {
                    extension: "ext_global_priority",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_global_priority_query {
            if !supported.ext_global_priority_query {
                return Err(ExtensionRestrictionError {
                    extension: "ext_global_priority_query",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.ext_global_priority) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_global_priority_query",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["ext_global_priority"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_global_priority_query",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_hdr_metadata {
            if !supported.ext_hdr_metadata {
                return Err(ExtensionRestrictionError {
                    extension: "ext_hdr_metadata",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_hdr_metadata",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_host_query_reset {
            if !supported.ext_host_query_reset {
                return Err(ExtensionRestrictionError {
                    extension: "ext_host_query_reset",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_host_query_reset",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_image_drm_format_modifier {
            if !supported.ext_image_drm_format_modifier {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_drm_format_modifier",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_bind_memory2) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_drm_format_modifier",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_bind_memory2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_drm_format_modifier",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_image_format_list) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_drm_format_modifier",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_image_format_list"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_sampler_ycbcr_conversion) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_drm_format_modifier",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_sampler_ycbcr_conversion"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_image_robustness {
            if !supported.ext_image_robustness {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_robustness",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_image_robustness",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_index_type_uint8 {
            if !supported.ext_index_type_uint8 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_index_type_uint8",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_inline_uniform_block {
            if !supported.ext_inline_uniform_block {
                return Err(ExtensionRestrictionError {
                    extension: "ext_inline_uniform_block",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_inline_uniform_block",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance1) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_inline_uniform_block",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance1"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_line_rasterization {
            if !supported.ext_line_rasterization {
                return Err(ExtensionRestrictionError {
                    extension: "ext_line_rasterization",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_line_rasterization",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_load_store_op_none {
            if !supported.ext_load_store_op_none {
                return Err(ExtensionRestrictionError {
                    extension: "ext_load_store_op_none",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_memory_budget {
            if !supported.ext_memory_budget {
                return Err(ExtensionRestrictionError {
                    extension: "ext_memory_budget",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_memory_budget",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_memory_priority {
            if !supported.ext_memory_priority {
                return Err(ExtensionRestrictionError {
                    extension: "ext_memory_priority",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_memory_priority",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_multi_draw {
            if !supported.ext_multi_draw {
                return Err(ExtensionRestrictionError {
                    extension: "ext_multi_draw",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_pageable_device_local_memory {
            if !supported.ext_pageable_device_local_memory {
                return Err(ExtensionRestrictionError {
                    extension: "ext_pageable_device_local_memory",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.ext_memory_priority) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_pageable_device_local_memory",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["ext_memory_priority"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_pci_bus_info {
            if !supported.ext_pci_bus_info {
                return Err(ExtensionRestrictionError {
                    extension: "ext_pci_bus_info",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_pci_bus_info",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_physical_device_drm {
            if !supported.ext_physical_device_drm {
                return Err(ExtensionRestrictionError {
                    extension: "ext_physical_device_drm",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_physical_device_drm",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_pipeline_creation_cache_control {
            if !supported.ext_pipeline_creation_cache_control {
                return Err(ExtensionRestrictionError {
                    extension: "ext_pipeline_creation_cache_control",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_pipeline_creation_feedback {
            if !supported.ext_pipeline_creation_feedback {
                return Err(ExtensionRestrictionError {
                    extension: "ext_pipeline_creation_feedback",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_post_depth_coverage {
            if !supported.ext_post_depth_coverage {
                return Err(ExtensionRestrictionError {
                    extension: "ext_post_depth_coverage",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_primitive_topology_list_restart {
            if !supported.ext_primitive_topology_list_restart {
                return Err(ExtensionRestrictionError {
                    extension: "ext_primitive_topology_list_restart",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_private_data {
            if !supported.ext_private_data {
                return Err(ExtensionRestrictionError {
                    extension: "ext_private_data",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_provoking_vertex {
            if !supported.ext_provoking_vertex {
                return Err(ExtensionRestrictionError {
                    extension: "ext_provoking_vertex",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_provoking_vertex",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_queue_family_foreign {
            if !supported.ext_queue_family_foreign {
                return Err(ExtensionRestrictionError {
                    extension: "ext_queue_family_foreign",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_queue_family_foreign",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_robustness2 {
            if !supported.ext_robustness2 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_robustness2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_sample_locations {
            if !supported.ext_sample_locations {
                return Err(ExtensionRestrictionError {
                    extension: "ext_sample_locations",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_sample_locations",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_sampler_filter_minmax {
            if !supported.ext_sampler_filter_minmax {
                return Err(ExtensionRestrictionError {
                    extension: "ext_sampler_filter_minmax",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_sampler_filter_minmax",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_scalar_block_layout {
            if !supported.ext_scalar_block_layout {
                return Err(ExtensionRestrictionError {
                    extension: "ext_scalar_block_layout",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_scalar_block_layout",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_separate_stencil_usage {
            if !supported.ext_separate_stencil_usage {
                return Err(ExtensionRestrictionError {
                    extension: "ext_separate_stencil_usage",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_shader_atomic_float {
            if !supported.ext_shader_atomic_float {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_atomic_float",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_atomic_float",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_shader_atomic_float2 {
            if !supported.ext_shader_atomic_float2 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_atomic_float2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.ext_shader_atomic_float) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_atomic_float2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["ext_shader_atomic_float"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_shader_demote_to_helper_invocation {
            if !supported.ext_shader_demote_to_helper_invocation {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_demote_to_helper_invocation",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_demote_to_helper_invocation",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_shader_image_atomic_int64 {
            if !supported.ext_shader_image_atomic_int64 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_image_atomic_int64",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_image_atomic_int64",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_shader_stencil_export {
            if !supported.ext_shader_stencil_export {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_stencil_export",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_shader_subgroup_ballot {
            if !supported.ext_shader_subgroup_ballot {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_subgroup_ballot",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_shader_subgroup_vote {
            if !supported.ext_shader_subgroup_vote {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_subgroup_vote",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_shader_viewport_index_layer {
            if !supported.ext_shader_viewport_index_layer {
                return Err(ExtensionRestrictionError {
                    extension: "ext_shader_viewport_index_layer",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_subgroup_size_control {
            if !supported.ext_subgroup_size_control {
                return Err(ExtensionRestrictionError {
                    extension: "ext_subgroup_size_control",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_subgroup_size_control",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_texel_buffer_alignment {
            if !supported.ext_texel_buffer_alignment {
                return Err(ExtensionRestrictionError {
                    extension: "ext_texel_buffer_alignment",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_texel_buffer_alignment",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_texture_compression_astc_hdr {
            if !supported.ext_texture_compression_astc_hdr {
                return Err(ExtensionRestrictionError {
                    extension: "ext_texture_compression_astc_hdr",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_texture_compression_astc_hdr",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_tooling_info {
            if !supported.ext_tooling_info {
                return Err(ExtensionRestrictionError {
                    extension: "ext_tooling_info",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_transform_feedback {
            if !supported.ext_transform_feedback {
                return Err(ExtensionRestrictionError {
                    extension: "ext_transform_feedback",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_transform_feedback",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_validation_cache {
            if !supported.ext_validation_cache {
                return Err(ExtensionRestrictionError {
                    extension: "ext_validation_cache",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.ext_vertex_attribute_divisor {
            if !supported.ext_vertex_attribute_divisor {
                return Err(ExtensionRestrictionError {
                    extension: "ext_vertex_attribute_divisor",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_vertex_attribute_divisor",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_vertex_input_dynamic_state {
            if !supported.ext_vertex_input_dynamic_state {
                return Err(ExtensionRestrictionError {
                    extension: "ext_vertex_input_dynamic_state",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "ext_vertex_input_dynamic_state",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.ext_video_decode_h264 {
            if !supported.ext_video_decode_h264 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_video_decode_h264",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_video_decode_queue) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_video_decode_h264",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_video_decode_queue"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_video_decode_h265 {
            if !supported.ext_video_decode_h265 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_video_decode_h265",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_video_decode_queue) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_video_decode_h265",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_video_decode_queue"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_video_encode_h264 {
            if !supported.ext_video_encode_h264 {
                return Err(ExtensionRestrictionError {
                    extension: "ext_video_encode_h264",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_video_encode_queue) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_video_encode_h264",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_video_encode_queue"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_ycbcr_2plane_444_formats {
            if !supported.ext_ycbcr_2plane_444_formats {
                return Err(ExtensionRestrictionError {
                    extension: "ext_ycbcr_2plane_444_formats",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_sampler_ycbcr_conversion) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_ycbcr_2plane_444_formats",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_sampler_ycbcr_conversion"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ext_ycbcr_image_arrays {
            if !supported.ext_ycbcr_image_arrays {
                return Err(ExtensionRestrictionError {
                    extension: "ext_ycbcr_image_arrays",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_sampler_ycbcr_conversion) {
                return Err(ExtensionRestrictionError {
                    extension: "ext_ycbcr_image_arrays",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_sampler_ycbcr_conversion"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.amd_buffer_marker {
            if !supported.amd_buffer_marker {
                return Err(ExtensionRestrictionError {
                    extension: "amd_buffer_marker",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_device_coherent_memory {
            if !supported.amd_device_coherent_memory {
                return Err(ExtensionRestrictionError {
                    extension: "amd_device_coherent_memory",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_display_native_hdr {
            if !supported.amd_display_native_hdr {
                return Err(ExtensionRestrictionError {
                    extension: "amd_display_native_hdr",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "amd_display_native_hdr",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(instance_extensions.khr_get_surface_capabilities2) {
                return Err(ExtensionRestrictionError {
                    extension: "amd_display_native_hdr",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_get_surface_capabilities2"],
                    }),
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "amd_display_native_hdr",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.amd_draw_indirect_count {
            if !supported.amd_draw_indirect_count {
                return Err(ExtensionRestrictionError {
                    extension: "amd_draw_indirect_count",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_gcn_shader {
            if !supported.amd_gcn_shader {
                return Err(ExtensionRestrictionError {
                    extension: "amd_gcn_shader",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_gpu_shader_half_float {
            if !supported.amd_gpu_shader_half_float {
                return Err(ExtensionRestrictionError {
                    extension: "amd_gpu_shader_half_float",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_gpu_shader_int16 {
            if !supported.amd_gpu_shader_int16 {
                return Err(ExtensionRestrictionError {
                    extension: "amd_gpu_shader_int16",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_memory_overallocation_behavior {
            if !supported.amd_memory_overallocation_behavior {
                return Err(ExtensionRestrictionError {
                    extension: "amd_memory_overallocation_behavior",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_mixed_attachment_samples {
            if !supported.amd_mixed_attachment_samples {
                return Err(ExtensionRestrictionError {
                    extension: "amd_mixed_attachment_samples",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_pipeline_compiler_control {
            if !supported.amd_pipeline_compiler_control {
                return Err(ExtensionRestrictionError {
                    extension: "amd_pipeline_compiler_control",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_rasterization_order {
            if !supported.amd_rasterization_order {
                return Err(ExtensionRestrictionError {
                    extension: "amd_rasterization_order",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_shader_ballot {
            if !supported.amd_shader_ballot {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_ballot",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_shader_core_properties {
            if !supported.amd_shader_core_properties {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_core_properties",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_core_properties",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.amd_shader_core_properties2 {
            if !supported.amd_shader_core_properties2 {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_core_properties2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.amd_shader_core_properties) {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_core_properties2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["amd_shader_core_properties"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.amd_shader_explicit_vertex_parameter {
            if !supported.amd_shader_explicit_vertex_parameter {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_explicit_vertex_parameter",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_shader_fragment_mask {
            if !supported.amd_shader_fragment_mask {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_fragment_mask",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_shader_image_load_store_lod {
            if !supported.amd_shader_image_load_store_lod {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_image_load_store_lod",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_shader_info {
            if !supported.amd_shader_info {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_info",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_shader_trinary_minmax {
            if !supported.amd_shader_trinary_minmax {
                return Err(ExtensionRestrictionError {
                    extension: "amd_shader_trinary_minmax",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.amd_texture_gather_bias_lod {
            if !supported.amd_texture_gather_bias_lod {
                return Err(ExtensionRestrictionError {
                    extension: "amd_texture_gather_bias_lod",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "amd_texture_gather_bias_lod",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.android_external_memory_android_hardware_buffer {
            if !supported.android_external_memory_android_hardware_buffer {
                return Err(ExtensionRestrictionError {
                    extension: "android_external_memory_android_hardware_buffer",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_sampler_ycbcr_conversion) {
                return Err(ExtensionRestrictionError {
                    extension: "android_external_memory_android_hardware_buffer",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_sampler_ycbcr_conversion"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "android_external_memory_android_hardware_buffer",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.ext_queue_family_foreign) {
                return Err(ExtensionRestrictionError {
                    extension: "android_external_memory_android_hardware_buffer",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["ext_queue_family_foreign"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_dedicated_allocation) {
                return Err(ExtensionRestrictionError {
                    extension: "android_external_memory_android_hardware_buffer",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_dedicated_allocation"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.fuchsia_external_memory {
            if !supported.fuchsia_external_memory {
                return Err(ExtensionRestrictionError {
                    extension: "fuchsia_external_memory",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_external_memory_capabilities)
            {
                return Err(ExtensionRestrictionError {
                    extension: "fuchsia_external_memory",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_external_memory_capabilities"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "fuchsia_external_memory",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.fuchsia_external_semaphore {
            if !supported.fuchsia_external_semaphore {
                return Err(ExtensionRestrictionError {
                    extension: "fuchsia_external_semaphore",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_external_semaphore_capabilities)
            {
                return Err(ExtensionRestrictionError {
                    extension: "fuchsia_external_semaphore",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_external_semaphore_capabilities"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_semaphore) {
                return Err(ExtensionRestrictionError {
                    extension: "fuchsia_external_semaphore",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_semaphore"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.ggp_frame_token {
            if !supported.ggp_frame_token {
                return Err(ExtensionRestrictionError {
                    extension: "ggp_frame_token",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "ggp_frame_token",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(instance_extensions.ggp_stream_descriptor_surface) {
                return Err(ExtensionRestrictionError {
                    extension: "ggp_frame_token",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["ggp_stream_descriptor_surface"],
                    }),
                });
            }
        } else {
        }
        if self.google_decorate_string {
            if !supported.google_decorate_string {
                return Err(ExtensionRestrictionError {
                    extension: "google_decorate_string",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.google_display_timing {
            if !supported.google_display_timing {
                return Err(ExtensionRestrictionError {
                    extension: "google_display_timing",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "google_display_timing",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.google_hlsl_functionality1 {
            if !supported.google_hlsl_functionality1 {
                return Err(ExtensionRestrictionError {
                    extension: "google_hlsl_functionality1",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.google_user_type {
            if !supported.google_user_type {
                return Err(ExtensionRestrictionError {
                    extension: "google_user_type",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.huawei_invocation_mask {
            if !supported.huawei_invocation_mask {
                return Err(ExtensionRestrictionError {
                    extension: "huawei_invocation_mask",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(ExtensionRestrictionError {
                    extension: "huawei_invocation_mask",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_ray_tracing_pipeline"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_synchronization2) {
                return Err(ExtensionRestrictionError {
                    extension: "huawei_invocation_mask",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_synchronization2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.huawei_subpass_shading {
            if !supported.huawei_subpass_shading {
                return Err(ExtensionRestrictionError {
                    extension: "huawei_subpass_shading",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_2 || device_extensions.khr_create_renderpass2) {
                return Err(ExtensionRestrictionError {
                    extension: "huawei_subpass_shading",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_2),
                        device_extensions: &["khr_create_renderpass2"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_synchronization2) {
                return Err(ExtensionRestrictionError {
                    extension: "huawei_subpass_shading",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_synchronization2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.img_filter_cubic {
            if !supported.img_filter_cubic {
                return Err(ExtensionRestrictionError {
                    extension: "img_filter_cubic",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.img_format_pvrtc {
            if !supported.img_format_pvrtc {
                return Err(ExtensionRestrictionError {
                    extension: "img_format_pvrtc",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.intel_performance_query {
            if !supported.intel_performance_query {
                return Err(ExtensionRestrictionError {
                    extension: "intel_performance_query",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.intel_shader_integer_functions2 {
            if !supported.intel_shader_integer_functions2 {
                return Err(ExtensionRestrictionError {
                    extension: "intel_shader_integer_functions2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "intel_shader_integer_functions2",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nvx_binary_import {
            if !supported.nvx_binary_import {
                return Err(ExtensionRestrictionError {
                    extension: "nvx_binary_import",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nvx_image_view_handle {
            if !supported.nvx_image_view_handle {
                return Err(ExtensionRestrictionError {
                    extension: "nvx_image_view_handle",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nvx_multiview_per_view_attributes {
            if !supported.nvx_multiview_per_view_attributes {
                return Err(ExtensionRestrictionError {
                    extension: "nvx_multiview_per_view_attributes",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_multiview) {
                return Err(ExtensionRestrictionError {
                    extension: "nvx_multiview_per_view_attributes",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_multiview"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_acquire_winrt_display {
            if !supported.nv_acquire_winrt_display {
                return Err(ExtensionRestrictionError {
                    extension: "nv_acquire_winrt_display",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(instance_extensions.ext_direct_mode_display) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_acquire_winrt_display",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["ext_direct_mode_display"],
                    }),
                });
            }
        } else {
        }
        if self.nv_clip_space_w_scaling {
            if !supported.nv_clip_space_w_scaling {
                return Err(ExtensionRestrictionError {
                    extension: "nv_clip_space_w_scaling",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_compute_shader_derivatives {
            if !supported.nv_compute_shader_derivatives {
                return Err(ExtensionRestrictionError {
                    extension: "nv_compute_shader_derivatives",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_compute_shader_derivatives",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_cooperative_matrix {
            if !supported.nv_cooperative_matrix {
                return Err(ExtensionRestrictionError {
                    extension: "nv_cooperative_matrix",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_cooperative_matrix",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_corner_sampled_image {
            if !supported.nv_corner_sampled_image {
                return Err(ExtensionRestrictionError {
                    extension: "nv_corner_sampled_image",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_corner_sampled_image",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_coverage_reduction_mode {
            if !supported.nv_coverage_reduction_mode {
                return Err(ExtensionRestrictionError {
                    extension: "nv_coverage_reduction_mode",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.nv_framebuffer_mixed_samples) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_coverage_reduction_mode",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["nv_framebuffer_mixed_samples"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_dedicated_allocation {
            if !supported.nv_dedicated_allocation {
                return Err(ExtensionRestrictionError {
                    extension: "nv_dedicated_allocation",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_dedicated_allocation_image_aliasing {
            if !supported.nv_dedicated_allocation_image_aliasing {
                return Err(ExtensionRestrictionError {
                    extension: "nv_dedicated_allocation_image_aliasing",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_dedicated_allocation) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_dedicated_allocation_image_aliasing",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_dedicated_allocation"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_device_diagnostic_checkpoints {
            if !supported.nv_device_diagnostic_checkpoints {
                return Err(ExtensionRestrictionError {
                    extension: "nv_device_diagnostic_checkpoints",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_device_diagnostic_checkpoints",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_device_diagnostics_config {
            if !supported.nv_device_diagnostics_config {
                return Err(ExtensionRestrictionError {
                    extension: "nv_device_diagnostics_config",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_device_diagnostics_config",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_device_generated_commands {
            if !supported.nv_device_generated_commands {
                return Err(ExtensionRestrictionError {
                    extension: "nv_device_generated_commands",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_device_generated_commands",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_external_memory {
            if !supported.nv_external_memory {
                return Err(ExtensionRestrictionError {
                    extension: "nv_external_memory",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(instance_extensions.nv_external_memory_capabilities) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_external_memory",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["nv_external_memory_capabilities"],
                    }),
                });
            }
        } else {
        }
        if self.nv_external_memory_rdma {
            if !supported.nv_external_memory_rdma {
                return Err(ExtensionRestrictionError {
                    extension: "nv_external_memory_rdma",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_external_memory_rdma",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_external_memory_win32 {
            if !supported.nv_external_memory_win32 {
                return Err(ExtensionRestrictionError {
                    extension: "nv_external_memory_win32",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.nv_external_memory) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_external_memory_win32",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["nv_external_memory"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_fill_rectangle {
            if !supported.nv_fill_rectangle {
                return Err(ExtensionRestrictionError {
                    extension: "nv_fill_rectangle",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_fragment_coverage_to_color {
            if !supported.nv_fragment_coverage_to_color {
                return Err(ExtensionRestrictionError {
                    extension: "nv_fragment_coverage_to_color",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_fragment_shader_barycentric {
            if !supported.nv_fragment_shader_barycentric {
                return Err(ExtensionRestrictionError {
                    extension: "nv_fragment_shader_barycentric",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_fragment_shader_barycentric",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_fragment_shading_rate_enums {
            if !supported.nv_fragment_shading_rate_enums {
                return Err(ExtensionRestrictionError {
                    extension: "nv_fragment_shading_rate_enums",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_fragment_shading_rate) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_fragment_shading_rate_enums",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_fragment_shading_rate"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_framebuffer_mixed_samples {
            if !supported.nv_framebuffer_mixed_samples {
                return Err(ExtensionRestrictionError {
                    extension: "nv_framebuffer_mixed_samples",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_geometry_shader_passthrough {
            if !supported.nv_geometry_shader_passthrough {
                return Err(ExtensionRestrictionError {
                    extension: "nv_geometry_shader_passthrough",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_glsl_shader {
            if !supported.nv_glsl_shader {
                return Err(ExtensionRestrictionError {
                    extension: "nv_glsl_shader",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_inherited_viewport_scissor {
            if !supported.nv_inherited_viewport_scissor {
                return Err(ExtensionRestrictionError {
                    extension: "nv_inherited_viewport_scissor",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_mesh_shader {
            if !supported.nv_mesh_shader {
                return Err(ExtensionRestrictionError {
                    extension: "nv_mesh_shader",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_mesh_shader",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_ray_tracing {
            if !supported.nv_ray_tracing {
                return Err(ExtensionRestrictionError {
                    extension: "nv_ray_tracing",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_ray_tracing",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_get_memory_requirements2) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_ray_tracing",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_get_memory_requirements2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_ray_tracing_motion_blur {
            if !supported.nv_ray_tracing_motion_blur {
                return Err(ExtensionRestrictionError {
                    extension: "nv_ray_tracing_motion_blur",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_ray_tracing_pipeline) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_ray_tracing_motion_blur",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_ray_tracing_pipeline"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_representative_fragment_test {
            if !supported.nv_representative_fragment_test {
                return Err(ExtensionRestrictionError {
                    extension: "nv_representative_fragment_test",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_sample_mask_override_coverage {
            if !supported.nv_sample_mask_override_coverage {
                return Err(ExtensionRestrictionError {
                    extension: "nv_sample_mask_override_coverage",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_scissor_exclusive {
            if !supported.nv_scissor_exclusive {
                return Err(ExtensionRestrictionError {
                    extension: "nv_scissor_exclusive",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_scissor_exclusive",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_shader_image_footprint {
            if !supported.nv_shader_image_footprint {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shader_image_footprint",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shader_image_footprint",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_shader_sm_builtins {
            if !supported.nv_shader_sm_builtins {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shader_sm_builtins",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shader_sm_builtins",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_shader_subgroup_partitioned {
            if !supported.nv_shader_subgroup_partitioned {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shader_subgroup_partitioned",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shader_subgroup_partitioned",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.nv_shading_rate_image {
            if !supported.nv_shading_rate_image {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shading_rate_image",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1
                || instance_extensions.khr_get_physical_device_properties2)
            {
                return Err(ExtensionRestrictionError {
                    extension: "nv_shading_rate_image",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &[],
                        instance_extensions: &["khr_get_physical_device_properties2"],
                    }),
                });
            }
        } else {
        }
        if self.nv_viewport_array2 {
            if !supported.nv_viewport_array2 {
                return Err(ExtensionRestrictionError {
                    extension: "nv_viewport_array2",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_viewport_swizzle {
            if !supported.nv_viewport_swizzle {
                return Err(ExtensionRestrictionError {
                    extension: "nv_viewport_swizzle",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.nv_win32_keyed_mutex {
            if !supported.nv_win32_keyed_mutex {
                return Err(ExtensionRestrictionError {
                    extension: "nv_win32_keyed_mutex",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.nv_external_memory_win32) {
                return Err(ExtensionRestrictionError {
                    extension: "nv_win32_keyed_mutex",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["nv_external_memory_win32"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.qcom_render_pass_shader_resolve {
            if !supported.qcom_render_pass_shader_resolve {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_render_pass_shader_resolve",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.qcom_render_pass_store_ops {
            if !supported.qcom_render_pass_store_ops {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_render_pass_store_ops",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
        } else {
        }
        if self.qcom_render_pass_transform {
            if !supported.qcom_render_pass_transform {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_render_pass_transform",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_render_pass_transform",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(instance_extensions.khr_surface) {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_render_pass_transform",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &[],
                        instance_extensions: &["khr_surface"],
                    }),
                });
            }
        } else {
        }
        if self.qcom_rotated_copy_commands {
            if !supported.qcom_rotated_copy_commands {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_rotated_copy_commands",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(device_extensions.khr_swapchain) {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_rotated_copy_commands",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_swapchain"],
                        instance_extensions: &[],
                    }),
                });
            }
            if !(device_extensions.khr_copy_commands2) {
                return Err(ExtensionRestrictionError {
                    extension: "qcom_rotated_copy_commands",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: None,
                        device_extensions: &["khr_copy_commands2"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        if self.valve_mutable_descriptor_type {
            if !supported.valve_mutable_descriptor_type {
                return Err(ExtensionRestrictionError {
                    extension: "valve_mutable_descriptor_type",
                    restriction: ExtensionRestriction::NotSupported,
                });
            }
            if !(api_version >= Version::V1_1 || device_extensions.khr_maintenance3) {
                return Err(ExtensionRestrictionError {
                    extension: "valve_mutable_descriptor_type",
                    restriction: ExtensionRestriction::Requires(OneOfRequirements {
                        api_version: Some(Version::V1_1),
                        device_extensions: &["khr_maintenance3"],
                        instance_extensions: &[],
                    }),
                });
            }
        } else {
        }
        Ok(())
    }
    pub(crate) fn required_if_supported_extensions() -> Self {
        Self {
            khr_16bit_storage: false,
            khr_8bit_storage: false,
            khr_acceleration_structure: false,
            khr_bind_memory2: false,
            khr_buffer_device_address: false,
            khr_copy_commands2: false,
            khr_create_renderpass2: false,
            khr_dedicated_allocation: false,
            khr_deferred_host_operations: false,
            khr_depth_stencil_resolve: false,
            khr_descriptor_update_template: false,
            khr_device_group: false,
            khr_display_swapchain: false,
            khr_draw_indirect_count: false,
            khr_driver_properties: false,
            khr_external_fence: false,
            khr_external_fence_fd: false,
            khr_external_fence_win32: false,
            khr_external_memory: false,
            khr_external_memory_fd: false,
            khr_external_memory_win32: false,
            khr_external_semaphore: false,
            khr_external_semaphore_fd: false,
            khr_external_semaphore_win32: false,
            khr_fragment_shading_rate: false,
            khr_get_memory_requirements2: false,
            khr_image_format_list: false,
            khr_imageless_framebuffer: false,
            khr_incremental_present: false,
            khr_maintenance1: false,
            khr_maintenance2: false,
            khr_maintenance3: false,
            khr_multiview: false,
            khr_performance_query: false,
            khr_pipeline_executable_properties: false,
            khr_pipeline_library: false,
            khr_portability_subset: true,
            khr_present_id: false,
            khr_present_wait: false,
            khr_push_descriptor: false,
            khr_ray_query: false,
            khr_ray_tracing_pipeline: false,
            khr_relaxed_block_layout: false,
            khr_sampler_mirror_clamp_to_edge: false,
            khr_sampler_ycbcr_conversion: false,
            khr_separate_depth_stencil_layouts: false,
            khr_shader_atomic_int64: false,
            khr_shader_clock: false,
            khr_shader_draw_parameters: false,
            khr_shader_float16_int8: false,
            khr_shader_float_controls: false,
            khr_shader_integer_dot_product: false,
            khr_shader_non_semantic_info: false,
            khr_shader_subgroup_extended_types: false,
            khr_shader_subgroup_uniform_control_flow: false,
            khr_shader_terminate_invocation: false,
            khr_shared_presentable_image: false,
            khr_spirv_1_4: false,
            khr_storage_buffer_storage_class: false,
            khr_swapchain: false,
            khr_swapchain_mutable_format: false,
            khr_synchronization2: false,
            khr_timeline_semaphore: false,
            khr_uniform_buffer_standard_layout: false,
            khr_variable_pointers: false,
            khr_video_decode_queue: false,
            khr_video_encode_queue: false,
            khr_video_queue: false,
            khr_vulkan_memory_model: false,
            khr_win32_keyed_mutex: false,
            khr_workgroup_memory_explicit_layout: false,
            khr_zero_initialize_workgroup_memory: false,
            ext_4444_formats: false,
            ext_astc_decode_mode: false,
            ext_blend_operation_advanced: false,
            ext_buffer_device_address: false,
            ext_calibrated_timestamps: false,
            ext_color_write_enable: false,
            ext_conditional_rendering: false,
            ext_conservative_rasterization: false,
            ext_custom_border_color: false,
            ext_debug_marker: false,
            ext_depth_clip_enable: false,
            ext_depth_range_unrestricted: false,
            ext_descriptor_indexing: false,
            ext_device_memory_report: false,
            ext_discard_rectangles: false,
            ext_display_control: false,
            ext_extended_dynamic_state: false,
            ext_extended_dynamic_state2: false,
            ext_external_memory_dma_buf: false,
            ext_external_memory_host: false,
            ext_filter_cubic: false,
            ext_fragment_density_map: false,
            ext_fragment_density_map2: false,
            ext_fragment_shader_interlock: false,
            ext_full_screen_exclusive: false,
            ext_global_priority: false,
            ext_global_priority_query: false,
            ext_hdr_metadata: false,
            ext_host_query_reset: false,
            ext_image_drm_format_modifier: false,
            ext_image_robustness: false,
            ext_index_type_uint8: false,
            ext_inline_uniform_block: false,
            ext_line_rasterization: false,
            ext_load_store_op_none: false,
            ext_memory_budget: false,
            ext_memory_priority: false,
            ext_multi_draw: false,
            ext_pageable_device_local_memory: false,
            ext_pci_bus_info: false,
            ext_physical_device_drm: false,
            ext_pipeline_creation_cache_control: false,
            ext_pipeline_creation_feedback: false,
            ext_post_depth_coverage: false,
            ext_primitive_topology_list_restart: false,
            ext_private_data: false,
            ext_provoking_vertex: false,
            ext_queue_family_foreign: false,
            ext_robustness2: false,
            ext_sample_locations: false,
            ext_sampler_filter_minmax: false,
            ext_scalar_block_layout: false,
            ext_separate_stencil_usage: false,
            ext_shader_atomic_float: false,
            ext_shader_atomic_float2: false,
            ext_shader_demote_to_helper_invocation: false,
            ext_shader_image_atomic_int64: false,
            ext_shader_stencil_export: false,
            ext_shader_subgroup_ballot: false,
            ext_shader_subgroup_vote: false,
            ext_shader_viewport_index_layer: false,
            ext_subgroup_size_control: false,
            ext_texel_buffer_alignment: false,
            ext_texture_compression_astc_hdr: false,
            ext_tooling_info: false,
            ext_transform_feedback: false,
            ext_validation_cache: false,
            ext_vertex_attribute_divisor: false,
            ext_vertex_input_dynamic_state: false,
            ext_video_decode_h264: false,
            ext_video_decode_h265: false,
            ext_video_encode_h264: false,
            ext_ycbcr_2plane_444_formats: false,
            ext_ycbcr_image_arrays: false,
            amd_buffer_marker: false,
            amd_device_coherent_memory: false,
            amd_display_native_hdr: false,
            amd_draw_indirect_count: false,
            amd_gcn_shader: false,
            amd_gpu_shader_half_float: false,
            amd_gpu_shader_int16: false,
            amd_memory_overallocation_behavior: false,
            amd_mixed_attachment_samples: false,
            amd_pipeline_compiler_control: false,
            amd_rasterization_order: false,
            amd_shader_ballot: false,
            amd_shader_core_properties: false,
            amd_shader_core_properties2: false,
            amd_shader_explicit_vertex_parameter: false,
            amd_shader_fragment_mask: false,
            amd_shader_image_load_store_lod: false,
            amd_shader_info: false,
            amd_shader_trinary_minmax: false,
            amd_texture_gather_bias_lod: false,
            android_external_memory_android_hardware_buffer: false,
            fuchsia_external_memory: false,
            fuchsia_external_semaphore: false,
            ggp_frame_token: false,
            google_decorate_string: false,
            google_display_timing: false,
            google_hlsl_functionality1: false,
            google_user_type: false,
            huawei_invocation_mask: false,
            huawei_subpass_shading: false,
            img_filter_cubic: false,
            img_format_pvrtc: false,
            intel_performance_query: false,
            intel_shader_integer_functions2: false,
            nvx_binary_import: false,
            nvx_image_view_handle: false,
            nvx_multiview_per_view_attributes: false,
            nv_acquire_winrt_display: false,
            nv_clip_space_w_scaling: false,
            nv_compute_shader_derivatives: false,
            nv_cooperative_matrix: false,
            nv_corner_sampled_image: false,
            nv_coverage_reduction_mode: false,
            nv_dedicated_allocation: false,
            nv_dedicated_allocation_image_aliasing: false,
            nv_device_diagnostic_checkpoints: false,
            nv_device_diagnostics_config: false,
            nv_device_generated_commands: false,
            nv_external_memory: false,
            nv_external_memory_rdma: false,
            nv_external_memory_win32: false,
            nv_fill_rectangle: false,
            nv_fragment_coverage_to_color: false,
            nv_fragment_shader_barycentric: false,
            nv_fragment_shading_rate_enums: false,
            nv_framebuffer_mixed_samples: false,
            nv_geometry_shader_passthrough: false,
            nv_glsl_shader: false,
            nv_inherited_viewport_scissor: false,
            nv_mesh_shader: false,
            nv_ray_tracing: false,
            nv_ray_tracing_motion_blur: false,
            nv_representative_fragment_test: false,
            nv_sample_mask_override_coverage: false,
            nv_scissor_exclusive: false,
            nv_shader_image_footprint: false,
            nv_shader_sm_builtins: false,
            nv_shader_subgroup_partitioned: false,
            nv_shading_rate_image: false,
            nv_viewport_array2: false,
            nv_viewport_swizzle: false,
            nv_win32_keyed_mutex: false,
            qcom_render_pass_shader_resolve: false,
            qcom_render_pass_store_ops: false,
            qcom_render_pass_transform: false,
            qcom_rotated_copy_commands: false,
            valve_mutable_descriptor_type: false,
            _unbuildable: Unbuildable(()),
        }
    }
}
