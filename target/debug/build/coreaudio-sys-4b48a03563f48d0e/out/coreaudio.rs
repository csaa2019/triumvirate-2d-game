/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const AUDIO_UNIT_VERSION: u32 = 1070;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 1;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_ARM64: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const COREAUDIOTYPES_VERSION: u32 = 20150414;
pub const __COREFOUNDATION_CFBASE__: u32 = 1;
pub const __COREFOUNDATION_CFAVAILABILITY__: u32 = 1;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 110100;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const UNIVERSAL_INTERFACES_VERSION: u32 = 1024;
pub const PRAGMA_IMPORT: u32 = 0;
pub const PRAGMA_ONCE: u32 = 0;
pub const PRAGMA_STRUCT_PACK: u32 = 1;
pub const PRAGMA_STRUCT_PACKPUSH: u32 = 1;
pub const PRAGMA_STRUCT_ALIGN: u32 = 0;
pub const PRAGMA_ENUM_PACK: u32 = 0;
pub const PRAGMA_ENUM_ALWAYSINT: u32 = 0;
pub const PRAGMA_ENUM_OPTIONS: u32 = 0;
pub const TYPE_EXTENDED: u32 = 0;
pub const TYPE_LONGDOUBLE_IS_DOUBLE: u32 = 0;
pub const TYPE_LONGLONG: u32 = 1;
pub const FUNCTION_PASCAL: u32 = 0;
pub const FUNCTION_DECLSPEC: u32 = 0;
pub const FUNCTION_WIN32CC: u32 = 0;
pub const TARGET_API_MAC_OS8: u32 = 0;
pub const TARGET_API_MAC_CARBON: u32 = 1;
pub const TARGET_API_MAC_OSX: u32 = 1;
pub const TARGET_CARBON: u32 = 1;
pub const OLDROUTINENAMES: u32 = 0;
pub const OPAQUE_TOOLBOX_STRUCTS: u32 = 1;
pub const OPAQUE_UPP_TYPES: u32 = 1;
pub const ACCESSOR_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const CALL_NOT_IN_CARBON: u32 = 0;
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS: u32 = 1;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY: u32 = 0;
pub const ALLOW_OBSOLETE_CARBON_OSUTILS: u32 = 0;
pub const kInvalidID: u32 = 0;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const kCFCoreFoundationVersionNumber10_0: f64 = 196.4;
pub const kCFCoreFoundationVersionNumber10_0_3: f64 = 196.5;
pub const kCFCoreFoundationVersionNumber10_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_1: f64 = 226.0;
pub const kCFCoreFoundationVersionNumber10_1_2: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_3: f64 = 227.2;
pub const kCFCoreFoundationVersionNumber10_1_4: f64 = 227.3;
pub const kCFCoreFoundationVersionNumber10_2: f64 = 263.0;
pub const kCFCoreFoundationVersionNumber10_2_1: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_2: f64 = 263.1;
pub const kCFCoreFoundationVersionNumber10_2_3: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_4: f64 = 263.3;
pub const kCFCoreFoundationVersionNumber10_2_5: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_6: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_7: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_2_8: f64 = 263.5;
pub const kCFCoreFoundationVersionNumber10_3: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_1: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_2: f64 = 299.0;
pub const kCFCoreFoundationVersionNumber10_3_3: f64 = 299.3;
pub const kCFCoreFoundationVersionNumber10_3_4: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5: f64 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6: f64 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8: f64 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9: f64 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4: f64 = 368.0;
pub const kCFCoreFoundationVersionNumber10_4_1: f64 = 368.1;
pub const kCFCoreFoundationVersionNumber10_4_2: f64 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3: f64 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel: f64 = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC: f64 = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8: f64 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10: f64 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11: f64 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_1: f64 = 476.0;
pub const kCFCoreFoundationVersionNumber10_5_2: f64 = 476.1;
pub const kCFCoreFoundationVersionNumber10_5_3: f64 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4: f64 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5: f64 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6: f64 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7: f64 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8: f64 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_1: f64 = 550.0;
pub const kCFCoreFoundationVersionNumber10_6_2: f64 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3: f64 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4: f64 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7: f64 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8: f64 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_1: f64 = 635.0;
pub const kCFCoreFoundationVersionNumber10_7_2: f64 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3: f64 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5: f64 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_1: f64 = 744.0;
pub const kCFCoreFoundationVersionNumber10_8_2: f64 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3: f64 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4: f64 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1: f64 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2: f64 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1: f64 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2: u32 = 1152;
pub const kCFCoreFoundationVersionNumber10_10_3: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5: f64 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max: u32 = 1199;
pub const kCFCoreFoundationVersionNumber10_11: u32 = 1253;
pub const kCFCoreFoundationVersionNumber10_11_1: f64 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3: f64 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4: f64 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max: u32 = 1299;
pub const ISA_PTRAUTH_DISCRIMINATOR: u32 = 27361;
pub const __COREFOUNDATION_COREFOUNDATION__: u32 = 1;
pub const __COREFOUNDATION__: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &'static [u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const _JBLEN: u32 = 37;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_CURRENT: u32 = 5;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const TIME_UTC: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const __COREFOUNDATION_CFARRAY__: u32 = 1;
pub const __COREFOUNDATION_CFBAG__: u32 = 1;
pub const __COREFOUNDATION_CFBINARYHEAP__: u32 = 1;
pub const __COREFOUNDATION_CFBITVECTOR__: u32 = 1;
pub const __COREFOUNDATION_CFBYTEORDER__: u32 = 1;
pub const CF_USE_OSBYTEORDER_H: u32 = 1;
pub const __COREFOUNDATION_CFCALENDAR__: u32 = 1;
pub const __COREFOUNDATION_CFLOCALE__: u32 = 1;
pub const __COREFOUNDATION_CFDICTIONARY__: u32 = 1;
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__: u32 = 1;
pub const __COREFOUNDATION_CFDATE__: u32 = 1;
pub const __COREFOUNDATION_CFTIMEZONE__: u32 = 1;
pub const __COREFOUNDATION_CFDATA__: u32 = 1;
pub const __COREFOUNDATION_CFSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFCHARACTERSET__: u32 = 1;
pub const kCFStringEncodingInvalidId: u32 = 4294967295;
pub const __kCFStringInlineBufferLength: u32 = 64;
pub const __COREFOUNDATION_CFDATEFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFERROR__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBER__: u32 = 1;
pub const __COREFOUNDATION_CFNUMBERFORMATTER__: u32 = 1;
pub const __COREFOUNDATION_CFPREFERENCES__: u32 = 1;
pub const __COREFOUNDATION_CFPROPERTYLIST__: u32 = 1;
pub const __COREFOUNDATION_CFSTREAM__: u32 = 1;
pub const __COREFOUNDATION_CFURL__: u32 = 1;
pub const __COREFOUNDATION_CFRUNLOOP__: u32 = 1;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 64;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const __COREFOUNDATION_CFSOCKET__: u32 = 1;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: i32 = -1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: i32 = -1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_ACCMODE: u32 = 3;
pub const FREAD: u32 = 1;
pub const FWRITE: u32 = 2;
pub const O_NONBLOCK: u32 = 4;
pub const O_APPEND: u32 = 8;
pub const O_SYNC: u32 = 128;
pub const O_SHLOCK: u32 = 16;
pub const O_EXLOCK: u32 = 32;
pub const O_ASYNC: u32 = 64;
pub const O_FSYNC: u32 = 128;
pub const O_NOFOLLOW: u32 = 256;
pub const O_CREAT: u32 = 512;
pub const O_TRUNC: u32 = 1024;
pub const O_EXCL: u32 = 2048;
pub const O_EVTONLY: u32 = 32768;
pub const O_NOCTTY: u32 = 131072;
pub const O_DIRECTORY: u32 = 1048576;
pub const O_SYMLINK: u32 = 2097152;
pub const O_DSYNC: u32 = 4194304;
pub const O_CLOEXEC: u32 = 16777216;
pub const O_NOFOLLOW_ANY: u32 = 536870912;
pub const AT_FDCWD: i32 = -2;
pub const AT_EACCESS: u32 = 16;
pub const AT_SYMLINK_NOFOLLOW: u32 = 32;
pub const AT_SYMLINK_FOLLOW: u32 = 64;
pub const AT_REMOVEDIR: u32 = 128;
pub const AT_REALDEV: u32 = 512;
pub const AT_FDONLY: u32 = 1024;
pub const O_DP_GETRAWENCRYPTED: u32 = 1;
pub const O_DP_GETRAWUNENCRYPTED: u32 = 2;
pub const FAPPEND: u32 = 8;
pub const FASYNC: u32 = 64;
pub const FFSYNC: u32 = 128;
pub const FFDSYNC: u32 = 4194304;
pub const FNONBLOCK: u32 = 4;
pub const FNDELAY: u32 = 4;
pub const O_NDELAY: u32 = 4;
pub const CPF_OVERWRITE: u32 = 1;
pub const CPF_IGNORE_MODE: u32 = 2;
pub const CPF_MASK: u32 = 3;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const F_GETOWN: u32 = 5;
pub const F_SETOWN: u32 = 6;
pub const F_GETLK: u32 = 7;
pub const F_SETLK: u32 = 8;
pub const F_SETLKW: u32 = 9;
pub const F_SETLKWTIMEOUT: u32 = 10;
pub const F_FLUSH_DATA: u32 = 40;
pub const F_CHKCLEAN: u32 = 41;
pub const F_PREALLOCATE: u32 = 42;
pub const F_SETSIZE: u32 = 43;
pub const F_RDADVISE: u32 = 44;
pub const F_RDAHEAD: u32 = 45;
pub const F_NOCACHE: u32 = 48;
pub const F_LOG2PHYS: u32 = 49;
pub const F_GETPATH: u32 = 50;
pub const F_FULLFSYNC: u32 = 51;
pub const F_PATHPKG_CHECK: u32 = 52;
pub const F_FREEZE_FS: u32 = 53;
pub const F_THAW_FS: u32 = 54;
pub const F_GLOBAL_NOCACHE: u32 = 55;
pub const F_ADDSIGS: u32 = 59;
pub const F_ADDFILESIGS: u32 = 61;
pub const F_NODIRECT: u32 = 62;
pub const F_GETPROTECTIONCLASS: u32 = 63;
pub const F_SETPROTECTIONCLASS: u32 = 64;
pub const F_LOG2PHYS_EXT: u32 = 65;
pub const F_GETLKPID: u32 = 66;
pub const F_SETBACKINGSTORE: u32 = 70;
pub const F_GETPATH_MTMINFO: u32 = 71;
pub const F_GETCODEDIR: u32 = 72;
pub const F_SETNOSIGPIPE: u32 = 73;
pub const F_GETNOSIGPIPE: u32 = 74;
pub const F_TRANSCODEKEY: u32 = 75;
pub const F_SINGLE_WRITER: u32 = 76;
pub const F_GETPROTECTIONLEVEL: u32 = 77;
pub const F_FINDSIGS: u32 = 78;
pub const F_ADDFILESIGS_FOR_DYLD_SIM: u32 = 83;
pub const F_BARRIERFSYNC: u32 = 85;
pub const F_ADDFILESIGS_RETURN: u32 = 97;
pub const F_CHECK_LV: u32 = 98;
pub const F_PUNCHHOLE: u32 = 99;
pub const F_TRIM_ACTIVE_FILE: u32 = 100;
pub const F_SPECULATIVE_READ: u32 = 101;
pub const F_GETPATH_NOFIRMLINK: u32 = 102;
pub const F_ADDFILESIGS_INFO: u32 = 103;
pub const F_ADDFILESUPPL: u32 = 104;
pub const F_GETSIGSINFO: u32 = 105;
pub const FCNTL_FS_SPECIFIC_BASE: u32 = 65536;
pub const F_DUPFD_CLOEXEC: u32 = 67;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_WRLCK: u32 = 3;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const F_ALLOCATECONTIG: u32 = 2;
pub const F_ALLOCATEALL: u32 = 4;
pub const F_PEOFPOSMODE: u32 = 3;
pub const F_VOLPOSMODE: u32 = 4;
pub const USER_FSIGNATURES_CDHASH_LEN: u32 = 20;
pub const GETSIGSINFO_PLATFORM_BINARY: u32 = 1;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const O_POPUP: u32 = 2147483648;
pub const O_ALERT: u32 = 536870912;
pub const DISPATCH_API_VERSION: u32 = 20181008;
pub const OS_OBJECT_HAVE_OBJC_SUPPORT: u32 = 0;
pub const OS_OBJECT_USE_OBJC: u32 = 0;
pub const OS_OBJECT_SWIFT3: u32 = 0;
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE: u32 = 0;
pub const __OS_WORKGROUP_ATTR_SIZE__: u32 = 60;
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__: u32 = 56;
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__: u32 = 36;
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT: u32 = 799564724;
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT: u32 = 799564740;
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT: u32 = 1386695757;
pub const DISPATCH_SWIFT3_OVERLAY: u32 = 0;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const DISPATCH_TIME_NOW: u32 = 0;
pub const DISPATCH_TIME_FOREVER: i32 = -1;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const DISPATCH_APPLY_AUTO_AVAILABLE: u32 = 1;
pub const DISPATCH_QUEUE_PRIORITY_HIGH: u32 = 2;
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT: u32 = 0;
pub const DISPATCH_QUEUE_PRIORITY_LOW: i32 = -2;
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND: i32 = -32768;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_RETURN_MAX: u32 = 256;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const DISPATCH_MACH_SEND_DEAD: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_NORMAL: u32 = 1;
pub const DISPATCH_MEMORYPRESSURE_WARN: u32 = 2;
pub const DISPATCH_MEMORYPRESSURE_CRITICAL: u32 = 4;
pub const DISPATCH_PROC_EXIT: u32 = 2147483648;
pub const DISPATCH_PROC_FORK: u32 = 1073741824;
pub const DISPATCH_PROC_EXEC: u32 = 536870912;
pub const DISPATCH_PROC_SIGNAL: u32 = 134217728;
pub const DISPATCH_VNODE_DELETE: u32 = 1;
pub const DISPATCH_VNODE_WRITE: u32 = 2;
pub const DISPATCH_VNODE_EXTEND: u32 = 4;
pub const DISPATCH_VNODE_ATTRIB: u32 = 8;
pub const DISPATCH_VNODE_LINK: u32 = 16;
pub const DISPATCH_VNODE_RENAME: u32 = 32;
pub const DISPATCH_VNODE_REVOKE: u32 = 64;
pub const DISPATCH_VNODE_FUNLOCK: u32 = 256;
pub const DISPATCH_TIMER_STRICT: u32 = 1;
pub const DISPATCH_ONCE_INLINE_FASTPATH: u32 = 1;
pub const DISPATCH_IO_STREAM: u32 = 0;
pub const DISPATCH_IO_RANDOM: u32 = 1;
pub const DISPATCH_IO_STOP: u32 = 1;
pub const DISPATCH_IO_STRICT_INTERVAL: u32 = 1;
pub const __COREFOUNDATION_CFSET__: u32 = 1;
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__: u32 = 1;
pub const __COREFOUNDATION_CFTREE__: u32 = 1;
pub const __COREFOUNDATION_CFURLACCESS__: u32 = 1;
pub const __COREFOUNDATION_CFUUID__: u32 = 1;
pub const __COREFOUNDATION_CFUTILITIES__: u32 = 1;
pub const __COREFOUNDATION_CFBUNDLE__: u32 = 1;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const __COREFOUNDATION_CFMESSAGEPORT__: u32 = 1;
pub const __COREFOUNDATION_CFPLUGIN__: u32 = 1;
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE: u32 = 1;
pub const __COREFOUNDATION_CFMACHPORT__: u32 = 1;
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__: u32 = 1;
pub const __COREFOUNDATION_CFURLENUMERATOR__: u32 = 1;
pub const __COREFOUNDATION_CFFILESECURITY__: u32 = 1;
pub const KAUTH_GUID_SIZE: u32 = 16;
pub const KAUTH_NTSID_MAX_AUTHORITIES: u32 = 16;
pub const KAUTH_NTSID_HDRSIZE: u32 = 8;
pub const KAUTH_EXTLOOKUP_SUCCESS: u32 = 0;
pub const KAUTH_EXTLOOKUP_BADRQ: u32 = 1;
pub const KAUTH_EXTLOOKUP_FAILURE: u32 = 2;
pub const KAUTH_EXTLOOKUP_FATAL: u32 = 3;
pub const KAUTH_EXTLOOKUP_INPROG: u32 = 100;
pub const KAUTH_EXTLOOKUP_VALID_UID: u32 = 1;
pub const KAUTH_EXTLOOKUP_VALID_UGUID: u32 = 2;
pub const KAUTH_EXTLOOKUP_VALID_USID: u32 = 4;
pub const KAUTH_EXTLOOKUP_VALID_GID: u32 = 8;
pub const KAUTH_EXTLOOKUP_VALID_GGUID: u32 = 16;
pub const KAUTH_EXTLOOKUP_VALID_GSID: u32 = 32;
pub const KAUTH_EXTLOOKUP_WANT_UID: u32 = 64;
pub const KAUTH_EXTLOOKUP_WANT_UGUID: u32 = 128;
pub const KAUTH_EXTLOOKUP_WANT_USID: u32 = 256;
pub const KAUTH_EXTLOOKUP_WANT_GID: u32 = 512;
pub const KAUTH_EXTLOOKUP_WANT_GGUID: u32 = 1024;
pub const KAUTH_EXTLOOKUP_WANT_GSID: u32 = 2048;
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP: u32 = 4096;
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP: u32 = 8192;
pub const KAUTH_EXTLOOKUP_ISMEMBER: u32 = 16384;
pub const KAUTH_EXTLOOKUP_VALID_PWNAM: u32 = 32768;
pub const KAUTH_EXTLOOKUP_WANT_PWNAM: u32 = 65536;
pub const KAUTH_EXTLOOKUP_VALID_GRNAM: u32 = 131072;
pub const KAUTH_EXTLOOKUP_WANT_GRNAM: u32 = 262144;
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS: u32 = 524288;
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS: u32 = 1048576;
pub const KAUTH_EXTLOOKUP_REGISTER: u32 = 0;
pub const KAUTH_EXTLOOKUP_RESULT: u32 = 1;
pub const KAUTH_EXTLOOKUP_WORKER: u32 = 2;
pub const KAUTH_EXTLOOKUP_DEREGISTER: u32 = 4;
pub const KAUTH_GET_CACHE_SIZES: u32 = 8;
pub const KAUTH_SET_CACHE_SIZES: u32 = 16;
pub const KAUTH_CLEAR_CACHES: u32 = 32;
pub const IDENTITYSVC_ENTITLEMENT: &'static [u8; 30usize] = b"com.apple.private.identitysvc\0";
pub const KAUTH_ACE_KINDMASK: u32 = 15;
pub const KAUTH_ACE_PERMIT: u32 = 1;
pub const KAUTH_ACE_DENY: u32 = 2;
pub const KAUTH_ACE_AUDIT: u32 = 3;
pub const KAUTH_ACE_ALARM: u32 = 4;
pub const KAUTH_ACE_INHERITED: u32 = 16;
pub const KAUTH_ACE_FILE_INHERIT: u32 = 32;
pub const KAUTH_ACE_DIRECTORY_INHERIT: u32 = 64;
pub const KAUTH_ACE_LIMIT_INHERIT: u32 = 128;
pub const KAUTH_ACE_ONLY_INHERIT: u32 = 256;
pub const KAUTH_ACE_SUCCESS: u32 = 512;
pub const KAUTH_ACE_FAILURE: u32 = 1024;
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS: u32 = 480;
pub const KAUTH_ACE_GENERIC_ALL: u32 = 2097152;
pub const KAUTH_ACE_GENERIC_EXECUTE: u32 = 4194304;
pub const KAUTH_ACE_GENERIC_WRITE: u32 = 8388608;
pub const KAUTH_ACE_GENERIC_READ: u32 = 16777216;
pub const KAUTH_ACL_MAX_ENTRIES: u32 = 128;
pub const KAUTH_ACL_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_ACL_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_ACL_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_MAGIC: u32 = 19710317;
pub const KAUTH_FILESEC_FLAGS_PRIVATE: u32 = 65535;
pub const KAUTH_FILESEC_DEFER_INHERIT: u32 = 65536;
pub const KAUTH_FILESEC_NO_INHERIT: u32 = 131072;
pub const KAUTH_FILESEC_XATTR: &'static [u8; 26usize] = b"com.apple.system.Security\0";
pub const KAUTH_ENDIAN_HOST: u32 = 1;
pub const KAUTH_ENDIAN_DISK: u32 = 2;
pub const KAUTH_VNODE_READ_DATA: u32 = 2;
pub const KAUTH_VNODE_LIST_DIRECTORY: u32 = 2;
pub const KAUTH_VNODE_WRITE_DATA: u32 = 4;
pub const KAUTH_VNODE_ADD_FILE: u32 = 4;
pub const KAUTH_VNODE_EXECUTE: u32 = 8;
pub const KAUTH_VNODE_SEARCH: u32 = 8;
pub const KAUTH_VNODE_DELETE: u32 = 16;
pub const KAUTH_VNODE_APPEND_DATA: u32 = 32;
pub const KAUTH_VNODE_ADD_SUBDIRECTORY: u32 = 32;
pub const KAUTH_VNODE_DELETE_CHILD: u32 = 64;
pub const KAUTH_VNODE_READ_ATTRIBUTES: u32 = 128;
pub const KAUTH_VNODE_WRITE_ATTRIBUTES: u32 = 256;
pub const KAUTH_VNODE_READ_EXTATTRIBUTES: u32 = 512;
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const KAUTH_VNODE_READ_SECURITY: u32 = 2048;
pub const KAUTH_VNODE_WRITE_SECURITY: u32 = 4096;
pub const KAUTH_VNODE_TAKE_OWNERSHIP: u32 = 8192;
pub const KAUTH_VNODE_CHANGE_OWNER: u32 = 8192;
pub const KAUTH_VNODE_SYNCHRONIZE: u32 = 1048576;
pub const KAUTH_VNODE_LINKTARGET: u32 = 33554432;
pub const KAUTH_VNODE_CHECKIMMUTABLE: u32 = 67108864;
pub const KAUTH_VNODE_ACCESS: u32 = 2147483648;
pub const KAUTH_VNODE_NOIMMUTABLE: u32 = 1073741824;
pub const KAUTH_VNODE_SEARCHBYANYONE: u32 = 536870912;
pub const KAUTH_VNODE_GENERIC_READ_BITS: u32 = 2690;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS: u32 = 5492;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS: u32 = 8;
pub const KAUTH_VNODE_GENERIC_ALL_BITS: u32 = 8190;
pub const KAUTH_VNODE_WRITE_RIGHTS: u32 = 100676980;
pub const __DARWIN_ACL_READ_DATA: u32 = 2;
pub const __DARWIN_ACL_LIST_DIRECTORY: u32 = 2;
pub const __DARWIN_ACL_WRITE_DATA: u32 = 4;
pub const __DARWIN_ACL_ADD_FILE: u32 = 4;
pub const __DARWIN_ACL_EXECUTE: u32 = 8;
pub const __DARWIN_ACL_SEARCH: u32 = 8;
pub const __DARWIN_ACL_DELETE: u32 = 16;
pub const __DARWIN_ACL_APPEND_DATA: u32 = 32;
pub const __DARWIN_ACL_ADD_SUBDIRECTORY: u32 = 32;
pub const __DARWIN_ACL_DELETE_CHILD: u32 = 64;
pub const __DARWIN_ACL_READ_ATTRIBUTES: u32 = 128;
pub const __DARWIN_ACL_WRITE_ATTRIBUTES: u32 = 256;
pub const __DARWIN_ACL_READ_EXTATTRIBUTES: u32 = 512;
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES: u32 = 1024;
pub const __DARWIN_ACL_READ_SECURITY: u32 = 2048;
pub const __DARWIN_ACL_WRITE_SECURITY: u32 = 4096;
pub const __DARWIN_ACL_CHANGE_OWNER: u32 = 8192;
pub const __DARWIN_ACL_SYNCHRONIZE: u32 = 1048576;
pub const __DARWIN_ACL_EXTENDED_ALLOW: u32 = 1;
pub const __DARWIN_ACL_EXTENDED_DENY: u32 = 2;
pub const __DARWIN_ACL_ENTRY_INHERITED: u32 = 16;
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT: u32 = 32;
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT: u32 = 64;
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT: u32 = 128;
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT: u32 = 256;
pub const __DARWIN_ACL_FLAG_NO_INHERIT: u32 = 131072;
pub const ACL_MAX_ENTRIES: u32 = 128;
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__: u32 = 1;
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__: u32 = 1;
pub const __COREFOUNDATION_CFUSERNOTIFICATION__: u32 = 1;
pub const __COREFOUNDATION_CFXMLNODE__: u32 = 1;
pub const __CFXMLNode_DEPRECATION_MSG: &'static [u8; 83usize] =
    b"CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const __COREFOUNDATION_CFXMLPARSER__: u32 = 1;
pub const __CFXMLParser_DEPRECATION_MSG: &'static [u8; 85usize] =
    b"CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead\0";
pub const kAudioComponentConfigurationInfo_ValidationResult: &'static [u8; 17usize] =
    b"ValidationResult\0";
pub const kAudioComponentValidationParameter_TimeOut: &'static [u8; 8usize] = b"TimeOut\0";
pub const kAudioComponentValidationParameter_ForceValidation: &'static [u8; 16usize] =
    b"ForceValidation\0";
pub const AU_SUPPORT_INTERAPP_AUDIO: u32 = 1;
pub const kAudioSettings_TopLevelKey: &'static [u8; 5usize] = b"name\0";
pub const kAudioSettings_Version: &'static [u8; 8usize] = b"version\0";
pub const kAudioSettings_Parameters: &'static [u8; 11usize] = b"parameters\0";
pub const kAudioSettings_SettingKey: &'static [u8; 4usize] = b"key\0";
pub const kAudioSettings_SettingName: &'static [u8; 5usize] = b"name\0";
pub const kAudioSettings_ValueType: &'static [u8; 11usize] = b"value type\0";
pub const kAudioSettings_AvailableValues: &'static [u8; 17usize] = b"available values\0";
pub const kAudioSettings_LimitedValues: &'static [u8; 15usize] = b"limited values\0";
pub const kAudioSettings_CurrentValue: &'static [u8; 14usize] = b"current value\0";
pub const kAudioSettings_Summary: &'static [u8; 8usize] = b"summary\0";
pub const kAudioSettings_Hint: &'static [u8; 5usize] = b"hint\0";
pub const kAudioSettings_Unit: &'static [u8; 5usize] = b"unit\0";
pub const kAUPresetVersionKey: &'static [u8; 8usize] = b"version\0";
pub const kAUPresetTypeKey: &'static [u8; 5usize] = b"type\0";
pub const kAUPresetSubtypeKey: &'static [u8; 8usize] = b"subtype\0";
pub const kAUPresetManufacturerKey: &'static [u8; 13usize] = b"manufacturer\0";
pub const kAUPresetDataKey: &'static [u8; 5usize] = b"data\0";
pub const kAUPresetNameKey: &'static [u8; 5usize] = b"name\0";
pub const kAUPresetNumberKey: &'static [u8; 14usize] = b"preset-number\0";
pub const kAUPresetRenderQualityKey: &'static [u8; 15usize] = b"render-quality\0";
pub const kAUPresetCPULoadKey: &'static [u8; 9usize] = b"cpu-load\0";
pub const kAUPresetElementNameKey: &'static [u8; 13usize] = b"element-name\0";
pub const kAUPresetExternalFileRefs: &'static [u8; 16usize] = b"file-references\0";
pub const kAUPresetVSTDataKey: &'static [u8; 8usize] = b"vstdata\0";
pub const kAUPresetVSTPresetKey: &'static [u8; 10usize] = b"vstpreset\0";
pub const kAUPresetMASDataKey: &'static [u8; 8usize] = b"masdata\0";
pub const kAUPresetPartKey: &'static [u8; 5usize] = b"part\0";
pub const kAudioUnitConfigurationInfo_HasCustomView: &'static [u8; 14usize] = b"HasCustomView\0";
pub const kAudioUnitConfigurationInfo_ChannelConfigurations: &'static [u8; 22usize] =
    b"ChannelConfigurations\0";
pub const kAudioUnitConfigurationInfo_InitialInputs: &'static [u8; 14usize] = b"InitialInputs\0";
pub const kAudioUnitConfigurationInfo_InitialOutputs: &'static [u8; 15usize] = b"InitialOutputs\0";
pub const kAudioUnitConfigurationInfo_IconURL: &'static [u8; 8usize] = b"IconURL\0";
pub const kAudioUnitConfigurationInfo_BusCountWritable: &'static [u8; 17usize] =
    b"BusCountWritable\0";
pub const kAudioUnitConfigurationInfo_SupportedChannelLayoutTags: &'static [u8; 27usize] =
    b"SupportedChannelLayoutTags\0";
pub const AUDIO_TOOLBOX_VERSION: u32 = 1060;
pub const kAFInfoDictionary_Album: &'static [u8; 6usize] = b"album\0";
pub const kAFInfoDictionary_ApproximateDurationInSeconds: &'static [u8; 32usize] =
    b"approximate duration in seconds\0";
pub const kAFInfoDictionary_Artist: &'static [u8; 7usize] = b"artist\0";
pub const kAFInfoDictionary_ChannelLayout: &'static [u8; 15usize] = b"channel layout\0";
pub const kAFInfoDictionary_Comments: &'static [u8; 9usize] = b"comments\0";
pub const kAFInfoDictionary_Composer: &'static [u8; 9usize] = b"composer\0";
pub const kAFInfoDictionary_Copyright: &'static [u8; 10usize] = b"copyright\0";
pub const kAFInfoDictionary_EncodingApplication: &'static [u8; 21usize] = b"encoding application\0";
pub const kAFInfoDictionary_Genre: &'static [u8; 6usize] = b"genre\0";
pub const kAFInfoDictionary_ISRC: &'static [u8; 5usize] = b"ISRC\0";
pub const kAFInfoDictionary_KeySignature: &'static [u8; 14usize] = b"key signature\0";
pub const kAFInfoDictionary_Lyricist: &'static [u8; 9usize] = b"lyricist\0";
pub const kAFInfoDictionary_NominalBitRate: &'static [u8; 17usize] = b"nominal bit rate\0";
pub const kAFInfoDictionary_RecordedDate: &'static [u8; 14usize] = b"recorded date\0";
pub const kAFInfoDictionary_SourceBitDepth: &'static [u8; 17usize] = b"source bit depth\0";
pub const kAFInfoDictionary_SourceEncoder: &'static [u8; 15usize] = b"source encoder\0";
pub const kAFInfoDictionary_SubTitle: &'static [u8; 9usize] = b"subtitle\0";
pub const kAFInfoDictionary_Tempo: &'static [u8; 6usize] = b"tempo\0";
pub const kAFInfoDictionary_TimeSignature: &'static [u8; 15usize] = b"time signature\0";
pub const kAFInfoDictionary_Title: &'static [u8; 6usize] = b"title\0";
pub const kAFInfoDictionary_TrackNumber: &'static [u8; 13usize] = b"track number\0";
pub const kAFInfoDictionary_Year: &'static [u8; 5usize] = b"year\0";
pub const kAudioEndPointDeviceUIDKey: &'static [u8; 4usize] = b"uid\0";
pub const kAudioEndPointDeviceNameKey: &'static [u8; 5usize] = b"name\0";
pub const kAudioEndPointDeviceEndPointListKey: &'static [u8; 10usize] = b"endpoints\0";
pub const kAudioEndPointDeviceMasterEndPointKey: &'static [u8; 7usize] = b"master\0";
pub const kAudioEndPointDeviceIsPrivateKey: &'static [u8; 8usize] = b"private\0";
pub const kAudioEndPointUIDKey: &'static [u8; 4usize] = b"uid\0";
pub const kAudioEndPointNameKey: &'static [u8; 5usize] = b"name\0";
pub const kAudioEndPointInputChannelsKey: &'static [u8; 12usize] = b"channels-in\0";
pub const kAudioEndPointOutputChannelsKey: &'static [u8; 13usize] = b"channels-out\0";
pub const kAudioAggregateDeviceUIDKey: &'static [u8; 4usize] = b"uid\0";
pub const kAudioAggregateDeviceNameKey: &'static [u8; 5usize] = b"name\0";
pub const kAudioAggregateDeviceSubDeviceListKey: &'static [u8; 11usize] = b"subdevices\0";
pub const kAudioAggregateDeviceMasterSubDeviceKey: &'static [u8; 7usize] = b"master\0";
pub const kAudioAggregateDeviceClockDeviceKey: &'static [u8; 6usize] = b"clock\0";
pub const kAudioAggregateDeviceIsPrivateKey: &'static [u8; 8usize] = b"private\0";
pub const kAudioAggregateDeviceIsStackedKey: &'static [u8; 8usize] = b"stacked\0";
pub const kAudioSubDeviceUIDKey: &'static [u8; 4usize] = b"uid\0";
pub const kAudioSubDeviceNameKey: &'static [u8; 5usize] = b"name\0";
pub const kAudioSubDeviceInputChannelsKey: &'static [u8; 12usize] = b"channels-in\0";
pub const kAudioSubDeviceOutputChannelsKey: &'static [u8; 13usize] = b"channels-out\0";
pub const kAudioSubDeviceExtraInputLatencyKey: &'static [u8; 11usize] = b"latency-in\0";
pub const kAudioSubDeviceExtraOutputLatencyKey: &'static [u8; 12usize] = b"latency-out\0";
pub const kAudioSubDeviceDriftCompensationKey: &'static [u8; 6usize] = b"drift\0";
pub const kAudioSubDeviceDriftCompensationQualityKey: &'static [u8; 14usize] = b"drift quality\0";
pub const kAudioHardwareRunLoopMode: &'static [u8; 26usize] = b"com.apple.audio.CoreAudio\0";
pub const kAudioSession_AudioRouteChangeKey_Reason: &'static [u8; 29usize] =
    b"OutputDeviceDidChange_Reason\0";
pub const kAudioSession_AudioRouteChangeKey_OldRoute: &'static [u8; 31usize] =
    b"OutputDeviceDidChange_OldRoute\0";
pub const kInstrumentInfoKey_Name: &'static [u8; 5usize] = b"name\0";
pub const kInstrumentInfoKey_MSB: &'static [u8; 4usize] = b"MSB\0";
pub const kInstrumentInfoKey_LSB: &'static [u8; 4usize] = b"LSB\0";
pub const kInstrumentInfoKey_Program: &'static [u8; 8usize] = b"program\0";
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn _Block_copy(aBlock: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _Block_release(aBlock: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Block_object_assign(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _Block_object_dispose(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub static mut _NSConcreteGlobalBlock: [*mut ::std::os::raw::c_void; 32usize];
}
extern "C" {
    pub static mut _NSConcreteStackBlock: [*mut ::std::os::raw::c_void; 32usize];
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub type UInt8 = ::std::os::raw::c_uchar;
pub type SInt8 = ::std::os::raw::c_schar;
pub type UInt16 = ::std::os::raw::c_ushort;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wide {
    pub lo: UInt32,
    pub hi: SInt32,
}
#[test]
fn bindgen_test_layout_wide() {
    assert_eq!(
        ::std::mem::size_of::<wide>(),
        8usize,
        concat!("Size of: ", stringify!(wide))
    );
    assert_eq!(
        ::std::mem::align_of::<wide>(),
        2usize,
        concat!("Alignment of ", stringify!(wide))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wide>())).lo as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wide), "::", stringify!(lo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wide>())).hi as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(wide), "::", stringify!(hi))
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct UnsignedWide {
    pub lo: UInt32,
    pub hi: UInt32,
}
#[test]
fn bindgen_test_layout_UnsignedWide() {
    assert_eq!(
        ::std::mem::size_of::<UnsignedWide>(),
        8usize,
        concat!("Size of: ", stringify!(UnsignedWide))
    );
    assert_eq!(
        ::std::mem::align_of::<UnsignedWide>(),
        2usize,
        concat!("Alignment of ", stringify!(UnsignedWide))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnsignedWide>())).lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UnsignedWide),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UnsignedWide>())).hi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UnsignedWide),
            "::",
            stringify!(hi)
        )
    );
}
pub type SInt64 = ::std::os::raw::c_longlong;
pub type UInt64 = ::std::os::raw::c_ulonglong;
pub type Fixed = SInt32;
pub type FixedPtr = *mut Fixed;
pub type Fract = SInt32;
pub type FractPtr = *mut Fract;
pub type UnsignedFixed = UInt32;
pub type UnsignedFixedPtr = *mut UnsignedFixed;
pub type ShortFixed = ::std::os::raw::c_short;
pub type ShortFixedPtr = *mut ShortFixed;
pub type Float32 = f32;
pub type Float64 = f64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Float80 {
    pub exp: SInt16,
    pub man: [UInt16; 4usize],
}
#[test]
fn bindgen_test_layout_Float80() {
    assert_eq!(
        ::std::mem::size_of::<Float80>(),
        10usize,
        concat!("Size of: ", stringify!(Float80))
    );
    assert_eq!(
        ::std::mem::align_of::<Float80>(),
        2usize,
        concat!("Alignment of ", stringify!(Float80))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Float80>())).exp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Float80),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Float80>())).man as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Float80),
            "::",
            stringify!(man)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Float96 {
    pub exp: [SInt16; 2usize],
    pub man: [UInt16; 4usize],
}
#[test]
fn bindgen_test_layout_Float96() {
    assert_eq!(
        ::std::mem::size_of::<Float96>(),
        12usize,
        concat!("Size of: ", stringify!(Float96))
    );
    assert_eq!(
        ::std::mem::align_of::<Float96>(),
        2usize,
        concat!("Alignment of ", stringify!(Float96))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Float96>())).exp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Float96),
            "::",
            stringify!(exp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Float96>())).man as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Float96),
            "::",
            stringify!(man)
        )
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct Float32Point {
    pub x: Float32,
    pub y: Float32,
}
#[test]
fn bindgen_test_layout_Float32Point() {
    assert_eq!(
        ::std::mem::size_of::<Float32Point>(),
        8usize,
        concat!("Size of: ", stringify!(Float32Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Float32Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Float32Point))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Float32Point>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Float32Point),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Float32Point>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Float32Point),
            "::",
            stringify!(y)
        )
    );
}
pub type Ptr = *mut ::std::os::raw::c_char;
pub type Handle = *mut Ptr;
pub type Size = ::std::os::raw::c_long;
pub type OSErr = SInt16;
pub type OSStatus = SInt32;
pub type LogicalAddress = *mut ::std::os::raw::c_void;
pub type ConstLogicalAddress = *const ::std::os::raw::c_void;
pub type PhysicalAddress = *mut ::std::os::raw::c_void;
pub type BytePtr = *mut UInt8;
pub type ByteCount = ::std::os::raw::c_ulong;
pub type ByteOffset = ::std::os::raw::c_ulong;
pub type Duration = SInt32;
pub type AbsoluteTime = UnsignedWide;
pub type OptionBits = UInt32;
pub type ItemCount = ::std::os::raw::c_ulong;
pub type PBVersion = UInt32;
pub type ScriptCode = SInt16;
pub type LangCode = SInt16;
pub type RegionCode = SInt16;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type OSTypePtr = *mut OSType;
pub type ResTypePtr = *mut ResType;
pub type Boolean = ::std::os::raw::c_uchar;
pub type ProcPtr = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_long>;
pub type Register68kProcPtr = ::std::option::Option<unsafe extern "C" fn()>;
pub type UniversalProcPtr = ProcPtr;
pub type ProcHandle = *mut ProcPtr;
pub type UniversalProcHandle = *mut UniversalProcPtr;
pub type PRefCon = *mut ::std::os::raw::c_void;
pub type URefCon = *mut ::std::os::raw::c_void;
pub type SRefCon = *mut ::std::os::raw::c_void;
pub const noErr: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const kNilOptions: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const kVariableLengthArray: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const kUnknownType: ::std::os::raw::c_uint = 1061109567;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub type UnicodeScalarValue = UInt32;
pub type UTF32Char = UInt32;
pub type UniChar = UInt16;
pub type UTF16Char = UInt16;
pub type UTF8Char = UInt8;
pub type UniCharPtr = *mut UniChar;
pub type UniCharCount = ::std::os::raw::c_ulong;
pub type UniCharCountPtr = *mut UniCharCount;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type Str63 = [::std::os::raw::c_uchar; 64usize];
pub type Str32 = [::std::os::raw::c_uchar; 33usize];
pub type Str31 = [::std::os::raw::c_uchar; 32usize];
pub type Str27 = [::std::os::raw::c_uchar; 28usize];
pub type Str15 = [::std::os::raw::c_uchar; 16usize];
pub type Str32Field = [::std::os::raw::c_uchar; 34usize];
pub type StrFileName = Str63;
pub type StringPtr = *mut ::std::os::raw::c_uchar;
pub type StringHandle = *mut StringPtr;
pub type ConstStringPtr = *const ::std::os::raw::c_uchar;
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type ConstStr63Param = *const ::std::os::raw::c_uchar;
pub type ConstStr32Param = *const ::std::os::raw::c_uchar;
pub type ConstStr31Param = *const ::std::os::raw::c_uchar;
pub type ConstStr27Param = *const ::std::os::raw::c_uchar;
pub type ConstStr15Param = *const ::std::os::raw::c_uchar;
pub type ConstStrFileNameParam = ConstStr63Param;
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct ProcessSerialNumber {
    pub highLongOfPSN: UInt32,
    pub lowLongOfPSN: UInt32,
}
#[test]
fn bindgen_test_layout_ProcessSerialNumber() {
    assert_eq!(
        ::std::mem::size_of::<ProcessSerialNumber>(),
        8usize,
        concat!("Size of: ", stringify!(ProcessSerialNumber))
    );
    assert_eq!(
        ::std::mem::align_of::<ProcessSerialNumber>(),
        2usize,
        concat!("Alignment of ", stringify!(ProcessSerialNumber))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProcessSerialNumber>())).highLongOfPSN as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ProcessSerialNumber),
            "::",
            stringify!(highLongOfPSN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ProcessSerialNumber>())).lowLongOfPSN as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ProcessSerialNumber),
            "::",
            stringify!(lowLongOfPSN)
        )
    );
}
pub type ProcessSerialNumberPtr = *mut ProcessSerialNumber;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Point {
    pub v: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Point() {
    assert_eq!(
        ::std::mem::size_of::<Point>(),
        4usize,
        concat!("Size of: ", stringify!(Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Point))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Point>())).v as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Point>())).h as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(h))
    );
}
pub type PointPtr = *mut Point;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Rect {
    pub top: ::std::os::raw::c_short,
    pub left: ::std::os::raw::c_short,
    pub bottom: ::std::os::raw::c_short,
    pub right: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Rect() {
    assert_eq!(
        ::std::mem::size_of::<Rect>(),
        8usize,
        concat!("Size of: ", stringify!(Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<Rect>(),
        2usize,
        concat!("Alignment of ", stringify!(Rect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Rect>())).top as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Rect>())).left as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Rect>())).bottom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Rect>())).right as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(right)
        )
    );
}
pub type RectPtr = *mut Rect;
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct FixedPoint {
    pub x: Fixed,
    pub y: Fixed,
}
#[test]
fn bindgen_test_layout_FixedPoint() {
    assert_eq!(
        ::std::mem::size_of::<FixedPoint>(),
        8usize,
        concat!("Size of: ", stringify!(FixedPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<FixedPoint>(),
        2usize,
        concat!("Alignment of ", stringify!(FixedPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixedPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixedPoint>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C, packed(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct FixedRect {
    pub left: Fixed,
    pub top: Fixed,
    pub right: Fixed,
    pub bottom: Fixed,
}
#[test]
fn bindgen_test_layout_FixedRect() {
    assert_eq!(
        ::std::mem::size_of::<FixedRect>(),
        16usize,
        concat!("Size of: ", stringify!(FixedRect))
    );
    assert_eq!(
        ::std::mem::align_of::<FixedRect>(),
        2usize,
        concat!("Alignment of ", stringify!(FixedRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixedRect>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixedRect>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixedRect>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixedRect>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FixedRect),
            "::",
            stringify!(bottom)
        )
    );
}
pub type CharParameter = ::std::os::raw::c_short;
pub const normal: ::std::os::raw::c_uint = 0;
pub const bold: ::std::os::raw::c_uint = 1;
pub const italic: ::std::os::raw::c_uint = 2;
pub const underline: ::std::os::raw::c_uint = 4;
pub const outline: ::std::os::raw::c_uint = 8;
pub const shadow: ::std::os::raw::c_uint = 16;
pub const condense: ::std::os::raw::c_uint = 32;
pub const extend: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type Style = ::std::os::raw::c_uchar;
pub type StyleParameter = ::std::os::raw::c_short;
pub type StyleField = Style;
pub type TimeValue = SInt32;
pub type TimeScale = SInt32;
pub type CompTimeValue = wide;
pub type TimeValue64 = SInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeBaseRecord {
    _unused: [u8; 0],
}
pub type TimeBase = *mut TimeBaseRecord;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct TimeRecord {
    pub value: CompTimeValue,
    pub scale: TimeScale,
    pub base: TimeBase,
}
#[test]
fn bindgen_test_layout_TimeRecord() {
    assert_eq!(
        ::std::mem::size_of::<TimeRecord>(),
        20usize,
        concat!("Size of: ", stringify!(TimeRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<TimeRecord>(),
        2usize,
        concat!("Alignment of ", stringify!(TimeRecord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TimeRecord>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TimeRecord),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TimeRecord>())).scale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TimeRecord),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TimeRecord>())).base as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TimeRecord),
            "::",
            stringify!(base)
        )
    );
}
impl Default for TimeRecord {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
#[test]
fn bindgen_test_layout_NumVersion() {
    assert_eq!(
        ::std::mem::size_of::<NumVersion>(),
        4usize,
        concat!("Size of: ", stringify!(NumVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<NumVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(NumVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NumVersion>())).nonRelRev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(nonRelRev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NumVersion>())).stage as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NumVersion>())).minorAndBugRev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(minorAndBugRev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NumVersion>())).majorRev as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersion),
            "::",
            stringify!(majorRev)
        )
    );
}
pub const developStage: ::std::os::raw::c_uint = 32;
pub const alphaStage: ::std::os::raw::c_uint = 64;
pub const betaStage: ::std::os::raw::c_uint = 96;
pub const finalStage: ::std::os::raw::c_uint = 128;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union NumVersionVariant {
    pub parts: NumVersion,
    pub whole: UInt32,
    _bindgen_union_align: [u16; 2usize],
}
#[test]
fn bindgen_test_layout_NumVersionVariant() {
    assert_eq!(
        ::std::mem::size_of::<NumVersionVariant>(),
        4usize,
        concat!("Size of: ", stringify!(NumVersionVariant))
    );
    assert_eq!(
        ::std::mem::align_of::<NumVersionVariant>(),
        2usize,
        concat!("Alignment of ", stringify!(NumVersionVariant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NumVersionVariant>())).parts as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersionVariant),
            "::",
            stringify!(parts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NumVersionVariant>())).whole as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NumVersionVariant),
            "::",
            stringify!(whole)
        )
    );
}
impl Default for NumVersionVariant {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type NumVersionVariantPtr = *mut NumVersionVariant;
pub type NumVersionVariantHandle = *mut NumVersionVariantPtr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VersRec {
    pub numericVersion: NumVersion,
    pub countryCode: ::std::os::raw::c_short,
    pub shortVersion: Str255,
    pub reserved: Str255,
}
#[test]
fn bindgen_test_layout_VersRec() {
    assert_eq!(
        ::std::mem::size_of::<VersRec>(),
        518usize,
        concat!("Size of: ", stringify!(VersRec))
    );
    assert_eq!(
        ::std::mem::align_of::<VersRec>(),
        2usize,
        concat!("Alignment of ", stringify!(VersRec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VersRec>())).numericVersion as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(numericVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VersRec>())).countryCode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(countryCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VersRec>())).shortVersion as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(shortVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VersRec>())).reserved as *const _ as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(VersRec),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for VersRec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type VersRecPtr = *mut VersRec;
pub type VersRecHndl = *mut VersRecPtr;
pub type Byte = UInt8;
pub type SignedByte = SInt8;
pub type WidePtr = *mut wide;
pub type UnsignedWidePtr = *mut UnsignedWide;
pub type extended80 = Float80;
pub type extended96 = Float96;
pub type VHSelect = SInt8;
extern "C" {
    pub fn Debugger();
}
extern "C" {
    pub fn DebugStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreak();
}
extern "C" {
    pub fn SysBreakStr(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub fn SysBreakFunc(debuggerMsg: ConstStr255Param);
}
extern "C" {
    pub static mut kCFCoreFoundationVersionNumber: f64;
}
pub type CFTypeID = ::std::os::raw::c_ulong;
pub type CFOptionFlags = ::std::os::raw::c_ulong;
pub type CFHashCode = ::std::os::raw::c_ulong;
pub type CFIndex = ::std::os::raw::c_long;
pub type CFTypeRef = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFString {
    _unused: [u8; 0],
}
pub type CFStringRef = *const __CFString;
pub type CFMutableStringRef = *mut __CFString;
pub type CFPropertyListRef = CFTypeRef;
pub type CFComparisonResult = CFIndex;
pub const kCFCompareLessThan: ::std::os::raw::c_int = -1;
pub const kCFCompareEqualTo: ::std::os::raw::c_int = 0;
pub const kCFCompareGreaterThan: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub type CFComparatorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        val1: *const ::std::os::raw::c_void,
        val2: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult,
>;
pub const kCFNotFound: CFIndex = -1;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFRange {
    pub location: CFIndex,
    pub length: CFIndex,
}
#[test]
fn bindgen_test_layout_CFRange() {
    assert_eq!(
        ::std::mem::size_of::<CFRange>(),
        16usize,
        concat!("Size of: ", stringify!(CFRange))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRange>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRange>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRange),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRange>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRange),
            "::",
            stringify!(length)
        )
    );
}
extern "C" {
    pub fn __CFRangeMake(loc: CFIndex, len: CFIndex) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNull {
    _unused: [u8; 0],
}
pub type CFNullRef = *const __CFNull;
extern "C" {
    pub fn CFNullGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFNull: CFNullRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAllocator {
    _unused: [u8; 0],
}
pub type CFAllocatorRef = *const __CFAllocator;
extern "C" {
    pub static kCFAllocatorDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorSystemDefault: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMalloc: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorMallocZone: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorNull: CFAllocatorRef;
}
extern "C" {
    pub static kCFAllocatorUseContext: CFAllocatorRef;
}
pub type CFAllocatorRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFAllocatorReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFAllocatorCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
pub type CFAllocatorAllocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocSize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorReallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFAllocatorDeallocateCallBack = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, info: *mut ::std::os::raw::c_void),
>;
pub type CFAllocatorPreferredSizeCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        size: CFIndex,
        hint: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ) -> CFIndex,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFAllocatorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFAllocatorRetainCallBack,
    pub release: CFAllocatorReleaseCallBack,
    pub copyDescription: CFAllocatorCopyDescriptionCallBack,
    pub allocate: CFAllocatorAllocateCallBack,
    pub reallocate: CFAllocatorReallocateCallBack,
    pub deallocate: CFAllocatorDeallocateCallBack,
    pub preferredSize: CFAllocatorPreferredSizeCallBack,
}
#[test]
fn bindgen_test_layout_CFAllocatorContext() {
    assert_eq!(
        ::std::mem::size_of::<CFAllocatorContext>(),
        72usize,
        concat!("Size of: ", stringify!(CFAllocatorContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFAllocatorContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFAllocatorContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFAllocatorContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).allocate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(allocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).reallocate as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(reallocate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFAllocatorContext>())).deallocate as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(deallocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFAllocatorContext>())).preferredSize as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFAllocatorContext),
            "::",
            stringify!(preferredSize)
        )
    );
}
impl Default for CFAllocatorContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CFAllocatorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAllocatorSetDefault(allocator: CFAllocatorRef);
}
extern "C" {
    pub fn CFAllocatorGetDefault() -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorCreate(
        allocator: CFAllocatorRef,
        context: *mut CFAllocatorContext,
    ) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFAllocatorAllocate(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorReallocate(
        allocator: CFAllocatorRef,
        ptr: *mut ::std::os::raw::c_void,
        newsize: CFIndex,
        hint: CFOptionFlags,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFAllocatorGetPreferredSizeForSize(
        allocator: CFAllocatorRef,
        size: CFIndex,
        hint: CFOptionFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: *mut CFAllocatorContext);
}
extern "C" {
    pub fn CFGetTypeID(cf: CFTypeRef) -> CFTypeID;
}
extern "C" {
    pub fn CFCopyTypeIDDescription(type_id: CFTypeID) -> CFStringRef;
}
extern "C" {
    pub fn CFRetain(cf: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFRelease(cf: CFTypeRef);
}
extern "C" {
    pub fn CFAutorelease(arg: CFTypeRef) -> CFTypeRef;
}
extern "C" {
    pub fn CFGetRetainCount(cf: CFTypeRef) -> CFIndex;
}
extern "C" {
    pub fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) -> Boolean;
}
extern "C" {
    pub fn CFHash(cf: CFTypeRef) -> CFHashCode;
}
extern "C" {
    pub fn CFCopyDescription(cf: CFTypeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFGetAllocator(cf: CFTypeRef) -> CFAllocatorRef;
}
extern "C" {
    pub fn CFMakeCollectable(cf: CFTypeRef) -> CFTypeRef;
}
pub const ptrauth_key_ptrauth_key_asia: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_asib: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_asda: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_asdb: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_process_independent_code: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_process_dependent_code: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_process_independent_data: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_process_dependent_data: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_function_pointer: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_return_address: ptrauth_key = 1;
pub const ptrauth_key_ptrauth_key_frame_pointer: ptrauth_key = 3;
pub const ptrauth_key_ptrauth_key_block_function: ptrauth_key = 0;
pub const ptrauth_key_ptrauth_key_cxx_vtable_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_method_list_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_isa_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_objc_super_pointer: ptrauth_key = 2;
pub const ptrauth_key_ptrauth_key_block_descriptor_pointer: ptrauth_key = 2;
pub type ptrauth_key = ::std::os::raw::c_uint;
pub type ptrauth_extra_data_t = ::std::os::raw::c_ulong;
pub type ptrauth_generic_signature_t = ::std::os::raw::c_ulong;
pub const kAudio_UnimplementedError: ::std::os::raw::c_int = -4;
pub const kAudio_FileNotFoundError: ::std::os::raw::c_int = -43;
pub const kAudio_FilePermissionError: ::std::os::raw::c_int = -54;
pub const kAudio_TooManyFilesOpenError: ::std::os::raw::c_int = -42;
pub const kAudio_BadFilePathError: ::std::os::raw::c_int = 561017960;
pub const kAudio_ParamError: ::std::os::raw::c_int = -50;
pub const kAudio_MemFullError: ::std::os::raw::c_int = -108;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioValueRange {
    pub mMinimum: Float64,
    pub mMaximum: Float64,
}
#[test]
fn bindgen_test_layout_AudioValueRange() {
    assert_eq!(
        ::std::mem::size_of::<AudioValueRange>(),
        16usize,
        concat!("Size of: ", stringify!(AudioValueRange))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioValueRange>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioValueRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioValueRange>())).mMinimum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioValueRange),
            "::",
            stringify!(mMinimum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioValueRange>())).mMaximum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioValueRange),
            "::",
            stringify!(mMaximum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioValueTranslation {
    pub mInputData: *mut ::std::os::raw::c_void,
    pub mInputDataSize: UInt32,
    pub mOutputData: *mut ::std::os::raw::c_void,
    pub mOutputDataSize: UInt32,
}
#[test]
fn bindgen_test_layout_AudioValueTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioValueTranslation>(),
        32usize,
        concat!("Size of: ", stringify!(AudioValueTranslation))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioValueTranslation>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioValueTranslation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioValueTranslation>())).mInputData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioValueTranslation),
            "::",
            stringify!(mInputData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioValueTranslation>())).mInputDataSize as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioValueTranslation),
            "::",
            stringify!(mInputDataSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioValueTranslation>())).mOutputData as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioValueTranslation),
            "::",
            stringify!(mOutputData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioValueTranslation>())).mOutputDataSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioValueTranslation),
            "::",
            stringify!(mOutputDataSize)
        )
    );
}
impl Default for AudioValueTranslation {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBuffer {
    pub mNumberChannels: UInt32,
    pub mDataByteSize: UInt32,
    pub mData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AudioBuffer() {
    assert_eq!(
        ::std::mem::size_of::<AudioBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(AudioBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBuffer>())).mNumberChannels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBuffer),
            "::",
            stringify!(mNumberChannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBuffer>())).mDataByteSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBuffer),
            "::",
            stringify!(mDataByteSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBuffer>())).mData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBuffer),
            "::",
            stringify!(mData)
        )
    );
}
impl Default for AudioBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBufferList {
    pub mNumberBuffers: UInt32,
    pub mBuffers: [AudioBuffer; 1usize],
}
#[test]
fn bindgen_test_layout_AudioBufferList() {
    assert_eq!(
        ::std::mem::size_of::<AudioBufferList>(),
        24usize,
        concat!("Size of: ", stringify!(AudioBufferList))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioBufferList>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioBufferList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBufferList>())).mNumberBuffers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBufferList),
            "::",
            stringify!(mNumberBuffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBufferList>())).mBuffers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBufferList),
            "::",
            stringify!(mBuffers)
        )
    );
}
impl Default for AudioBufferList {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioSampleType = Float32;
pub type AudioUnitSampleType = Float32;
pub type AudioFormatID = UInt32;
pub type AudioFormatFlags = UInt32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioStreamBasicDescription {
    pub mSampleRate: Float64,
    pub mFormatID: AudioFormatID,
    pub mFormatFlags: AudioFormatFlags,
    pub mBytesPerPacket: UInt32,
    pub mFramesPerPacket: UInt32,
    pub mBytesPerFrame: UInt32,
    pub mChannelsPerFrame: UInt32,
    pub mBitsPerChannel: UInt32,
    pub mReserved: UInt32,
}
#[test]
fn bindgen_test_layout_AudioStreamBasicDescription() {
    assert_eq!(
        ::std::mem::size_of::<AudioStreamBasicDescription>(),
        40usize,
        concat!("Size of: ", stringify!(AudioStreamBasicDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioStreamBasicDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioStreamBasicDescription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mSampleRate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mSampleRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mFormatID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mFormatID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mFormatFlags as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mFormatFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mBytesPerPacket as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mBytesPerPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mFramesPerPacket as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mFramesPerPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mBytesPerFrame as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mBytesPerFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mChannelsPerFrame as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mChannelsPerFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mBitsPerChannel as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mBitsPerChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamBasicDescription>())).mReserved as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamBasicDescription),
            "::",
            stringify!(mReserved)
        )
    );
}
pub const kAudioStreamAnyRate: Float64 = 0.0;
pub const kAudioFormatLinearPCM: ::std::os::raw::c_uint = 1819304813;
pub const kAudioFormatAC3: ::std::os::raw::c_uint = 1633889587;
pub const kAudioFormat60958AC3: ::std::os::raw::c_uint = 1667326771;
pub const kAudioFormatAppleIMA4: ::std::os::raw::c_uint = 1768775988;
pub const kAudioFormatMPEG4AAC: ::std::os::raw::c_uint = 1633772320;
pub const kAudioFormatMPEG4CELP: ::std::os::raw::c_uint = 1667591280;
pub const kAudioFormatMPEG4HVXC: ::std::os::raw::c_uint = 1752594531;
pub const kAudioFormatMPEG4TwinVQ: ::std::os::raw::c_uint = 1953986161;
pub const kAudioFormatMACE3: ::std::os::raw::c_uint = 1296122675;
pub const kAudioFormatMACE6: ::std::os::raw::c_uint = 1296122678;
pub const kAudioFormatULaw: ::std::os::raw::c_uint = 1970037111;
pub const kAudioFormatALaw: ::std::os::raw::c_uint = 1634492791;
pub const kAudioFormatQDesign: ::std::os::raw::c_uint = 1363430723;
pub const kAudioFormatQDesign2: ::std::os::raw::c_uint = 1363430706;
pub const kAudioFormatQUALCOMM: ::std::os::raw::c_uint = 1365470320;
pub const kAudioFormatMPEGLayer1: ::std::os::raw::c_uint = 778924081;
pub const kAudioFormatMPEGLayer2: ::std::os::raw::c_uint = 778924082;
pub const kAudioFormatMPEGLayer3: ::std::os::raw::c_uint = 778924083;
pub const kAudioFormatTimeCode: ::std::os::raw::c_uint = 1953066341;
pub const kAudioFormatMIDIStream: ::std::os::raw::c_uint = 1835623529;
pub const kAudioFormatParameterValueStream: ::std::os::raw::c_uint = 1634760307;
pub const kAudioFormatAppleLossless: ::std::os::raw::c_uint = 1634492771;
pub const kAudioFormatMPEG4AAC_HE: ::std::os::raw::c_uint = 1633772392;
pub const kAudioFormatMPEG4AAC_LD: ::std::os::raw::c_uint = 1633772396;
pub const kAudioFormatMPEG4AAC_ELD: ::std::os::raw::c_uint = 1633772389;
pub const kAudioFormatMPEG4AAC_ELD_SBR: ::std::os::raw::c_uint = 1633772390;
pub const kAudioFormatMPEG4AAC_ELD_V2: ::std::os::raw::c_uint = 1633772391;
pub const kAudioFormatMPEG4AAC_HE_V2: ::std::os::raw::c_uint = 1633772400;
pub const kAudioFormatMPEG4AAC_Spatial: ::std::os::raw::c_uint = 1633772403;
pub const kAudioFormatMPEGD_USAC: ::std::os::raw::c_uint = 1970495843;
pub const kAudioFormatAMR: ::std::os::raw::c_uint = 1935764850;
pub const kAudioFormatAMR_WB: ::std::os::raw::c_uint = 1935767394;
pub const kAudioFormatAudible: ::std::os::raw::c_uint = 1096107074;
pub const kAudioFormatiLBC: ::std::os::raw::c_uint = 1768710755;
pub const kAudioFormatDVIIntelIMA: ::std::os::raw::c_uint = 1836253201;
pub const kAudioFormatMicrosoftGSM: ::std::os::raw::c_uint = 1836253233;
pub const kAudioFormatAES3: ::std::os::raw::c_uint = 1634038579;
pub const kAudioFormatEnhancedAC3: ::std::os::raw::c_uint = 1700998451;
pub const kAudioFormatFLAC: ::std::os::raw::c_uint = 1718378851;
pub const kAudioFormatOpus: ::std::os::raw::c_uint = 1869641075;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const kAudioFormatFlagIsFloat: ::std::os::raw::c_uint = 1;
pub const kAudioFormatFlagIsBigEndian: ::std::os::raw::c_uint = 2;
pub const kAudioFormatFlagIsSignedInteger: ::std::os::raw::c_uint = 4;
pub const kAudioFormatFlagIsPacked: ::std::os::raw::c_uint = 8;
pub const kAudioFormatFlagIsAlignedHigh: ::std::os::raw::c_uint = 16;
pub const kAudioFormatFlagIsNonInterleaved: ::std::os::raw::c_uint = 32;
pub const kAudioFormatFlagIsNonMixable: ::std::os::raw::c_uint = 64;
pub const kAudioFormatFlagsAreAllClear: ::std::os::raw::c_uint = 2147483648;
pub const kLinearPCMFormatFlagIsFloat: ::std::os::raw::c_uint = 1;
pub const kLinearPCMFormatFlagIsBigEndian: ::std::os::raw::c_uint = 2;
pub const kLinearPCMFormatFlagIsSignedInteger: ::std::os::raw::c_uint = 4;
pub const kLinearPCMFormatFlagIsPacked: ::std::os::raw::c_uint = 8;
pub const kLinearPCMFormatFlagIsAlignedHigh: ::std::os::raw::c_uint = 16;
pub const kLinearPCMFormatFlagIsNonInterleaved: ::std::os::raw::c_uint = 32;
pub const kLinearPCMFormatFlagIsNonMixable: ::std::os::raw::c_uint = 64;
pub const kLinearPCMFormatFlagsSampleFractionShift: ::std::os::raw::c_uint = 7;
pub const kLinearPCMFormatFlagsSampleFractionMask: ::std::os::raw::c_uint = 8064;
pub const kLinearPCMFormatFlagsAreAllClear: ::std::os::raw::c_uint = 2147483648;
pub const kAppleLosslessFormatFlag_16BitSourceData: ::std::os::raw::c_uint = 1;
pub const kAppleLosslessFormatFlag_20BitSourceData: ::std::os::raw::c_uint = 2;
pub const kAppleLosslessFormatFlag_24BitSourceData: ::std::os::raw::c_uint = 3;
pub const kAppleLosslessFormatFlag_32BitSourceData: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const kAudioFormatFlagsNativeEndian: ::std::os::raw::c_uint = 0;
pub const kAudioFormatFlagsCanonical: ::std::os::raw::c_uint = 9;
pub const kAudioFormatFlagsAudioUnitCanonical: ::std::os::raw::c_uint = 41;
pub const kAudioFormatFlagsNativeFloatPacked: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioStreamPacketDescription {
    pub mStartOffset: SInt64,
    pub mVariableFramesInPacket: UInt32,
    pub mDataByteSize: UInt32,
}
#[test]
fn bindgen_test_layout_AudioStreamPacketDescription() {
    assert_eq!(
        ::std::mem::size_of::<AudioStreamPacketDescription>(),
        16usize,
        concat!("Size of: ", stringify!(AudioStreamPacketDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioStreamPacketDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioStreamPacketDescription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamPacketDescription>())).mStartOffset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamPacketDescription),
            "::",
            stringify!(mStartOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamPacketDescription>())).mVariableFramesInPacket
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamPacketDescription),
            "::",
            stringify!(mVariableFramesInPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamPacketDescription>())).mDataByteSize as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamPacketDescription),
            "::",
            stringify!(mDataByteSize)
        )
    );
}
pub type SMPTETimeType = UInt32;
pub const kSMPTETimeType24: ::std::os::raw::c_uint = 0;
pub const kSMPTETimeType25: ::std::os::raw::c_uint = 1;
pub const kSMPTETimeType30Drop: ::std::os::raw::c_uint = 2;
pub const kSMPTETimeType30: ::std::os::raw::c_uint = 3;
pub const kSMPTETimeType2997: ::std::os::raw::c_uint = 4;
pub const kSMPTETimeType2997Drop: ::std::os::raw::c_uint = 5;
pub const kSMPTETimeType60: ::std::os::raw::c_uint = 6;
pub const kSMPTETimeType5994: ::std::os::raw::c_uint = 7;
pub const kSMPTETimeType60Drop: ::std::os::raw::c_uint = 8;
pub const kSMPTETimeType5994Drop: ::std::os::raw::c_uint = 9;
pub const kSMPTETimeType50: ::std::os::raw::c_uint = 10;
pub const kSMPTETimeType2398: ::std::os::raw::c_uint = 11;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub type SMPTETimeFlags = UInt32;
pub const kSMPTETimeUnknown: ::std::os::raw::c_uint = 0;
pub const kSMPTETimeValid: ::std::os::raw::c_uint = 1;
pub const kSMPTETimeRunning: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct SMPTETime {
    pub mSubframes: SInt16,
    pub mSubframeDivisor: SInt16,
    pub mCounter: UInt32,
    pub mType: SMPTETimeType,
    pub mFlags: SMPTETimeFlags,
    pub mHours: SInt16,
    pub mMinutes: SInt16,
    pub mSeconds: SInt16,
    pub mFrames: SInt16,
}
#[test]
fn bindgen_test_layout_SMPTETime() {
    assert_eq!(
        ::std::mem::size_of::<SMPTETime>(),
        24usize,
        concat!("Size of: ", stringify!(SMPTETime))
    );
    assert_eq!(
        ::std::mem::align_of::<SMPTETime>(),
        4usize,
        concat!("Alignment of ", stringify!(SMPTETime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mSubframes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mSubframes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mSubframeDivisor as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mSubframeDivisor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mCounter as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mCounter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mHours as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mHours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mMinutes as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mMinutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mSeconds as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SMPTETime>())).mFrames as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(SMPTETime),
            "::",
            stringify!(mFrames)
        )
    );
}
pub type AudioTimeStampFlags = UInt32;
pub const kAudioTimeStampNothingValid: ::std::os::raw::c_uint = 0;
pub const kAudioTimeStampSampleTimeValid: ::std::os::raw::c_uint = 1;
pub const kAudioTimeStampHostTimeValid: ::std::os::raw::c_uint = 2;
pub const kAudioTimeStampRateScalarValid: ::std::os::raw::c_uint = 4;
pub const kAudioTimeStampWordClockTimeValid: ::std::os::raw::c_uint = 8;
pub const kAudioTimeStampSMPTETimeValid: ::std::os::raw::c_uint = 16;
pub const kAudioTimeStampSampleHostTimeValid: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioTimeStamp {
    pub mSampleTime: Float64,
    pub mHostTime: UInt64,
    pub mRateScalar: Float64,
    pub mWordClockTime: UInt64,
    pub mSMPTETime: SMPTETime,
    pub mFlags: AudioTimeStampFlags,
    pub mReserved: UInt32,
}
#[test]
fn bindgen_test_layout_AudioTimeStamp() {
    assert_eq!(
        ::std::mem::size_of::<AudioTimeStamp>(),
        64usize,
        concat!("Size of: ", stringify!(AudioTimeStamp))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioTimeStamp>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioTimeStamp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mSampleTime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mSampleTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mHostTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mHostTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mRateScalar as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mRateScalar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mWordClockTime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mWordClockTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mSMPTETime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mSMPTETime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mFlags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioTimeStamp>())).mReserved as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioTimeStamp),
            "::",
            stringify!(mReserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioClassDescription {
    pub mType: OSType,
    pub mSubType: OSType,
    pub mManufacturer: OSType,
}
#[test]
fn bindgen_test_layout_AudioClassDescription() {
    assert_eq!(
        ::std::mem::size_of::<AudioClassDescription>(),
        12usize,
        concat!("Size of: ", stringify!(AudioClassDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioClassDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioClassDescription))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioClassDescription>())).mType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioClassDescription),
            "::",
            stringify!(mType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioClassDescription>())).mSubType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioClassDescription),
            "::",
            stringify!(mSubType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioClassDescription>())).mManufacturer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioClassDescription),
            "::",
            stringify!(mManufacturer)
        )
    );
}
pub type AudioChannelLabel = UInt32;
pub type AudioChannelLayoutTag = UInt32;
pub const kAudioChannelLabel_Unknown: ::std::os::raw::c_uint = 4294967295;
pub const kAudioChannelLabel_Unused: ::std::os::raw::c_uint = 0;
pub const kAudioChannelLabel_UseCoordinates: ::std::os::raw::c_uint = 100;
pub const kAudioChannelLabel_Left: ::std::os::raw::c_uint = 1;
pub const kAudioChannelLabel_Right: ::std::os::raw::c_uint = 2;
pub const kAudioChannelLabel_Center: ::std::os::raw::c_uint = 3;
pub const kAudioChannelLabel_LFEScreen: ::std::os::raw::c_uint = 4;
pub const kAudioChannelLabel_LeftSurround: ::std::os::raw::c_uint = 5;
pub const kAudioChannelLabel_RightSurround: ::std::os::raw::c_uint = 6;
pub const kAudioChannelLabel_LeftCenter: ::std::os::raw::c_uint = 7;
pub const kAudioChannelLabel_RightCenter: ::std::os::raw::c_uint = 8;
pub const kAudioChannelLabel_CenterSurround: ::std::os::raw::c_uint = 9;
pub const kAudioChannelLabel_LeftSurroundDirect: ::std::os::raw::c_uint = 10;
pub const kAudioChannelLabel_RightSurroundDirect: ::std::os::raw::c_uint = 11;
pub const kAudioChannelLabel_TopCenterSurround: ::std::os::raw::c_uint = 12;
pub const kAudioChannelLabel_VerticalHeightLeft: ::std::os::raw::c_uint = 13;
pub const kAudioChannelLabel_VerticalHeightCenter: ::std::os::raw::c_uint = 14;
pub const kAudioChannelLabel_VerticalHeightRight: ::std::os::raw::c_uint = 15;
pub const kAudioChannelLabel_TopBackLeft: ::std::os::raw::c_uint = 16;
pub const kAudioChannelLabel_TopBackCenter: ::std::os::raw::c_uint = 17;
pub const kAudioChannelLabel_TopBackRight: ::std::os::raw::c_uint = 18;
pub const kAudioChannelLabel_RearSurroundLeft: ::std::os::raw::c_uint = 33;
pub const kAudioChannelLabel_RearSurroundRight: ::std::os::raw::c_uint = 34;
pub const kAudioChannelLabel_LeftWide: ::std::os::raw::c_uint = 35;
pub const kAudioChannelLabel_RightWide: ::std::os::raw::c_uint = 36;
pub const kAudioChannelLabel_LFE2: ::std::os::raw::c_uint = 37;
pub const kAudioChannelLabel_LeftTotal: ::std::os::raw::c_uint = 38;
pub const kAudioChannelLabel_RightTotal: ::std::os::raw::c_uint = 39;
pub const kAudioChannelLabel_HearingImpaired: ::std::os::raw::c_uint = 40;
pub const kAudioChannelLabel_Narration: ::std::os::raw::c_uint = 41;
pub const kAudioChannelLabel_Mono: ::std::os::raw::c_uint = 42;
pub const kAudioChannelLabel_DialogCentricMix: ::std::os::raw::c_uint = 43;
pub const kAudioChannelLabel_CenterSurroundDirect: ::std::os::raw::c_uint = 44;
pub const kAudioChannelLabel_Haptic: ::std::os::raw::c_uint = 45;
pub const kAudioChannelLabel_LeftTopFront: ::std::os::raw::c_uint = 13;
pub const kAudioChannelLabel_CenterTopFront: ::std::os::raw::c_uint = 14;
pub const kAudioChannelLabel_RightTopFront: ::std::os::raw::c_uint = 15;
pub const kAudioChannelLabel_LeftTopMiddle: ::std::os::raw::c_uint = 49;
pub const kAudioChannelLabel_CenterTopMiddle: ::std::os::raw::c_uint = 12;
pub const kAudioChannelLabel_RightTopMiddle: ::std::os::raw::c_uint = 51;
pub const kAudioChannelLabel_LeftTopRear: ::std::os::raw::c_uint = 52;
pub const kAudioChannelLabel_CenterTopRear: ::std::os::raw::c_uint = 53;
pub const kAudioChannelLabel_RightTopRear: ::std::os::raw::c_uint = 54;
pub const kAudioChannelLabel_Ambisonic_W: ::std::os::raw::c_uint = 200;
pub const kAudioChannelLabel_Ambisonic_X: ::std::os::raw::c_uint = 201;
pub const kAudioChannelLabel_Ambisonic_Y: ::std::os::raw::c_uint = 202;
pub const kAudioChannelLabel_Ambisonic_Z: ::std::os::raw::c_uint = 203;
pub const kAudioChannelLabel_MS_Mid: ::std::os::raw::c_uint = 204;
pub const kAudioChannelLabel_MS_Side: ::std::os::raw::c_uint = 205;
pub const kAudioChannelLabel_XY_X: ::std::os::raw::c_uint = 206;
pub const kAudioChannelLabel_XY_Y: ::std::os::raw::c_uint = 207;
pub const kAudioChannelLabel_BinauralLeft: ::std::os::raw::c_uint = 208;
pub const kAudioChannelLabel_BinauralRight: ::std::os::raw::c_uint = 209;
pub const kAudioChannelLabel_HeadphonesLeft: ::std::os::raw::c_uint = 301;
pub const kAudioChannelLabel_HeadphonesRight: ::std::os::raw::c_uint = 302;
pub const kAudioChannelLabel_ClickTrack: ::std::os::raw::c_uint = 304;
pub const kAudioChannelLabel_ForeignLanguage: ::std::os::raw::c_uint = 305;
pub const kAudioChannelLabel_Discrete: ::std::os::raw::c_uint = 400;
pub const kAudioChannelLabel_Discrete_0: ::std::os::raw::c_uint = 65536;
pub const kAudioChannelLabel_Discrete_1: ::std::os::raw::c_uint = 65537;
pub const kAudioChannelLabel_Discrete_2: ::std::os::raw::c_uint = 65538;
pub const kAudioChannelLabel_Discrete_3: ::std::os::raw::c_uint = 65539;
pub const kAudioChannelLabel_Discrete_4: ::std::os::raw::c_uint = 65540;
pub const kAudioChannelLabel_Discrete_5: ::std::os::raw::c_uint = 65541;
pub const kAudioChannelLabel_Discrete_6: ::std::os::raw::c_uint = 65542;
pub const kAudioChannelLabel_Discrete_7: ::std::os::raw::c_uint = 65543;
pub const kAudioChannelLabel_Discrete_8: ::std::os::raw::c_uint = 65544;
pub const kAudioChannelLabel_Discrete_9: ::std::os::raw::c_uint = 65545;
pub const kAudioChannelLabel_Discrete_10: ::std::os::raw::c_uint = 65546;
pub const kAudioChannelLabel_Discrete_11: ::std::os::raw::c_uint = 65547;
pub const kAudioChannelLabel_Discrete_12: ::std::os::raw::c_uint = 65548;
pub const kAudioChannelLabel_Discrete_13: ::std::os::raw::c_uint = 65549;
pub const kAudioChannelLabel_Discrete_14: ::std::os::raw::c_uint = 65550;
pub const kAudioChannelLabel_Discrete_15: ::std::os::raw::c_uint = 65551;
pub const kAudioChannelLabel_Discrete_65535: ::std::os::raw::c_uint = 131071;
pub const kAudioChannelLabel_HOA_ACN: ::std::os::raw::c_uint = 500;
pub const kAudioChannelLabel_HOA_ACN_0: ::std::os::raw::c_uint = 131072;
pub const kAudioChannelLabel_HOA_ACN_1: ::std::os::raw::c_uint = 131073;
pub const kAudioChannelLabel_HOA_ACN_2: ::std::os::raw::c_uint = 131074;
pub const kAudioChannelLabel_HOA_ACN_3: ::std::os::raw::c_uint = 131075;
pub const kAudioChannelLabel_HOA_ACN_4: ::std::os::raw::c_uint = 131076;
pub const kAudioChannelLabel_HOA_ACN_5: ::std::os::raw::c_uint = 131077;
pub const kAudioChannelLabel_HOA_ACN_6: ::std::os::raw::c_uint = 131078;
pub const kAudioChannelLabel_HOA_ACN_7: ::std::os::raw::c_uint = 131079;
pub const kAudioChannelLabel_HOA_ACN_8: ::std::os::raw::c_uint = 131080;
pub const kAudioChannelLabel_HOA_ACN_9: ::std::os::raw::c_uint = 131081;
pub const kAudioChannelLabel_HOA_ACN_10: ::std::os::raw::c_uint = 131082;
pub const kAudioChannelLabel_HOA_ACN_11: ::std::os::raw::c_uint = 131083;
pub const kAudioChannelLabel_HOA_ACN_12: ::std::os::raw::c_uint = 131084;
pub const kAudioChannelLabel_HOA_ACN_13: ::std::os::raw::c_uint = 131085;
pub const kAudioChannelLabel_HOA_ACN_14: ::std::os::raw::c_uint = 131086;
pub const kAudioChannelLabel_HOA_ACN_15: ::std::os::raw::c_uint = 131087;
pub const kAudioChannelLabel_HOA_ACN_65024: ::std::os::raw::c_uint = 196096;
pub const kAudioChannelLabel_BeginReserved: ::std::os::raw::c_uint = 4026531840;
pub const kAudioChannelLabel_EndReserved: ::std::os::raw::c_uint = 4294967294;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub type AudioChannelBitmap = UInt32;
pub const kAudioChannelBit_Left: ::std::os::raw::c_uint = 1;
pub const kAudioChannelBit_Right: ::std::os::raw::c_uint = 2;
pub const kAudioChannelBit_Center: ::std::os::raw::c_uint = 4;
pub const kAudioChannelBit_LFEScreen: ::std::os::raw::c_uint = 8;
pub const kAudioChannelBit_LeftSurround: ::std::os::raw::c_uint = 16;
pub const kAudioChannelBit_RightSurround: ::std::os::raw::c_uint = 32;
pub const kAudioChannelBit_LeftCenter: ::std::os::raw::c_uint = 64;
pub const kAudioChannelBit_RightCenter: ::std::os::raw::c_uint = 128;
pub const kAudioChannelBit_CenterSurround: ::std::os::raw::c_uint = 256;
pub const kAudioChannelBit_LeftSurroundDirect: ::std::os::raw::c_uint = 512;
pub const kAudioChannelBit_RightSurroundDirect: ::std::os::raw::c_uint = 1024;
pub const kAudioChannelBit_TopCenterSurround: ::std::os::raw::c_uint = 2048;
pub const kAudioChannelBit_VerticalHeightLeft: ::std::os::raw::c_uint = 4096;
pub const kAudioChannelBit_VerticalHeightCenter: ::std::os::raw::c_uint = 8192;
pub const kAudioChannelBit_VerticalHeightRight: ::std::os::raw::c_uint = 16384;
pub const kAudioChannelBit_TopBackLeft: ::std::os::raw::c_uint = 32768;
pub const kAudioChannelBit_TopBackCenter: ::std::os::raw::c_uint = 65536;
pub const kAudioChannelBit_TopBackRight: ::std::os::raw::c_uint = 131072;
pub const kAudioChannelBit_LeftTopFront: ::std::os::raw::c_uint = 4096;
pub const kAudioChannelBit_CenterTopFront: ::std::os::raw::c_uint = 8192;
pub const kAudioChannelBit_RightTopFront: ::std::os::raw::c_uint = 16384;
pub const kAudioChannelBit_LeftTopMiddle: ::std::os::raw::c_uint = 2097152;
pub const kAudioChannelBit_CenterTopMiddle: ::std::os::raw::c_uint = 2048;
pub const kAudioChannelBit_RightTopMiddle: ::std::os::raw::c_uint = 8388608;
pub const kAudioChannelBit_LeftTopRear: ::std::os::raw::c_uint = 16777216;
pub const kAudioChannelBit_CenterTopRear: ::std::os::raw::c_uint = 33554432;
pub const kAudioChannelBit_RightTopRear: ::std::os::raw::c_uint = 67108864;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub type AudioChannelFlags = UInt32;
pub const kAudioChannelFlags_AllOff: ::std::os::raw::c_uint = 0;
pub const kAudioChannelFlags_RectangularCoordinates: ::std::os::raw::c_uint = 1;
pub const kAudioChannelFlags_SphericalCoordinates: ::std::os::raw::c_uint = 2;
pub const kAudioChannelFlags_Meters: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub type AudioChannelCoordinateIndex = UInt32;
pub const kAudioChannelCoordinates_LeftRight: ::std::os::raw::c_uint = 0;
pub const kAudioChannelCoordinates_BackFront: ::std::os::raw::c_uint = 1;
pub const kAudioChannelCoordinates_DownUp: ::std::os::raw::c_uint = 2;
pub const kAudioChannelCoordinates_Azimuth: ::std::os::raw::c_uint = 0;
pub const kAudioChannelCoordinates_Elevation: ::std::os::raw::c_uint = 1;
pub const kAudioChannelCoordinates_Distance: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const kAudioChannelLayoutTag_UseChannelDescriptions: ::std::os::raw::c_uint = 0;
pub const kAudioChannelLayoutTag_UseChannelBitmap: ::std::os::raw::c_uint = 65536;
pub const kAudioChannelLayoutTag_Mono: ::std::os::raw::c_uint = 6553601;
pub const kAudioChannelLayoutTag_Stereo: ::std::os::raw::c_uint = 6619138;
pub const kAudioChannelLayoutTag_StereoHeadphones: ::std::os::raw::c_uint = 6684674;
pub const kAudioChannelLayoutTag_MatrixStereo: ::std::os::raw::c_uint = 6750210;
pub const kAudioChannelLayoutTag_MidSide: ::std::os::raw::c_uint = 6815746;
pub const kAudioChannelLayoutTag_XY: ::std::os::raw::c_uint = 6881282;
pub const kAudioChannelLayoutTag_Binaural: ::std::os::raw::c_uint = 6946818;
pub const kAudioChannelLayoutTag_Ambisonic_B_Format: ::std::os::raw::c_uint = 7012356;
pub const kAudioChannelLayoutTag_Quadraphonic: ::std::os::raw::c_uint = 7077892;
pub const kAudioChannelLayoutTag_Pentagonal: ::std::os::raw::c_uint = 7143429;
pub const kAudioChannelLayoutTag_Hexagonal: ::std::os::raw::c_uint = 7208966;
pub const kAudioChannelLayoutTag_Octagonal: ::std::os::raw::c_uint = 7274504;
pub const kAudioChannelLayoutTag_Cube: ::std::os::raw::c_uint = 7340040;
pub const kAudioChannelLayoutTag_MPEG_1_0: ::std::os::raw::c_uint = 6553601;
pub const kAudioChannelLayoutTag_MPEG_2_0: ::std::os::raw::c_uint = 6619138;
pub const kAudioChannelLayoutTag_MPEG_3_0_A: ::std::os::raw::c_uint = 7405571;
pub const kAudioChannelLayoutTag_MPEG_3_0_B: ::std::os::raw::c_uint = 7471107;
pub const kAudioChannelLayoutTag_MPEG_4_0_A: ::std::os::raw::c_uint = 7536644;
pub const kAudioChannelLayoutTag_MPEG_4_0_B: ::std::os::raw::c_uint = 7602180;
pub const kAudioChannelLayoutTag_MPEG_5_0_A: ::std::os::raw::c_uint = 7667717;
pub const kAudioChannelLayoutTag_MPEG_5_0_B: ::std::os::raw::c_uint = 7733253;
pub const kAudioChannelLayoutTag_MPEG_5_0_C: ::std::os::raw::c_uint = 7798789;
pub const kAudioChannelLayoutTag_MPEG_5_0_D: ::std::os::raw::c_uint = 7864325;
pub const kAudioChannelLayoutTag_MPEG_5_1_A: ::std::os::raw::c_uint = 7929862;
pub const kAudioChannelLayoutTag_MPEG_5_1_B: ::std::os::raw::c_uint = 7995398;
pub const kAudioChannelLayoutTag_MPEG_5_1_C: ::std::os::raw::c_uint = 8060934;
pub const kAudioChannelLayoutTag_MPEG_5_1_D: ::std::os::raw::c_uint = 8126470;
pub const kAudioChannelLayoutTag_MPEG_6_1_A: ::std::os::raw::c_uint = 8192007;
pub const kAudioChannelLayoutTag_MPEG_7_1_A: ::std::os::raw::c_uint = 8257544;
pub const kAudioChannelLayoutTag_MPEG_7_1_B: ::std::os::raw::c_uint = 8323080;
pub const kAudioChannelLayoutTag_MPEG_7_1_C: ::std::os::raw::c_uint = 8388616;
pub const kAudioChannelLayoutTag_Emagic_Default_7_1: ::std::os::raw::c_uint = 8454152;
pub const kAudioChannelLayoutTag_SMPTE_DTV: ::std::os::raw::c_uint = 8519688;
pub const kAudioChannelLayoutTag_ITU_1_0: ::std::os::raw::c_uint = 6553601;
pub const kAudioChannelLayoutTag_ITU_2_0: ::std::os::raw::c_uint = 6619138;
pub const kAudioChannelLayoutTag_ITU_2_1: ::std::os::raw::c_uint = 8585219;
pub const kAudioChannelLayoutTag_ITU_2_2: ::std::os::raw::c_uint = 8650756;
pub const kAudioChannelLayoutTag_ITU_3_0: ::std::os::raw::c_uint = 7405571;
pub const kAudioChannelLayoutTag_ITU_3_1: ::std::os::raw::c_uint = 7536644;
pub const kAudioChannelLayoutTag_ITU_3_2: ::std::os::raw::c_uint = 7667717;
pub const kAudioChannelLayoutTag_ITU_3_2_1: ::std::os::raw::c_uint = 7929862;
pub const kAudioChannelLayoutTag_ITU_3_4_1: ::std::os::raw::c_uint = 8388616;
pub const kAudioChannelLayoutTag_DVD_0: ::std::os::raw::c_uint = 6553601;
pub const kAudioChannelLayoutTag_DVD_1: ::std::os::raw::c_uint = 6619138;
pub const kAudioChannelLayoutTag_DVD_2: ::std::os::raw::c_uint = 8585219;
pub const kAudioChannelLayoutTag_DVD_3: ::std::os::raw::c_uint = 8650756;
pub const kAudioChannelLayoutTag_DVD_4: ::std::os::raw::c_uint = 8716291;
pub const kAudioChannelLayoutTag_DVD_5: ::std::os::raw::c_uint = 8781828;
pub const kAudioChannelLayoutTag_DVD_6: ::std::os::raw::c_uint = 8847365;
pub const kAudioChannelLayoutTag_DVD_7: ::std::os::raw::c_uint = 7405571;
pub const kAudioChannelLayoutTag_DVD_8: ::std::os::raw::c_uint = 7536644;
pub const kAudioChannelLayoutTag_DVD_9: ::std::os::raw::c_uint = 7667717;
pub const kAudioChannelLayoutTag_DVD_10: ::std::os::raw::c_uint = 8912900;
pub const kAudioChannelLayoutTag_DVD_11: ::std::os::raw::c_uint = 8978437;
pub const kAudioChannelLayoutTag_DVD_12: ::std::os::raw::c_uint = 7929862;
pub const kAudioChannelLayoutTag_DVD_13: ::std::os::raw::c_uint = 7536644;
pub const kAudioChannelLayoutTag_DVD_14: ::std::os::raw::c_uint = 7667717;
pub const kAudioChannelLayoutTag_DVD_15: ::std::os::raw::c_uint = 8912900;
pub const kAudioChannelLayoutTag_DVD_16: ::std::os::raw::c_uint = 8978437;
pub const kAudioChannelLayoutTag_DVD_17: ::std::os::raw::c_uint = 7929862;
pub const kAudioChannelLayoutTag_DVD_18: ::std::os::raw::c_uint = 9043973;
pub const kAudioChannelLayoutTag_DVD_19: ::std::os::raw::c_uint = 7733253;
pub const kAudioChannelLayoutTag_DVD_20: ::std::os::raw::c_uint = 7995398;
pub const kAudioChannelLayoutTag_AudioUnit_4: ::std::os::raw::c_uint = 7077892;
pub const kAudioChannelLayoutTag_AudioUnit_5: ::std::os::raw::c_uint = 7143429;
pub const kAudioChannelLayoutTag_AudioUnit_6: ::std::os::raw::c_uint = 7208966;
pub const kAudioChannelLayoutTag_AudioUnit_8: ::std::os::raw::c_uint = 7274504;
pub const kAudioChannelLayoutTag_AudioUnit_5_0: ::std::os::raw::c_uint = 7733253;
pub const kAudioChannelLayoutTag_AudioUnit_6_0: ::std::os::raw::c_uint = 9109510;
pub const kAudioChannelLayoutTag_AudioUnit_7_0: ::std::os::raw::c_uint = 9175047;
pub const kAudioChannelLayoutTag_AudioUnit_7_0_Front: ::std::os::raw::c_uint = 9699335;
pub const kAudioChannelLayoutTag_AudioUnit_5_1: ::std::os::raw::c_uint = 7929862;
pub const kAudioChannelLayoutTag_AudioUnit_6_1: ::std::os::raw::c_uint = 8192007;
pub const kAudioChannelLayoutTag_AudioUnit_7_1: ::std::os::raw::c_uint = 8388616;
pub const kAudioChannelLayoutTag_AudioUnit_7_1_Front: ::std::os::raw::c_uint = 8257544;
pub const kAudioChannelLayoutTag_AAC_3_0: ::std::os::raw::c_uint = 7471107;
pub const kAudioChannelLayoutTag_AAC_Quadraphonic: ::std::os::raw::c_uint = 7077892;
pub const kAudioChannelLayoutTag_AAC_4_0: ::std::os::raw::c_uint = 7602180;
pub const kAudioChannelLayoutTag_AAC_5_0: ::std::os::raw::c_uint = 7864325;
pub const kAudioChannelLayoutTag_AAC_5_1: ::std::os::raw::c_uint = 8126470;
pub const kAudioChannelLayoutTag_AAC_6_0: ::std::os::raw::c_uint = 9240582;
pub const kAudioChannelLayoutTag_AAC_6_1: ::std::os::raw::c_uint = 9306119;
pub const kAudioChannelLayoutTag_AAC_7_0: ::std::os::raw::c_uint = 9371655;
pub const kAudioChannelLayoutTag_AAC_7_1: ::std::os::raw::c_uint = 8323080;
pub const kAudioChannelLayoutTag_AAC_7_1_B: ::std::os::raw::c_uint = 11993096;
pub const kAudioChannelLayoutTag_AAC_7_1_C: ::std::os::raw::c_uint = 12058632;
pub const kAudioChannelLayoutTag_AAC_Octagonal: ::std::os::raw::c_uint = 9437192;
pub const kAudioChannelLayoutTag_TMH_10_2_std: ::std::os::raw::c_uint = 9502736;
pub const kAudioChannelLayoutTag_TMH_10_2_full: ::std::os::raw::c_uint = 9568277;
pub const kAudioChannelLayoutTag_AC3_1_0_1: ::std::os::raw::c_uint = 9764866;
pub const kAudioChannelLayoutTag_AC3_3_0: ::std::os::raw::c_uint = 9830403;
pub const kAudioChannelLayoutTag_AC3_3_1: ::std::os::raw::c_uint = 9895940;
pub const kAudioChannelLayoutTag_AC3_3_0_1: ::std::os::raw::c_uint = 9961476;
pub const kAudioChannelLayoutTag_AC3_2_1_1: ::std::os::raw::c_uint = 10027012;
pub const kAudioChannelLayoutTag_AC3_3_1_1: ::std::os::raw::c_uint = 10092549;
pub const kAudioChannelLayoutTag_EAC_6_0_A: ::std::os::raw::c_uint = 10158086;
pub const kAudioChannelLayoutTag_EAC_7_0_A: ::std::os::raw::c_uint = 10223623;
pub const kAudioChannelLayoutTag_EAC3_6_1_A: ::std::os::raw::c_uint = 10289159;
pub const kAudioChannelLayoutTag_EAC3_6_1_B: ::std::os::raw::c_uint = 10354695;
pub const kAudioChannelLayoutTag_EAC3_6_1_C: ::std::os::raw::c_uint = 10420231;
pub const kAudioChannelLayoutTag_EAC3_7_1_A: ::std::os::raw::c_uint = 10485768;
pub const kAudioChannelLayoutTag_EAC3_7_1_B: ::std::os::raw::c_uint = 10551304;
pub const kAudioChannelLayoutTag_EAC3_7_1_C: ::std::os::raw::c_uint = 10616840;
pub const kAudioChannelLayoutTag_EAC3_7_1_D: ::std::os::raw::c_uint = 10682376;
pub const kAudioChannelLayoutTag_EAC3_7_1_E: ::std::os::raw::c_uint = 10747912;
pub const kAudioChannelLayoutTag_EAC3_7_1_F: ::std::os::raw::c_uint = 10813448;
pub const kAudioChannelLayoutTag_EAC3_7_1_G: ::std::os::raw::c_uint = 10878984;
pub const kAudioChannelLayoutTag_EAC3_7_1_H: ::std::os::raw::c_uint = 10944520;
pub const kAudioChannelLayoutTag_DTS_3_1: ::std::os::raw::c_uint = 11010052;
pub const kAudioChannelLayoutTag_DTS_4_1: ::std::os::raw::c_uint = 11075589;
pub const kAudioChannelLayoutTag_DTS_6_0_A: ::std::os::raw::c_uint = 11141126;
pub const kAudioChannelLayoutTag_DTS_6_0_B: ::std::os::raw::c_uint = 11206662;
pub const kAudioChannelLayoutTag_DTS_6_0_C: ::std::os::raw::c_uint = 11272198;
pub const kAudioChannelLayoutTag_DTS_6_1_A: ::std::os::raw::c_uint = 11337735;
pub const kAudioChannelLayoutTag_DTS_6_1_B: ::std::os::raw::c_uint = 11403271;
pub const kAudioChannelLayoutTag_DTS_6_1_C: ::std::os::raw::c_uint = 11468807;
pub const kAudioChannelLayoutTag_DTS_7_0: ::std::os::raw::c_uint = 11534343;
pub const kAudioChannelLayoutTag_DTS_7_1: ::std::os::raw::c_uint = 11599880;
pub const kAudioChannelLayoutTag_DTS_8_0_A: ::std::os::raw::c_uint = 11665416;
pub const kAudioChannelLayoutTag_DTS_8_0_B: ::std::os::raw::c_uint = 11730952;
pub const kAudioChannelLayoutTag_DTS_8_1_A: ::std::os::raw::c_uint = 11796489;
pub const kAudioChannelLayoutTag_DTS_8_1_B: ::std::os::raw::c_uint = 11862025;
pub const kAudioChannelLayoutTag_DTS_6_1_D: ::std::os::raw::c_uint = 11927559;
pub const kAudioChannelLayoutTag_WAVE_2_1: ::std::os::raw::c_uint = 8716291;
pub const kAudioChannelLayoutTag_WAVE_3_0: ::std::os::raw::c_uint = 7405571;
pub const kAudioChannelLayoutTag_WAVE_4_0_A: ::std::os::raw::c_uint = 8650756;
pub const kAudioChannelLayoutTag_WAVE_4_0_B: ::std::os::raw::c_uint = 12124164;
pub const kAudioChannelLayoutTag_WAVE_5_0_A: ::std::os::raw::c_uint = 7667717;
pub const kAudioChannelLayoutTag_WAVE_5_0_B: ::std::os::raw::c_uint = 12189701;
pub const kAudioChannelLayoutTag_WAVE_5_1_A: ::std::os::raw::c_uint = 7929862;
pub const kAudioChannelLayoutTag_WAVE_5_1_B: ::std::os::raw::c_uint = 12255238;
pub const kAudioChannelLayoutTag_WAVE_6_1: ::std::os::raw::c_uint = 12320775;
pub const kAudioChannelLayoutTag_WAVE_7_1: ::std::os::raw::c_uint = 12386312;
pub const kAudioChannelLayoutTag_HOA_ACN_SN3D: ::std::os::raw::c_uint = 12451840;
pub const kAudioChannelLayoutTag_HOA_ACN_N3D: ::std::os::raw::c_uint = 12517376;
pub const kAudioChannelLayoutTag_Atmos_5_1_2: ::std::os::raw::c_uint = 12713992;
pub const kAudioChannelLayoutTag_Atmos_5_1_4: ::std::os::raw::c_uint = 12779530;
pub const kAudioChannelLayoutTag_Atmos_7_1_2: ::std::os::raw::c_uint = 12845066;
pub const kAudioChannelLayoutTag_Atmos_7_1_4: ::std::os::raw::c_uint = 12582924;
pub const kAudioChannelLayoutTag_Atmos_9_1_6: ::std::os::raw::c_uint = 12648464;
pub const kAudioChannelLayoutTag_DiscreteInOrder: ::std::os::raw::c_uint = 9633792;
pub const kAudioChannelLayoutTag_BeginReserved: ::std::os::raw::c_uint = 4026531840;
pub const kAudioChannelLayoutTag_EndReserved: ::std::os::raw::c_uint = 4294901759;
pub const kAudioChannelLayoutTag_Unknown: ::std::os::raw::c_uint = 4294901760;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioChannelDescription {
    pub mChannelLabel: AudioChannelLabel,
    pub mChannelFlags: AudioChannelFlags,
    pub mCoordinates: [Float32; 3usize],
}
#[test]
fn bindgen_test_layout_AudioChannelDescription() {
    assert_eq!(
        ::std::mem::size_of::<AudioChannelDescription>(),
        20usize,
        concat!("Size of: ", stringify!(AudioChannelDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioChannelDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioChannelDescription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelDescription>())).mChannelLabel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelDescription),
            "::",
            stringify!(mChannelLabel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelDescription>())).mChannelFlags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelDescription),
            "::",
            stringify!(mChannelFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelDescription>())).mCoordinates as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelDescription),
            "::",
            stringify!(mCoordinates)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioChannelLayout {
    pub mChannelLayoutTag: AudioChannelLayoutTag,
    pub mChannelBitmap: AudioChannelBitmap,
    pub mNumberChannelDescriptions: UInt32,
    pub mChannelDescriptions: [AudioChannelDescription; 1usize],
}
#[test]
fn bindgen_test_layout_AudioChannelLayout() {
    assert_eq!(
        ::std::mem::size_of::<AudioChannelLayout>(),
        32usize,
        concat!("Size of: ", stringify!(AudioChannelLayout))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioChannelLayout>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioChannelLayout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelLayout>())).mChannelLayoutTag as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelLayout),
            "::",
            stringify!(mChannelLayoutTag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelLayout>())).mChannelBitmap as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelLayout),
            "::",
            stringify!(mChannelBitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelLayout>())).mNumberChannelDescriptions as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelLayout),
            "::",
            stringify!(mNumberChannelDescriptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioChannelLayout>())).mChannelDescriptions as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioChannelLayout),
            "::",
            stringify!(mChannelDescriptions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioFormatListItem {
    pub mASBD: AudioStreamBasicDescription,
    pub mChannelLayoutTag: AudioChannelLayoutTag,
}
#[test]
fn bindgen_test_layout_AudioFormatListItem() {
    assert_eq!(
        ::std::mem::size_of::<AudioFormatListItem>(),
        48usize,
        concat!("Size of: ", stringify!(AudioFormatListItem))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFormatListItem>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFormatListItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFormatListItem>())).mASBD as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFormatListItem),
            "::",
            stringify!(mASBD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFormatListItem>())).mChannelLayoutTag as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFormatListItem),
            "::",
            stringify!(mChannelLayoutTag)
        )
    );
}
pub type MPEG4ObjectID = ::std::os::raw::c_long;
pub const kMPEG4Object_AAC_Main: ::std::os::raw::c_uint = 1;
pub const kMPEG4Object_AAC_LC: ::std::os::raw::c_uint = 2;
pub const kMPEG4Object_AAC_SSR: ::std::os::raw::c_uint = 3;
pub const kMPEG4Object_AAC_LTP: ::std::os::raw::c_uint = 4;
pub const kMPEG4Object_AAC_SBR: ::std::os::raw::c_uint = 5;
pub const kMPEG4Object_AAC_Scalable: ::std::os::raw::c_uint = 6;
pub const kMPEG4Object_TwinVQ: ::std::os::raw::c_uint = 7;
pub const kMPEG4Object_CELP: ::std::os::raw::c_uint = 8;
pub const kMPEG4Object_HVXC: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub type AVAudioInteger = ::std::os::raw::c_long;
pub type AVAudioUInteger = ::std::os::raw::c_ulong;
pub type AudioSessionID = u32;
pub type AVAudioSessionErrorCode = AVAudioInteger;
pub const AVAudioSessionErrorCodeNone: ::std::os::raw::c_int = 0;
pub const AVAudioSessionErrorCodeMediaServicesFailed: ::std::os::raw::c_int = 1836282486;
pub const AVAudioSessionErrorCodeIsBusy: ::std::os::raw::c_int = 560030580;
pub const AVAudioSessionErrorCodeIncompatibleCategory: ::std::os::raw::c_int = 560161140;
pub const AVAudioSessionErrorCodeCannotInterruptOthers: ::std::os::raw::c_int = 560557684;
pub const AVAudioSessionErrorCodeMissingEntitlement: ::std::os::raw::c_int = 1701737535;
pub const AVAudioSessionErrorCodeSiriIsRecording: ::std::os::raw::c_int = 1936290409;
pub const AVAudioSessionErrorCodeCannotStartPlaying: ::std::os::raw::c_int = 561015905;
pub const AVAudioSessionErrorCodeCannotStartRecording: ::std::os::raw::c_int = 561145187;
pub const AVAudioSessionErrorCodeBadParam: ::std::os::raw::c_int = -50;
pub const AVAudioSessionErrorCodeInsufficientPriority: ::std::os::raw::c_int = 561017449;
pub const AVAudioSessionErrorCodeResourceNotAvailable: ::std::os::raw::c_int = 561145203;
pub const AVAudioSessionErrorCodeUnspecified: ::std::os::raw::c_int = 2003329396;
pub const AVAudioSessionErrorCodeExpiredSession: ::std::os::raw::c_int = 561210739;
pub const AVAudioSessionErrorCodeSessionNotActive: ::std::os::raw::c_int = 1768841571;
pub type _bindgen_ty_21 = ::std::os::raw::c_int;
pub const AVAudioSessionErrorInsufficientPriority: ::std::os::raw::c_uint = 561017449;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
impl Default for _RuneEntry {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__nranges as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
impl Default for _RuneRange {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sgetrune as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sputrune as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__invalid_rune as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype_ext as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower_ext as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper_ext as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable_len as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__ncharclasses as *const _ as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__charclasses as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
impl Default for _RuneLocale {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
impl Default for lconv {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    pub fn __inff() -> f32;
}
extern "C" {
    pub fn __inf() -> f64;
}
extern "C" {
    pub fn __infl() -> u128;
}
extern "C" {
    pub fn __nan() -> f32;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[test]
fn bindgen_test_layout___float2() {
    assert_eq!(
        ::std::mem::size_of::<__float2>(),
        8usize,
        concat!("Size of: ", stringify!(__float2))
    );
    assert_eq!(
        ::std::mem::align_of::<__float2>(),
        4usize,
        concat!("Alignment of ", stringify!(__float2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__float2>())).__sinval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__float2>())).__cosval as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__cosval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[test]
fn bindgen_test_layout___double2() {
    assert_eq!(
        ::std::mem::size_of::<__double2>(),
        16usize,
        concat!("Size of: ", stringify!(__double2))
    );
    assert_eq!(
        ::std::mem::align_of::<__double2>(),
        8usize,
        concat!("Alignment of ", stringify!(__double2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__double2>())).__sinval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__double2>())).__cosval as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__cosval)
        )
    );
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
impl Default for exception {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn longjmperror();
}
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ecx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esi as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eflags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__cs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__es as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__fs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__gs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_rsrv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_xmm_reg>())).__xmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ymm_reg>())).__ymm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_zmm_reg>())).__zmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
impl Default for __darwin_zmm_reg {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_opmask_reg>())).__opmask_reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
impl Default for __darwin_i386_float_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsrmask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved1 as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__avx_reserved1 as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
impl Default for __darwin_i386_avx_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k0 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k1 as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k3 as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k4 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k5 as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k6 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k7 as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh0 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh1 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh2 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh3 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh4 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh5 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh6 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh7 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
impl Default for __darwin_i386_avx512_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_stream_valid_bytes
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_stream_valid_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__out_of_synch as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__out_of_synch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_bytes as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_instruction_state>())).__insn_cacheline as *const _
                as usize
        },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_cacheline)
        )
    );
}
impl Default for __x86_instruction_state {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_record>())).__from_ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__from_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_record>())).__to_ip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__to_ip)
        )
    );
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_state>())).__lbr_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbr_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__last_branch_state>())).__lbrs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbrs)
        )
    );
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__x86_pagein_state>())).__pagein_error as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rcx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdi as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsi as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsp as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r9 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r10 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r11 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r12 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r13 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r14 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r15 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__fs as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__gs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ds as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__es as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__ss as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_full_state64>())).__gsbase as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__gsbase)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
impl Default for __darwin_x86_float_state64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh10 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh11 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh12 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh13 as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh14 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh15 as *const _ as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
impl Default for __darwin_x86_avx_state64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh10 as *const _
                as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh11 as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh12 as *const _
                as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh13 as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh14 as *const _
                as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh15 as *const _
                as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k0 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k1 as *const _ as usize
        },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k2 as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k3 as *const _ as usize
        },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k4 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k5 as *const _ as usize
        },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k6 as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k7 as *const _ as usize
        },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh0 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh1 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh2 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh3 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh4 as *const _ as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh5 as *const _ as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh6 as *const _ as usize
        },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh7 as *const _ as usize
        },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh8 as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh9 as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh10 as *const _
                as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh11 as *const _
                as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh12 as *const _
                as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh13 as *const _
                as usize
        },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh14 as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh15 as *const _
                as usize
        },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm16 as *const _ as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm17 as *const _ as usize
        },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm18 as *const _ as usize
        },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm19 as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm20 as *const _ as usize
        },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm21 as *const _ as usize
        },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm22 as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm23 as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm24 as *const _ as usize
        },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm25 as *const _ as usize
        },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm26 as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm27 as *const _ as usize
        },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm28 as *const _ as usize
        },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm29 as *const _ as usize
        },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm30 as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm31 as *const _ as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
impl Default for __darwin_x86_avx512_state64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr3 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr4 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr5 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr7 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__ss as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__fs as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_32 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64_full>(),
        744usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64_full))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64_full>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64_full>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64_full>())).__fs as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64_full),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext64_full {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64_full>(),
        1064usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64_full>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64_full))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx64_full>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx64_full>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx64_full>())).__fs as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64_full),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx64_full {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__fs as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_64 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_64_full {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_full_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64_full() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64_full>(),
        2664usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64_full))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64_full>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_mcontext_avx512_64_full)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64_full>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64_full>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64_full>())).__fs as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64_full),
            "::",
            stringify!(__fs)
        )
    );
}
impl Default for __darwin_mcontext_avx512_64_full {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mcontext_t = *mut __darwin_mcontext64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
impl Default for __darwin_sigaltstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_onstack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_sigmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcontext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
impl Default for __darwin_ucontext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
impl Default for sigval {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify_function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify_attributes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
impl Default for sigevent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
impl Default for __siginfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_sigaction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
impl Default for __sigaction_u {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_tramp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
impl Default for __sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
impl Default for sigaction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
impl Default for sigstack {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
pub type max_align_t = u128;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
impl Default for __sbuf {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
impl Default for __sFILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_maxrss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_ixrss as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_idrss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_isrss as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_minflt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_majflt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nswap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_inblock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_oublock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgsnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgrcv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nsignals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nvcsw as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nivcsw as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interval_max_phys_footprint as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_runnable_time as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_runnable_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v5() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v5>(),
        304usize,
        concat!("Size of: ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v5>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v5>())).ri_interval_max_phys_footprint as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_interval_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_runnable_time as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_runnable_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v5>())).ri_flags as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v5),
            "::",
            stringify!(ri_flags)
        )
    );
}
pub type rusage_info_current = rusage_info_v5;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_T as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_S as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
impl Default for wait {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type CFArrayRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFArrayReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFArrayCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFArrayEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFArrayCallBacks {
    pub version: CFIndex,
    pub retain: CFArrayRetainCallBack,
    pub release: CFArrayReleaseCallBack,
    pub copyDescription: CFArrayCopyDescriptionCallBack,
    pub equal: CFArrayEqualCallBack,
}
#[test]
fn bindgen_test_layout_CFArrayCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFArrayCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFArrayCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFArrayCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFArrayCallBacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFArrayCallBacks>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFArrayCallBacks>())).retain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFArrayCallBacks>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFArrayCallBacks>())).copyDescription as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFArrayCallBacks>())).equal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFArrayCallBacks),
            "::",
            stringify!(equal)
        )
    );
}
extern "C" {
    pub static kCFTypeArrayCallBacks: CFArrayCallBacks;
}
pub type CFArrayApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFArray {
    _unused: [u8; 0],
}
pub type CFArrayRef = *const __CFArray;
pub type CFMutableArrayRef = *mut __CFArray;
extern "C" {
    pub fn CFArrayGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFArrayCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFArrayCallBacks,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theArray: CFArrayRef,
    ) -> CFMutableArrayRef;
}
extern "C" {
    pub fn CFArrayGetCount(theArray: CFArrayRef) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetCountOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayContainsValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFArrayGetValueAtIndex(
        theArray: CFArrayRef,
        idx: CFIndex,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFArrayGetValues(
        theArray: CFArrayRef,
        range: CFRange,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayApplyFunction(
        theArray: CFArrayRef,
        range: CFRange,
        applier: CFArrayApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayGetFirstIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayGetLastIndexOfValue(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayBSearchValues(
        theArray: CFArrayRef,
        range: CFRange,
        value: *const ::std::os::raw::c_void,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFArrayInsertValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArraySetValueAtIndex(
        theArray: CFMutableArrayRef,
        idx: CFIndex,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex);
}
extern "C" {
    pub fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef);
}
extern "C" {
    pub fn CFArrayReplaceValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        newValues: *mut *const ::std::os::raw::c_void,
        newCount: CFIndex,
    );
}
extern "C" {
    pub fn CFArrayExchangeValuesAtIndices(
        theArray: CFMutableArrayRef,
        idx1: CFIndex,
        idx2: CFIndex,
    );
}
extern "C" {
    pub fn CFArraySortValues(
        theArray: CFMutableArrayRef,
        range: CFRange,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFArrayAppendArray(
        theArray: CFMutableArrayRef,
        otherArray: CFArrayRef,
        otherRange: CFRange,
    );
}
pub type CFBagRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFBagReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFBagCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFBagEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFBagHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFBagCallBacks {
    pub version: CFIndex,
    pub retain: CFBagRetainCallBack,
    pub release: CFBagReleaseCallBack,
    pub copyDescription: CFBagCopyDescriptionCallBack,
    pub equal: CFBagEqualCallBack,
    pub hash: CFBagHashCallBack,
}
#[test]
fn bindgen_test_layout_CFBagCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFBagCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFBagCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFBagCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFBagCallBacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBagCallBacks>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBagCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBagCallBacks>())).retain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBagCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBagCallBacks>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBagCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBagCallBacks>())).copyDescription as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBagCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBagCallBacks>())).equal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBagCallBacks),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBagCallBacks>())).hash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBagCallBacks),
            "::",
            stringify!(hash)
        )
    );
}
extern "C" {
    pub static kCFTypeBagCallBacks: CFBagCallBacks;
}
extern "C" {
    pub static kCFCopyStringBagCallBacks: CFBagCallBacks;
}
pub type CFBagApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBag {
    _unused: [u8; 0],
}
pub type CFBagRef = *const __CFBag;
pub type CFMutableBagRef = *mut __CFBag;
extern "C" {
    pub fn CFBagGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBagCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) -> CFBagRef;
}
extern "C" {
    pub fn CFBagCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBagCallBacks,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theBag: CFBagRef,
    ) -> CFMutableBagRef;
}
extern "C" {
    pub fn CFBagGetCount(theBag: CFBagRef) -> CFIndex;
}
extern "C" {
    pub fn CFBagGetCountOfValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFBagContainsValue(theBag: CFBagRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValue(
        theBag: CFBagRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBagGetValueIfPresent(
        theBag: CFBagRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBagGetValues(theBag: CFBagRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagApplyFunction(
        theBag: CFBagRef,
        applier: CFBagApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBagAddValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagReplaceValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagSetValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveValue(theBag: CFMutableBagRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBagRemoveAllValues(theBag: CFMutableBagRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFBinaryHeapCompareContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFBinaryHeapCompareContext() {
    assert_eq!(
        ::std::mem::size_of::<CFBinaryHeapCompareContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFBinaryHeapCompareContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFBinaryHeapCompareContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFBinaryHeapCompareContext))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFBinaryHeapCompareContext>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBinaryHeapCompareContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFBinaryHeapCompareContext>())).retain as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFBinaryHeapCompareContext>())).release as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFBinaryHeapCompareContext>())).copyDescription as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCompareContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFBinaryHeapCompareContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFBinaryHeapCallBacks {
    pub version: CFIndex,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: CFAllocatorRef,
            ptr: *const ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(allocator: CFAllocatorRef, ptr: *const ::std::os::raw::c_void),
    >,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            ptr1: *const ::std::os::raw::c_void,
            ptr2: *const ::std::os::raw::c_void,
            context: *mut ::std::os::raw::c_void,
        ) -> CFComparisonResult,
    >,
}
#[test]
fn bindgen_test_layout_CFBinaryHeapCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFBinaryHeapCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFBinaryHeapCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFBinaryHeapCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFBinaryHeapCallBacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBinaryHeapCallBacks>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBinaryHeapCallBacks>())).retain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBinaryHeapCallBacks>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFBinaryHeapCallBacks>())).copyDescription as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFBinaryHeapCallBacks>())).compare as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFBinaryHeapCallBacks),
            "::",
            stringify!(compare)
        )
    );
}
extern "C" {
    pub static kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
}
pub type CFBinaryHeapApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(val: *const ::std::os::raw::c_void, context: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBinaryHeap {
    _unused: [u8; 0],
}
pub type CFBinaryHeapRef = *mut __CFBinaryHeap;
extern "C" {
    pub fn CFBinaryHeapGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBinaryHeapCreate(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFBinaryHeapCallBacks,
        compareContext: *const CFBinaryHeapCompareContext,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapCreateCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        heap: CFBinaryHeapRef,
    ) -> CFBinaryHeapRef;
}
extern "C" {
    pub fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapGetCountOfValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBinaryHeapContainsValue(
        heap: CFBinaryHeapRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBinaryHeapGetMinimumIfPresent(
        heap: CFBinaryHeapRef,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapApplyFunction(
        heap: CFBinaryHeapRef,
        applier: CFBinaryHeapApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef);
}
extern "C" {
    pub fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef);
}
pub type CFBit = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBitVector {
    _unused: [u8; 0],
}
pub type CFBitVectorRef = *const __CFBitVector;
pub type CFMutableBitVectorRef = *mut __CFBitVector;
extern "C" {
    pub fn CFBitVectorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBitVectorCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        numBits: CFIndex,
    ) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) -> CFBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        bv: CFBitVectorRef,
    ) -> CFMutableBitVectorRef;
}
extern "C" {
    pub fn CFBitVectorGetCount(bv: CFBitVectorRef) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) -> Boolean;
}
extern "C" {
    pub fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) -> CFBit;
}
extern "C" {
    pub fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: *mut UInt8);
}
extern "C" {
    pub fn CFBitVectorGetFirstIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorGetLastIndexOfBit(
        bv: CFBitVectorRef,
        range: CFRange,
        value: CFBit,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex);
}
extern "C" {
    pub fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange);
}
extern "C" {
    pub fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit);
}
extern "C" {
    pub fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit);
}
pub const OSUnknownByteOrder: ::std::os::raw::c_uint = 0;
pub const OSLittleEndian: ::std::os::raw::c_uint = 1;
pub const OSBigEndian: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const __CFByteOrder_CFByteOrderUnknown: __CFByteOrder = 0;
pub const __CFByteOrder_CFByteOrderLittleEndian: __CFByteOrder = 1;
pub const __CFByteOrder_CFByteOrderBigEndian: __CFByteOrder = 2;
pub type __CFByteOrder = ::std::os::raw::c_uint;
pub type CFByteOrder = CFIndex;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFSwappedFloat32 {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_CFSwappedFloat32() {
    assert_eq!(
        ::std::mem::size_of::<CFSwappedFloat32>(),
        4usize,
        concat!("Size of: ", stringify!(CFSwappedFloat32))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSwappedFloat32>(),
        4usize,
        concat!("Alignment of ", stringify!(CFSwappedFloat32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSwappedFloat32>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSwappedFloat32),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFSwappedFloat64 {
    pub v: u64,
}
#[test]
fn bindgen_test_layout_CFSwappedFloat64() {
    assert_eq!(
        ::std::mem::size_of::<CFSwappedFloat64>(),
        8usize,
        concat!("Size of: ", stringify!(CFSwappedFloat64))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSwappedFloat64>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSwappedFloat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSwappedFloat64>())).v as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSwappedFloat64),
            "::",
            stringify!(v)
        )
    );
}
pub type CFDictionaryRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFDictionaryReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFDictionaryCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFDictionaryEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFDictionaryHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFDictionaryKeyCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
    pub hash: CFDictionaryHashCallBack,
}
#[test]
fn bindgen_test_layout_CFDictionaryKeyCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFDictionaryKeyCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFDictionaryKeyCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFDictionaryKeyCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFDictionaryKeyCallBacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryKeyCallBacks>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFDictionaryKeyCallBacks>())).retain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryKeyCallBacks>())).release as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryKeyCallBacks>())).copyDescription as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFDictionaryKeyCallBacks>())).equal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFDictionaryKeyCallBacks>())).hash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryKeyCallBacks),
            "::",
            stringify!(hash)
        )
    );
}
extern "C" {
    pub static kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
extern "C" {
    pub static kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFDictionaryValueCallBacks {
    pub version: CFIndex,
    pub retain: CFDictionaryRetainCallBack,
    pub release: CFDictionaryReleaseCallBack,
    pub copyDescription: CFDictionaryCopyDescriptionCallBack,
    pub equal: CFDictionaryEqualCallBack,
}
#[test]
fn bindgen_test_layout_CFDictionaryValueCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFDictionaryValueCallBacks>(),
        40usize,
        concat!("Size of: ", stringify!(CFDictionaryValueCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFDictionaryValueCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFDictionaryValueCallBacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryValueCallBacks>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryValueCallBacks>())).retain as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryValueCallBacks>())).release as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryValueCallBacks>())).copyDescription as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFDictionaryValueCallBacks>())).equal as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFDictionaryValueCallBacks),
            "::",
            stringify!(equal)
        )
    );
}
extern "C" {
    pub static kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
}
pub type CFDictionaryApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDictionary {
    _unused: [u8; 0],
}
pub type CFDictionaryRef = *const __CFDictionary;
pub type CFMutableDictionaryRef = *mut __CFDictionary;
extern "C" {
    pub fn CFDictionaryGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDictionaryCreate(
        allocator: CFAllocatorRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateCopy(
        allocator: CFAllocatorRef,
        theDict: CFDictionaryRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        keyCallBacks: *const CFDictionaryKeyCallBacks,
        valueCallBacks: *const CFDictionaryValueCallBacks,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theDict: CFDictionaryRef,
    ) -> CFMutableDictionaryRef;
}
extern "C" {
    pub fn CFDictionaryGetCount(theDict: CFDictionaryRef) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryGetCountOfValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFDictionaryContainsKey(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryContainsValue(
        theDict: CFDictionaryRef,
        value: *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetValue(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFDictionaryGetValueIfPresent(
        theDict: CFDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDictionaryGetKeysAndValues(
        theDict: CFDictionaryRef,
        keys: *mut *const ::std::os::raw::c_void,
        values: *mut *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryApplyFunction(
        theDict: CFDictionaryRef,
        applier: CFDictionaryApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryAddValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionarySetValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryReplaceValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
        value: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveValue(
        theDict: CFMutableDictionaryRef,
        key: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef);
}
pub type CFNotificationName = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNotificationCenter {
    _unused: [u8; 0],
}
pub type CFNotificationCenterRef = *mut __CFNotificationCenter;
pub type CFNotificationCallback = ::std::option::Option<
    unsafe extern "C" fn(
        center: CFNotificationCenterRef,
        observer: *mut ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
    ),
>;
pub type CFNotificationSuspensionBehavior = CFIndex;
pub const CFNotificationSuspensionBehaviorDrop: ::std::os::raw::c_uint = 1;
pub const CFNotificationSuspensionBehaviorCoalesce: ::std::os::raw::c_uint = 2;
pub const CFNotificationSuspensionBehaviorHold: ::std::os::raw::c_uint = 3;
pub const CFNotificationSuspensionBehaviorDeliverImmediately: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNotificationCenterGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNotificationCenterGetLocalCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDistributedCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterGetDarwinNotifyCenter() -> CFNotificationCenterRef;
}
extern "C" {
    pub fn CFNotificationCenterAddObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        callBack: CFNotificationCallback,
        name: CFStringRef,
        object: *const ::std::os::raw::c_void,
        suspensionBehavior: CFNotificationSuspensionBehavior,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterRemoveEveryObserver(
        center: CFNotificationCenterRef,
        observer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFNotificationCenterPostNotification(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        deliverImmediately: Boolean,
    );
}
pub const kCFNotificationDeliverImmediately: ::std::os::raw::c_uint = 1;
pub const kCFNotificationPostToAllSessions: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNotificationCenterPostNotificationWithOptions(
        center: CFNotificationCenterRef,
        name: CFNotificationName,
        object: *const ::std::os::raw::c_void,
        userInfo: CFDictionaryRef,
        options: CFOptionFlags,
    );
}
pub type CFLocaleIdentifier = CFStringRef;
pub type CFLocaleKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFLocale {
    _unused: [u8; 0],
}
pub type CFLocaleRef = *const __CFLocale;
extern "C" {
    pub fn CFLocaleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFLocaleGetSystem() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyCurrent() -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCopyAvailableLocaleIdentifiers() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOLanguageCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCountryCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyCommonISOCurrencyCodes() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCopyPreferredLanguages() -> CFArrayRef;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLanguageIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromString(
        allocator: CFAllocatorRef,
        localeIdentifier: CFStringRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
        allocator: CFAllocatorRef,
        lcode: LangCode,
        rcode: RegionCode,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
        allocator: CFAllocatorRef,
        lcid: u32,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
        localeIdentifier: CFLocaleIdentifier,
    ) -> u32;
}
pub type CFLocaleLanguageDirection = CFIndex;
pub const kCFLocaleLanguageDirectionUnknown: ::std::os::raw::c_uint = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: ::std::os::raw::c_uint = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: ::std::os::raw::c_uint = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: ::std::os::raw::c_uint = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFLocaleGetLanguageCharacterDirection(
        isoLangCode: CFStringRef,
    ) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) -> CFLocaleLanguageDirection;
}
extern "C" {
    pub fn CFLocaleCreateComponentsFromLocaleIdentifier(
        allocator: CFAllocatorRef,
        localeID: CFLocaleIdentifier,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFLocaleCreateLocaleIdentifierFromComponents(
        allocator: CFAllocatorRef,
        dictionary: CFDictionaryRef,
    ) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleCreate(
        allocator: CFAllocatorRef,
        localeIdentifier: CFLocaleIdentifier,
    ) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFLocaleGetIdentifier(locale: CFLocaleRef) -> CFLocaleIdentifier;
}
extern "C" {
    pub fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) -> CFTypeRef;
}
extern "C" {
    pub fn CFLocaleCopyDisplayNameForPropertyValue(
        displayLocale: CFLocaleRef,
        key: CFLocaleKey,
        value: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
}
extern "C" {
    pub static kCFLocaleIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleLanguageCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCountryCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleScriptCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleVariantCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleExemplarCharacterSet: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendarIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCalendar: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollationIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleUsesMetricSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleMeasurementSystem: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleDecimalSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleGroupingSeparator: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencySymbol: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCurrencyCode: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleCollatorIdentifier: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
}
extern "C" {
    pub static kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
}
pub type CFCalendarIdentifier = CFStringRef;
extern "C" {
    pub static kCFGregorianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFBuddhistCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFChineseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFHebrewCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicCivilCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFJapaneseCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFPersianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIndianCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFISO8601Calendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicTabularCalendar: CFCalendarIdentifier;
}
extern "C" {
    pub static kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
}
pub type CFTimeInterval = f64;
pub type CFAbsoluteTime = CFTimeInterval;
extern "C" {
    pub fn CFAbsoluteTimeGetCurrent() -> CFAbsoluteTime;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
}
extern "C" {
    pub static kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDate {
    _unused: [u8; 0],
}
pub type CFDateRef = *const __CFDate;
extern "C" {
    pub fn CFDateGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) -> CFDateRef;
}
extern "C" {
    pub fn CFDateGetAbsoluteTime(theDate: CFDateRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFDateGetTimeIntervalSinceDate(
        theDate: CFDateRef,
        otherDate: CFDateRef,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFDateCompare(
        theDate: CFDateRef,
        otherDate: CFDateRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTimeZone {
    _unused: [u8; 0],
}
pub type CFTimeZoneRef = *const __CFTimeZone;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFGregorianDate {
    pub year: SInt32,
    pub month: SInt8,
    pub day: SInt8,
    pub hour: SInt8,
    pub minute: SInt8,
    pub second: f64,
}
#[test]
fn bindgen_test_layout_CFGregorianDate() {
    assert_eq!(
        ::std::mem::size_of::<CFGregorianDate>(),
        16usize,
        concat!("Size of: ", stringify!(CFGregorianDate))
    );
    assert_eq!(
        ::std::mem::align_of::<CFGregorianDate>(),
        8usize,
        concat!("Alignment of ", stringify!(CFGregorianDate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianDate>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianDate>())).month as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianDate>())).day as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianDate>())).hour as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianDate>())).minute as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianDate>())).second as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianDate),
            "::",
            stringify!(second)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFGregorianUnits {
    pub years: SInt32,
    pub months: SInt32,
    pub days: SInt32,
    pub hours: SInt32,
    pub minutes: SInt32,
    pub seconds: f64,
}
#[test]
fn bindgen_test_layout_CFGregorianUnits() {
    assert_eq!(
        ::std::mem::size_of::<CFGregorianUnits>(),
        32usize,
        concat!("Size of: ", stringify!(CFGregorianUnits))
    );
    assert_eq!(
        ::std::mem::align_of::<CFGregorianUnits>(),
        8usize,
        concat!("Alignment of ", stringify!(CFGregorianUnits))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianUnits>())).years as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(years)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianUnits>())).months as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(months)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianUnits>())).days as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(days)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianUnits>())).hours as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(hours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianUnits>())).minutes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(minutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFGregorianUnits>())).seconds as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFGregorianUnits),
            "::",
            stringify!(seconds)
        )
    );
}
pub type CFGregorianUnitFlags = CFOptionFlags;
pub const kCFGregorianUnitsYears: ::std::os::raw::c_uint = 1;
pub const kCFGregorianUnitsMonths: ::std::os::raw::c_uint = 2;
pub const kCFGregorianUnitsDays: ::std::os::raw::c_uint = 4;
pub const kCFGregorianUnitsHours: ::std::os::raw::c_uint = 8;
pub const kCFGregorianUnitsMinutes: ::std::os::raw::c_uint = 16;
pub const kCFGregorianUnitsSeconds: ::std::os::raw::c_uint = 32;
pub const kCFGregorianAllUnits: ::std::os::raw::c_uint = 16777215;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) -> Boolean;
}
extern "C" {
    pub fn CFGregorianDateGetAbsoluteTime(
        gdate: CFGregorianDate,
        tz: CFTimeZoneRef,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef)
        -> CFGregorianDate;
}
extern "C" {
    pub fn CFAbsoluteTimeAddGregorianUnits(
        at: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        units: CFGregorianUnits,
    ) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(
        at1: CFAbsoluteTime,
        at2: CFAbsoluteTime,
        tz: CFTimeZoneRef,
        unitFlags: CFOptionFlags,
    ) -> CFGregorianUnits;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
extern "C" {
    pub fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) -> SInt32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFData {
    _unused: [u8; 0],
}
pub type CFDataRef = *const __CFData;
pub type CFMutableDataRef = *mut __CFData;
extern "C" {
    pub fn CFDataGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFDataCreate(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateWithBytesNoCopy(
        allocator: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) -> CFDataRef;
}
extern "C" {
    pub fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theData: CFDataRef,
    ) -> CFMutableDataRef;
}
extern "C" {
    pub fn CFDataGetLength(theData: CFDataRef) -> CFIndex;
}
extern "C" {
    pub fn CFDataGetBytePtr(theData: CFDataRef) -> *const UInt8;
}
extern "C" {
    pub fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) -> *mut UInt8;
}
extern "C" {
    pub fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: *mut UInt8);
}
extern "C" {
    pub fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex);
}
extern "C" {
    pub fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex);
}
extern "C" {
    pub fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: *const UInt8, length: CFIndex);
}
extern "C" {
    pub fn CFDataReplaceBytes(
        theData: CFMutableDataRef,
        range: CFRange,
        newBytes: *const UInt8,
        newLength: CFIndex,
    );
}
extern "C" {
    pub fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange);
}
pub type CFDataSearchFlags = CFOptionFlags;
pub const kCFDataSearchBackwards: ::std::os::raw::c_uint = 1;
pub const kCFDataSearchAnchored: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFDataFind(
        theData: CFDataRef,
        dataToFind: CFDataRef,
        searchRange: CFRange,
        compareOptions: CFDataSearchFlags,
    ) -> CFRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCharacterSet {
    _unused: [u8; 0],
}
pub type CFCharacterSetRef = *const __CFCharacterSet;
pub type CFMutableCharacterSetRef = *mut __CFCharacterSet;
pub type CFCharacterSetPredefinedSet = CFIndex;
pub const kCFCharacterSetControl: ::std::os::raw::c_uint = 1;
pub const kCFCharacterSetWhitespace: ::std::os::raw::c_uint = 2;
pub const kCFCharacterSetWhitespaceAndNewline: ::std::os::raw::c_uint = 3;
pub const kCFCharacterSetDecimalDigit: ::std::os::raw::c_uint = 4;
pub const kCFCharacterSetLetter: ::std::os::raw::c_uint = 5;
pub const kCFCharacterSetLowercaseLetter: ::std::os::raw::c_uint = 6;
pub const kCFCharacterSetUppercaseLetter: ::std::os::raw::c_uint = 7;
pub const kCFCharacterSetNonBase: ::std::os::raw::c_uint = 8;
pub const kCFCharacterSetDecomposable: ::std::os::raw::c_uint = 9;
pub const kCFCharacterSetAlphaNumeric: ::std::os::raw::c_uint = 10;
pub const kCFCharacterSetPunctuation: ::std::os::raw::c_uint = 11;
pub const kCFCharacterSetCapitalizedLetter: ::std::os::raw::c_uint = 13;
pub const kCFCharacterSetSymbol: ::std::os::raw::c_uint = 14;
pub const kCFCharacterSetNewline: ::std::os::raw::c_uint = 15;
pub const kCFCharacterSetIllegal: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFCharacterSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCharacterSetGetPredefined(
        theSetIdentifier: CFCharacterSetPredefinedSet,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInRange(
        alloc: CFAllocatorRef,
        theRange: CFRange,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithCharactersInString(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateWithBitmapRepresentation(
        alloc: CFAllocatorRef,
        theData: CFDataRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateInvertedSet(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsSupersetOfSet(
        theSet: CFCharacterSetRef,
        theOtherset: CFCharacterSetRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetCreateMutableCopy(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFMutableCharacterSetRef;
}
extern "C" {
    pub fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetIsLongCharacterMember(
        theSet: CFCharacterSetRef,
        theChar: UTF32Char,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCharacterSetCreateBitmapRepresentation(
        alloc: CFAllocatorRef,
        theSet: CFCharacterSetRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange);
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInRange(
        theSet: CFMutableCharacterSetRef,
        theRange: CFRange,
    );
}
extern "C" {
    pub fn CFCharacterSetAddCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetRemoveCharactersInString(
        theSet: CFMutableCharacterSetRef,
        theString: CFStringRef,
    );
}
extern "C" {
    pub fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef);
}
extern "C" {
    pub fn CFCharacterSetIntersect(
        theSet: CFMutableCharacterSetRef,
        theOtherSet: CFCharacterSetRef,
    );
}
extern "C" {
    pub fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef);
}
pub type CFStringEncoding = UInt32;
pub type CFStringBuiltInEncodings = CFStringEncoding;
pub const kCFStringEncodingMacRoman: ::std::os::raw::c_uint = 0;
pub const kCFStringEncodingWindowsLatin1: ::std::os::raw::c_uint = 1280;
pub const kCFStringEncodingISOLatin1: ::std::os::raw::c_uint = 513;
pub const kCFStringEncodingNextStepLatin: ::std::os::raw::c_uint = 2817;
pub const kCFStringEncodingASCII: ::std::os::raw::c_uint = 1536;
pub const kCFStringEncodingUnicode: ::std::os::raw::c_uint = 256;
pub const kCFStringEncodingUTF8: ::std::os::raw::c_uint = 134217984;
pub const kCFStringEncodingNonLossyASCII: ::std::os::raw::c_uint = 3071;
pub const kCFStringEncodingUTF16: ::std::os::raw::c_uint = 256;
pub const kCFStringEncodingUTF16BE: ::std::os::raw::c_uint = 268435712;
pub const kCFStringEncodingUTF16LE: ::std::os::raw::c_uint = 335544576;
pub const kCFStringEncodingUTF32: ::std::os::raw::c_uint = 201326848;
pub const kCFStringEncodingUTF32BE: ::std::os::raw::c_uint = 402653440;
pub const kCFStringEncodingUTF32LE: ::std::os::raw::c_uint = 469762304;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringCreateWithPascalString(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCString(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytes(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharacters(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithPascalStringNoCopy(
        alloc: CFAllocatorRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCStringNoCopy(
        alloc: CFAllocatorRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        numBytes: CFIndex,
        encoding: CFStringEncoding,
        isExternalRepresentation: Boolean,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *const UniChar,
        numChars: CFIndex,
        contentsDeallocator: CFAllocatorRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormat(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateWithFormatAndArguments(
        alloc: CFAllocatorRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        theString: CFStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringCreateMutableWithExternalCharactersNoCopy(
        alloc: CFAllocatorRef,
        chars: *mut UniChar,
        numChars: CFIndex,
        capacity: CFIndex,
        externalCharactersAllocator: CFAllocatorRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFStringGetLength(theString: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) -> UniChar;
}
extern "C" {
    pub fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: *mut UniChar);
}
extern "C" {
    pub fn CFStringGetPascalString(
        theString: CFStringRef,
        buffer: StringPtr,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetCString(
        theString: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: CFIndex,
        encoding: CFStringEncoding,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetPascalStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> ConstStringPtr;
}
extern "C" {
    pub fn CFStringGetCStringPtr(
        theString: CFStringRef,
        encoding: CFStringEncoding,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn CFStringGetCharactersPtr(theString: CFStringRef) -> *const UniChar;
}
extern "C" {
    pub fn CFStringGetBytes(
        theString: CFStringRef,
        range: CFRange,
        encoding: CFStringEncoding,
        lossByte: UInt8,
        isExternalRepresentation: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
        usedBufLen: *mut CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateFromExternalRepresentation(
        alloc: CFAllocatorRef,
        data: CFDataRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateExternalRepresentation(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        encoding: CFStringEncoding,
        lossByte: UInt8,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFStringGetSmallestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetFastestEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetSystemEncoding() -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetMaximumSizeForEncoding(
        length: CFIndex,
        encoding: CFStringEncoding,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringGetFileSystemRepresentation(
        string: CFStringRef,
        buffer: *mut ::std::os::raw::c_char,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFStringCreateWithFileSystemRepresentation(
        alloc: CFAllocatorRef,
        buffer: *const ::std::os::raw::c_char,
    ) -> CFStringRef;
}
pub type CFStringCompareFlags = CFOptionFlags;
pub const kCFCompareCaseInsensitive: ::std::os::raw::c_uint = 1;
pub const kCFCompareBackwards: ::std::os::raw::c_uint = 4;
pub const kCFCompareAnchored: ::std::os::raw::c_uint = 8;
pub const kCFCompareNonliteral: ::std::os::raw::c_uint = 16;
pub const kCFCompareLocalized: ::std::os::raw::c_uint = 32;
pub const kCFCompareNumerically: ::std::os::raw::c_uint = 64;
pub const kCFCompareDiacriticInsensitive: ::std::os::raw::c_uint = 128;
pub const kCFCompareWidthInsensitive: ::std::os::raw::c_uint = 256;
pub const kCFCompareForcedOrdering: ::std::os::raw::c_uint = 512;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringCompareWithOptionsAndLocale(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompareWithOptions(
        theString1: CFStringRef,
        theString2: CFStringRef,
        rangeToCompare: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringCompare(
        theString1: CFStringRef,
        theString2: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFComparisonResult;
}
extern "C" {
    pub fn CFStringFindWithOptionsAndLocale(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        locale: CFLocaleRef,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringFindWithOptions(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateArrayWithFindResults(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        stringToFind: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringFind(
        theString: CFStringRef,
        stringToFind: CFStringRef,
        compareOptions: CFStringCompareFlags,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFStringGetRangeOfComposedCharactersAtIndex(
        theString: CFStringRef,
        theIndex: CFIndex,
    ) -> CFRange;
}
extern "C" {
    pub fn CFStringFindCharacterFromSet(
        theString: CFStringRef,
        theSet: CFCharacterSetRef,
        rangeToSearch: CFRange,
        searchOptions: CFStringCompareFlags,
        result: *mut CFRange,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringGetLineBounds(
        theString: CFStringRef,
        range: CFRange,
        lineBeginIndex: *mut CFIndex,
        lineEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetParagraphBounds(
        string: CFStringRef,
        range: CFRange,
        parBeginIndex: *mut CFIndex,
        parEndIndex: *mut CFIndex,
        contentsEndIndex: *mut CFIndex,
    );
}
extern "C" {
    pub fn CFStringGetHyphenationLocationBeforeIndex(
        string: CFStringRef,
        location: CFIndex,
        limitRange: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
        character: *mut UTF32Char,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) -> Boolean;
}
extern "C" {
    pub fn CFStringCreateByCombiningStrings(
        alloc: CFAllocatorRef,
        theArray: CFArrayRef,
        separatorString: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFStringCreateArrayBySeparatingStrings(
        alloc: CFAllocatorRef,
        theString: CFStringRef,
        separatorString: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFStringGetIntValue(str_: CFStringRef) -> SInt32;
}
extern "C" {
    pub fn CFStringGetDoubleValue(str_: CFStringRef) -> f64;
}
extern "C" {
    pub fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef);
}
extern "C" {
    pub fn CFStringAppendCharacters(
        theString: CFMutableStringRef,
        chars: *const UniChar,
        numChars: CFIndex,
    );
}
extern "C" {
    pub fn CFStringAppendPascalString(
        theString: CFMutableStringRef,
        pStr: ConstStr255Param,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendCString(
        theString: CFMutableStringRef,
        cStr: *const ::std::os::raw::c_char,
        encoding: CFStringEncoding,
    );
}
extern "C" {
    pub fn CFStringAppendFormat(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        ...
    );
}
extern "C" {
    pub fn CFStringAppendFormatAndArguments(
        theString: CFMutableStringRef,
        formatOptions: CFDictionaryRef,
        format: CFStringRef,
        arguments: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn CFStringInsert(str_: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef);
}
extern "C" {
    pub fn CFStringDelete(theString: CFMutableStringRef, range: CFRange);
}
extern "C" {
    pub fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef);
}
extern "C" {
    pub fn CFStringFindAndReplace(
        theString: CFMutableStringRef,
        stringToFind: CFStringRef,
        replacementString: CFStringRef,
        rangeToSearch: CFRange,
        compareOptions: CFStringCompareFlags,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFStringSetExternalCharactersNoCopy(
        theString: CFMutableStringRef,
        chars: *mut UniChar,
        length: CFIndex,
        capacity: CFIndex,
    );
}
extern "C" {
    pub fn CFStringPad(
        theString: CFMutableStringRef,
        padString: CFStringRef,
        length: CFIndex,
        indexIntoPad: CFIndex,
    );
}
extern "C" {
    pub fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef);
}
extern "C" {
    pub fn CFStringTrimWhitespace(theString: CFMutableStringRef);
}
extern "C" {
    pub fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef);
}
pub type CFStringNormalizationForm = CFIndex;
pub const kCFStringNormalizationFormD: ::std::os::raw::c_uint = 0;
pub const kCFStringNormalizationFormKD: ::std::os::raw::c_uint = 1;
pub const kCFStringNormalizationFormC: ::std::os::raw::c_uint = 2;
pub const kCFStringNormalizationFormKC: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm);
}
extern "C" {
    pub fn CFStringFold(
        theString: CFMutableStringRef,
        theFlags: CFStringCompareFlags,
        theLocale: CFLocaleRef,
    );
}
extern "C" {
    pub fn CFStringTransform(
        string: CFMutableStringRef,
        range: *mut CFRange,
        transform: CFStringRef,
        reverse: Boolean,
    ) -> Boolean;
}
extern "C" {
    pub static kCFStringTransformStripCombiningMarks: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformFullwidthHalfwidth: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHiragana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformHiraganaKatakana: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformMandarinLatin: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHangul: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinArabic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinHebrew: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinThai: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinCyrillic: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformLatinGreek: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToXMLHex: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformToUnicodeName: CFStringRef;
}
extern "C" {
    pub static kCFStringTransformStripDiacritics: CFStringRef;
}
extern "C" {
    pub fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) -> Boolean;
}
extern "C" {
    pub fn CFStringGetListOfAvailableEncodings() -> *const CFStringEncoding;
}
extern "C" {
    pub fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringConvertEncodingToNSStringEncoding(
        encoding: CFStringEncoding,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn CFStringConvertNSStringEncodingToEncoding(
        encoding: ::std::os::raw::c_ulong,
    ) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) -> UInt32;
}
extern "C" {
    pub fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) -> CFStringEncoding;
}
extern "C" {
    pub fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) -> CFStringRef;
}
extern "C" {
    pub fn CFStringGetMostCompatibleMacStringEncoding(
        encoding: CFStringEncoding,
    ) -> CFStringEncoding;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CFStringInlineBuffer {
    pub buffer: [UniChar; 64usize],
    pub theString: CFStringRef,
    pub directUniCharBuffer: *const UniChar,
    pub directCStringBuffer: *const ::std::os::raw::c_char,
    pub rangeToBuffer: CFRange,
    pub bufferedRangeStart: CFIndex,
    pub bufferedRangeEnd: CFIndex,
}
#[test]
fn bindgen_test_layout_CFStringInlineBuffer() {
    assert_eq!(
        ::std::mem::size_of::<CFStringInlineBuffer>(),
        184usize,
        concat!("Size of: ", stringify!(CFStringInlineBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStringInlineBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStringInlineBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStringInlineBuffer>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStringInlineBuffer>())).theString as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(theString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFStringInlineBuffer>())).directUniCharBuffer as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(directUniCharBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFStringInlineBuffer>())).directCStringBuffer as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(directCStringBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFStringInlineBuffer>())).rangeToBuffer as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(rangeToBuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFStringInlineBuffer>())).bufferedRangeStart as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(bufferedRangeStart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFStringInlineBuffer>())).bufferedRangeEnd as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStringInlineBuffer),
            "::",
            stringify!(bufferedRangeEnd)
        )
    );
}
impl Default for CFStringInlineBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CFShow(obj: CFTypeRef);
}
extern "C" {
    pub fn CFShowStr(str_: CFStringRef);
}
extern "C" {
    pub fn __CFStringMakeConstantString(cStr: *const ::std::os::raw::c_char) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTimeZoneCopySystem() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneResetSystem();
}
extern "C" {
    pub fn CFTimeZoneCopyDefault() -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneSetDefault(tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFTimeZoneCopyKnownNames() -> CFArrayRef;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviationDictionary() -> CFDictionaryRef;
}
extern "C" {
    pub fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef);
}
extern "C" {
    pub fn CFTimeZoneCreate(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        data: CFDataRef,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithTimeIntervalFromGMT(
        allocator: CFAllocatorRef,
        ti: CFTimeInterval,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneCreateWithName(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        tryAbbrev: Boolean,
    ) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFTimeZoneGetName(tz: CFTimeZoneRef) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneGetData(tz: CFTimeZoneRef) -> CFDataRef;
}
extern "C" {
    pub fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> CFStringRef;
}
extern "C" {
    pub fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) -> Boolean;
}
extern "C" {
    pub fn CFTimeZoneGetDaylightSavingTimeOffset(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFTimeInterval;
}
extern "C" {
    pub fn CFTimeZoneGetNextDaylightSavingTimeTransition(
        tz: CFTimeZoneRef,
        at: CFAbsoluteTime,
    ) -> CFAbsoluteTime;
}
pub type CFTimeZoneNameStyle = CFIndex;
pub const kCFTimeZoneNameStyleStandard: ::std::os::raw::c_uint = 0;
pub const kCFTimeZoneNameStyleShortStandard: ::std::os::raw::c_uint = 1;
pub const kCFTimeZoneNameStyleDaylightSaving: ::std::os::raw::c_uint = 2;
pub const kCFTimeZoneNameStyleShortDaylightSaving: ::std::os::raw::c_uint = 3;
pub const kCFTimeZoneNameStyleGeneric: ::std::os::raw::c_uint = 4;
pub const kCFTimeZoneNameStyleShortGeneric: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFTimeZoneCopyLocalizedName(
        tz: CFTimeZoneRef,
        style: CFTimeZoneNameStyle,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFCalendar {
    _unused: [u8; 0],
}
pub type CFCalendarRef = *mut __CFCalendar;
extern "C" {
    pub fn CFCalendarGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFCalendarCopyCurrent() -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarCreateWithIdentifier(
        allocator: CFAllocatorRef,
        identifier: CFCalendarIdentifier,
    ) -> CFCalendarRef;
}
extern "C" {
    pub fn CFCalendarGetIdentifier(calendar: CFCalendarRef) -> CFCalendarIdentifier;
}
extern "C" {
    pub fn CFCalendarCopyLocale(calendar: CFCalendarRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef);
}
extern "C" {
    pub fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) -> CFTimeZoneRef;
}
extern "C" {
    pub fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef);
}
extern "C" {
    pub fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex);
}
extern "C" {
    pub fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex);
}
pub type CFCalendarUnit = CFOptionFlags;
pub const kCFCalendarUnitEra: ::std::os::raw::c_uint = 2;
pub const kCFCalendarUnitYear: ::std::os::raw::c_uint = 4;
pub const kCFCalendarUnitMonth: ::std::os::raw::c_uint = 8;
pub const kCFCalendarUnitDay: ::std::os::raw::c_uint = 16;
pub const kCFCalendarUnitHour: ::std::os::raw::c_uint = 32;
pub const kCFCalendarUnitMinute: ::std::os::raw::c_uint = 64;
pub const kCFCalendarUnitSecond: ::std::os::raw::c_uint = 128;
pub const kCFCalendarUnitWeek: ::std::os::raw::c_uint = 256;
pub const kCFCalendarUnitWeekday: ::std::os::raw::c_uint = 512;
pub const kCFCalendarUnitWeekdayOrdinal: ::std::os::raw::c_uint = 1024;
pub const kCFCalendarUnitQuarter: ::std::os::raw::c_uint = 2048;
pub const kCFCalendarUnitWeekOfMonth: ::std::os::raw::c_uint = 4096;
pub const kCFCalendarUnitWeekOfYear: ::std::os::raw::c_uint = 8192;
pub const kCFCalendarUnitYearForWeekOfYear: ::std::os::raw::c_uint = 16384;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFCalendarGetMinimumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetMaximumRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetRangeOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFRange;
}
extern "C" {
    pub fn CFCalendarGetOrdinalityOfUnit(
        calendar: CFCalendarRef,
        smallerUnit: CFCalendarUnit,
        biggerUnit: CFCalendarUnit,
        at: CFAbsoluteTime,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFCalendarGetTimeRangeOfUnit(
        calendar: CFCalendarRef,
        unit: CFCalendarUnit,
        at: CFAbsoluteTime,
        startp: *mut CFAbsoluteTime,
        tip: *mut CFTimeInterval,
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarComposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarDecomposeAbsoluteTime(
        calendar: CFCalendarRef,
        at: CFAbsoluteTime,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub const kCFCalendarComponentsWrap: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFCalendarAddComponents(
        calendar: CFCalendarRef,
        at: *mut CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
extern "C" {
    pub fn CFCalendarGetComponentDifference(
        calendar: CFCalendarRef,
        startingAT: CFAbsoluteTime,
        resultAT: CFAbsoluteTime,
        options: CFOptionFlags,
        componentDesc: *const ::std::os::raw::c_char,
        ...
    ) -> Boolean;
}
pub type CFDateFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFDateFormatter {
    _unused: [u8; 0],
}
pub type CFDateFormatterRef = *mut __CFDateFormatter;
extern "C" {
    pub fn CFDateFormatterCreateDateFormatFromTemplate(
        allocator: CFAllocatorRef,
        tmplate: CFStringRef,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterGetTypeID() -> CFTypeID;
}
pub type CFDateFormatterStyle = CFIndex;
pub const kCFDateFormatterNoStyle: ::std::os::raw::c_uint = 0;
pub const kCFDateFormatterShortStyle: ::std::os::raw::c_uint = 1;
pub const kCFDateFormatterMediumStyle: ::std::os::raw::c_uint = 2;
pub const kCFDateFormatterLongStyle: ::std::os::raw::c_uint = 3;
pub const kCFDateFormatterFullStyle: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub type CFISO8601DateFormatOptions = CFOptionFlags;
pub const kCFISO8601DateFormatWithYear: ::std::os::raw::c_uint = 1;
pub const kCFISO8601DateFormatWithMonth: ::std::os::raw::c_uint = 2;
pub const kCFISO8601DateFormatWithWeekOfYear: ::std::os::raw::c_uint = 4;
pub const kCFISO8601DateFormatWithDay: ::std::os::raw::c_uint = 16;
pub const kCFISO8601DateFormatWithTime: ::std::os::raw::c_uint = 32;
pub const kCFISO8601DateFormatWithTimeZone: ::std::os::raw::c_uint = 64;
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime: ::std::os::raw::c_uint = 128;
pub const kCFISO8601DateFormatWithDashSeparatorInDate: ::std::os::raw::c_uint = 256;
pub const kCFISO8601DateFormatWithColonSeparatorInTime: ::std::os::raw::c_uint = 512;
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone: ::std::os::raw::c_uint = 1024;
pub const kCFISO8601DateFormatWithFractionalSeconds: ::std::os::raw::c_uint = 2048;
pub const kCFISO8601DateFormatWithFullDate: ::std::os::raw::c_uint = 275;
pub const kCFISO8601DateFormatWithFullTime: ::std::os::raw::c_uint = 1632;
pub const kCFISO8601DateFormatWithInternetDateTime: ::std::os::raw::c_uint = 1907;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFDateFormatterCreateISO8601Formatter(
        allocator: CFAllocatorRef,
        formatOptions: CFISO8601DateFormatOptions,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        dateStyle: CFDateFormatterStyle,
        timeStyle: CFDateFormatterStyle,
    ) -> CFDateFormatterRef;
}
extern "C" {
    pub fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) -> CFDateFormatterStyle;
}
extern "C" {
    pub fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithDate(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        date: CFDateRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateStringWithAbsoluteTime(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        at: CFAbsoluteTime,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFDateFormatterCreateDateFromString(
        allocator: CFAllocatorRef,
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
    ) -> CFDateRef;
}
extern "C" {
    pub fn CFDateFormatterGetAbsoluteTimeFromString(
        formatter: CFDateFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        atp: *mut CFAbsoluteTime,
    ) -> Boolean;
}
extern "C" {
    pub fn CFDateFormatterSetProperty(
        formatter: CFDateFormatterRef,
        key: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFDateFormatterCopyProperty(
        formatter: CFDateFormatterRef,
        key: CFDateFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFDateFormatterIsLenient: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTimeZone: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendarName: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultFormat: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDefaultDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterCalendar: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterAMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterPMSymbol: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
}
extern "C" {
    pub static kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
}
pub type CFErrorDomain = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFError {
    _unused: [u8; 0],
}
pub type CFErrorRef = *mut __CFError;
extern "C" {
    pub fn CFErrorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static kCFErrorDomainPOSIX: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainOSStatus: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainMach: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorDomainCocoa: CFErrorDomain;
}
extern "C" {
    pub static kCFErrorLocalizedDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedFailureReasonKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorUnderlyingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorURLKey: CFStringRef;
}
extern "C" {
    pub static kCFErrorFilePathKey: CFStringRef;
}
extern "C" {
    pub fn CFErrorCreate(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfo: CFDictionaryRef,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorCreateWithUserInfoKeysAndValues(
        allocator: CFAllocatorRef,
        domain: CFErrorDomain,
        code: CFIndex,
        userInfoKeys: *const *const ::std::os::raw::c_void,
        userInfoValues: *const *const ::std::os::raw::c_void,
        numUserInfoValues: CFIndex,
    ) -> CFErrorRef;
}
extern "C" {
    pub fn CFErrorGetDomain(err: CFErrorRef) -> CFErrorDomain;
}
extern "C" {
    pub fn CFErrorGetCode(err: CFErrorRef) -> CFIndex;
}
extern "C" {
    pub fn CFErrorCopyUserInfo(err: CFErrorRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFErrorCopyDescription(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyFailureReason(err: CFErrorRef) -> CFStringRef;
}
extern "C" {
    pub fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBoolean {
    _unused: [u8; 0],
}
pub type CFBooleanRef = *const __CFBoolean;
extern "C" {
    pub static kCFBooleanTrue: CFBooleanRef;
}
extern "C" {
    pub static kCFBooleanFalse: CFBooleanRef;
}
extern "C" {
    pub fn CFBooleanGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBooleanGetValue(boolean: CFBooleanRef) -> Boolean;
}
pub type CFNumberType = CFIndex;
pub const kCFNumberSInt8Type: ::std::os::raw::c_uint = 1;
pub const kCFNumberSInt16Type: ::std::os::raw::c_uint = 2;
pub const kCFNumberSInt32Type: ::std::os::raw::c_uint = 3;
pub const kCFNumberSInt64Type: ::std::os::raw::c_uint = 4;
pub const kCFNumberFloat32Type: ::std::os::raw::c_uint = 5;
pub const kCFNumberFloat64Type: ::std::os::raw::c_uint = 6;
pub const kCFNumberCharType: ::std::os::raw::c_uint = 7;
pub const kCFNumberShortType: ::std::os::raw::c_uint = 8;
pub const kCFNumberIntType: ::std::os::raw::c_uint = 9;
pub const kCFNumberLongType: ::std::os::raw::c_uint = 10;
pub const kCFNumberLongLongType: ::std::os::raw::c_uint = 11;
pub const kCFNumberFloatType: ::std::os::raw::c_uint = 12;
pub const kCFNumberDoubleType: ::std::os::raw::c_uint = 13;
pub const kCFNumberCFIndexType: ::std::os::raw::c_uint = 14;
pub const kCFNumberNSIntegerType: ::std::os::raw::c_uint = 15;
pub const kCFNumberCGFloatType: ::std::os::raw::c_uint = 16;
pub const kCFNumberMaxType: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumber {
    _unused: [u8; 0],
}
pub type CFNumberRef = *const __CFNumber;
extern "C" {
    pub static kCFNumberPositiveInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNegativeInfinity: CFNumberRef;
}
extern "C" {
    pub static kCFNumberNaN: CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFNumberCreate(
        allocator: CFAllocatorRef,
        theType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberGetType(number: CFNumberRef) -> CFNumberType;
}
extern "C" {
    pub fn CFNumberGetByteSize(number: CFNumberRef) -> CFIndex;
}
extern "C" {
    pub fn CFNumberIsFloatType(number: CFNumberRef) -> Boolean;
}
extern "C" {
    pub fn CFNumberGetValue(
        number: CFNumberRef,
        theType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberCompare(
        number: CFNumberRef,
        otherNumber: CFNumberRef,
        context: *mut ::std::os::raw::c_void,
    ) -> CFComparisonResult;
}
pub type CFNumberFormatterKey = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFNumberFormatter {
    _unused: [u8; 0],
}
pub type CFNumberFormatterRef = *mut __CFNumberFormatter;
extern "C" {
    pub fn CFNumberFormatterGetTypeID() -> CFTypeID;
}
pub type CFNumberFormatterStyle = CFIndex;
pub const kCFNumberFormatterNoStyle: ::std::os::raw::c_uint = 0;
pub const kCFNumberFormatterDecimalStyle: ::std::os::raw::c_uint = 1;
pub const kCFNumberFormatterCurrencyStyle: ::std::os::raw::c_uint = 2;
pub const kCFNumberFormatterPercentStyle: ::std::os::raw::c_uint = 3;
pub const kCFNumberFormatterScientificStyle: ::std::os::raw::c_uint = 4;
pub const kCFNumberFormatterSpellOutStyle: ::std::os::raw::c_uint = 5;
pub const kCFNumberFormatterOrdinalStyle: ::std::os::raw::c_uint = 6;
pub const kCFNumberFormatterCurrencyISOCodeStyle: ::std::os::raw::c_uint = 8;
pub const kCFNumberFormatterCurrencyPluralStyle: ::std::os::raw::c_uint = 9;
pub const kCFNumberFormatterCurrencyAccountingStyle: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNumberFormatterCreate(
        allocator: CFAllocatorRef,
        locale: CFLocaleRef,
        style: CFNumberFormatterStyle,
    ) -> CFNumberFormatterRef;
}
extern "C" {
    pub fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) -> CFLocaleRef;
}
extern "C" {
    pub fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) -> CFNumberFormatterStyle;
}
extern "C" {
    pub fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef);
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithNumber(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        number: CFNumberRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFNumberFormatterCreateStringWithValue(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        numberType: CFNumberType,
        valuePtr: *const ::std::os::raw::c_void,
    ) -> CFStringRef;
}
pub type CFNumberFormatterOptionFlags = CFOptionFlags;
pub const kCFNumberFormatterParseIntegersOnly: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNumberFormatterCreateNumberFromString(
        allocator: CFAllocatorRef,
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        options: CFOptionFlags,
    ) -> CFNumberRef;
}
extern "C" {
    pub fn CFNumberFormatterGetValueFromString(
        formatter: CFNumberFormatterRef,
        string: CFStringRef,
        rangep: *mut CFRange,
        numberType: CFNumberType,
        valuePtr: *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFNumberFormatterSetProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFNumberFormatterCopyProperty(
        formatter: CFNumberFormatterRef,
        key: CFNumberFormatterKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPlusSign: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMultiplier: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterIsLenient: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
}
extern "C" {
    pub static kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
}
pub type CFNumberFormatterRoundingMode = CFIndex;
pub const kCFNumberFormatterRoundCeiling: ::std::os::raw::c_uint = 0;
pub const kCFNumberFormatterRoundFloor: ::std::os::raw::c_uint = 1;
pub const kCFNumberFormatterRoundDown: ::std::os::raw::c_uint = 2;
pub const kCFNumberFormatterRoundUp: ::std::os::raw::c_uint = 3;
pub const kCFNumberFormatterRoundHalfEven: ::std::os::raw::c_uint = 4;
pub const kCFNumberFormatterRoundHalfDown: ::std::os::raw::c_uint = 5;
pub const kCFNumberFormatterRoundHalfUp: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub type CFNumberFormatterPadPosition = CFIndex;
pub const kCFNumberFormatterPadBeforePrefix: ::std::os::raw::c_uint = 0;
pub const kCFNumberFormatterPadAfterPrefix: ::std::os::raw::c_uint = 1;
pub const kCFNumberFormatterPadBeforeSuffix: ::std::os::raw::c_uint = 2;
pub const kCFNumberFormatterPadAfterSuffix: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFNumberFormatterGetDecimalInfoForCurrencyCode(
        currencyCode: CFStringRef,
        defaultFractionDigits: *mut i32,
        roundingIncrement: *mut f64,
    ) -> Boolean;
}
extern "C" {
    pub static kCFPreferencesAnyApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentApplication: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentHost: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesAnyUser: CFStringRef;
}
extern "C" {
    pub static kCFPreferencesCurrentUser: CFStringRef;
}
extern "C" {
    pub fn CFPreferencesCopyAppValue(
        key: CFStringRef,
        applicationID: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesGetAppBooleanValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesGetAppIntegerValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        keyExistsAndHasValidFormat: *mut Boolean,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPreferencesSetAppValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef);
}
extern "C" {
    pub fn CFPreferencesRemoveSuitePreferencesFromApp(
        applicationID: CFStringRef,
        suiteID: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesAppSynchronize(applicationID: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyValue(
        key: CFStringRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPreferencesCopyMultiple(
        keysToFetch: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFPreferencesSetValue(
        key: CFStringRef,
        value: CFPropertyListRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSetMultiple(
        keysToSet: CFDictionaryRef,
        keysToRemove: CFArrayRef,
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    );
}
extern "C" {
    pub fn CFPreferencesSynchronize(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPreferencesCopyApplicationList(
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesCopyKeyList(
        applicationID: CFStringRef,
        userName: CFStringRef,
        hostName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) -> Boolean;
}
pub type CFURLPathStyle = CFIndex;
pub const kCFURLPOSIXPathStyle: ::std::os::raw::c_uint = 0;
pub const kCFURLHFSPathStyle: ::std::os::raw::c_uint = 1;
pub const kCFURLWindowsPathStyle: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURL {
    _unused: [u8; 0],
}
pub type CFURLRef = *const __CFURL;
extern "C" {
    pub fn CFURLGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFURLCreateWithBytes(
        allocator: CFAllocatorRef,
        URLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        encoding: CFStringEncoding,
        escapeWhitespace: Boolean,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateWithString(
        allocator: CFAllocatorRef,
        URLString: CFStringRef,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateAbsoluteURLWithBytes(
        alloc: CFAllocatorRef,
        relativeURLBytes: *const UInt8,
        length: CFIndex,
        encoding: CFStringEncoding,
        baseURL: CFURLRef,
        useCompatibilityMode: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPath(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentation(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateWithFileSystemPathRelativeToBase(
        allocator: CFAllocatorRef,
        filePath: CFStringRef,
        pathStyle: CFURLPathStyle,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFromFileSystemRepresentationRelativeToBase(
        allocator: CFAllocatorRef,
        buffer: *const UInt8,
        bufLen: CFIndex,
        isDirectory: Boolean,
        baseURL: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFileSystemRepresentation(
        url: CFURLRef,
        resolveAgainstBase: Boolean,
        buffer: *mut UInt8,
        maxBufLen: CFIndex,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetString(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetBaseURL(anURL: CFURLRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCanBeDecomposed(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyScheme(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyNetLocation(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPath(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: *mut Boolean) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) -> CFStringRef;
}
extern "C" {
    pub fn CFURLHasDirectoryPath(anURL: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourceSpecifier(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyHostName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLGetPortNumber(anURL: CFURLRef) -> SInt32;
}
extern "C" {
    pub fn CFURLCopyUserName(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPassword(anURL: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyParameterString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyQueryString(
        anURL: CFURLRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef)
        -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyLastPathComponent(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCopyPathExtension(url: CFURLRef) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        pathComponent: CFStringRef,
        isDirectory: Boolean,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingLastPathComponent(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyAppendingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        extension: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateCopyDeletingPathExtension(
        allocator: CFAllocatorRef,
        url: CFURLRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetBytes(url: CFURLRef, buffer: *mut UInt8, bufferLength: CFIndex) -> CFIndex;
}
pub type CFURLComponentType = CFIndex;
pub const kCFURLComponentScheme: ::std::os::raw::c_uint = 1;
pub const kCFURLComponentNetLocation: ::std::os::raw::c_uint = 2;
pub const kCFURLComponentPath: ::std::os::raw::c_uint = 3;
pub const kCFURLComponentResourceSpecifier: ::std::os::raw::c_uint = 4;
pub const kCFURLComponentUser: ::std::os::raw::c_uint = 5;
pub const kCFURLComponentPassword: ::std::os::raw::c_uint = 6;
pub const kCFURLComponentUserInfo: ::std::os::raw::c_uint = 7;
pub const kCFURLComponentHost: ::std::os::raw::c_uint = 8;
pub const kCFURLComponentPort: ::std::os::raw::c_uint = 9;
pub const kCFURLComponentParameterString: ::std::os::raw::c_uint = 10;
pub const kCFURLComponentQuery: ::std::os::raw::c_uint = 11;
pub const kCFURLComponentFragment: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFURLGetByteRangeForComponent(
        url: CFURLRef,
        component: CFURLComponentType,
        rangeIncludingSeparators: *mut CFRange,
    ) -> CFRange;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveEscaped: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
        allocator: CFAllocatorRef,
        origString: CFStringRef,
        charsToLeaveEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLCreateStringByAddingPercentEscapes(
        allocator: CFAllocatorRef,
        originalString: CFStringRef,
        charactersToLeaveUnescaped: CFStringRef,
        legalURLCharactersToBeEscaped: CFStringRef,
        encoding: CFStringEncoding,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFURLIsFileReferenceURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateFileReferenceURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateFilePathURL(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FSRef {
    _unused: [u8; 0],
}
extern "C" {
    pub fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: *const FSRef) -> CFURLRef;
}
extern "C" {
    pub fn CFURLGetFSRef(url: CFURLRef, fsRef: *mut FSRef) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValueTypeRefPtr: *mut ::std::os::raw::c_void,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCopyResourcePropertiesForKeys(
        url: CFURLRef,
        keys: CFArrayRef,
        error: *mut CFErrorRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLSetResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLSetResourcePropertiesForKeys(
        url: CFURLRef,
        keyedPropertyValues: CFDictionaryRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub static kCFURLKeysOfUnsetValuesKey: CFStringRef;
}
extern "C" {
    pub fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef);
}
extern "C" {
    pub fn CFURLClearResourcePropertyCache(url: CFURLRef);
}
extern "C" {
    pub fn CFURLSetTemporaryResourcePropertyForKey(
        url: CFURLRef,
        key: CFStringRef,
        propertyValue: CFTypeRef,
    );
}
extern "C" {
    pub fn CFURLResourceIsReachable(url: CFURLRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub static kCFURLNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsRegularFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsDirectoryKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSymbolicLinkKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsVolumeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPackageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsApplicationKey: CFStringRef;
}
extern "C" {
    pub static kCFURLApplicationIsScriptableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSystemImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUserImmutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsHiddenKey: CFStringRef;
}
extern "C" {
    pub static kCFURLHasHiddenExtensionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentAccessDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLContentModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAttributeModificationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileContentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayShareFileContentKey: CFStringRef;
}
extern "C" {
    pub static kCFURLMayHaveExtendedAttributesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsPurgeableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsSparseKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLinkCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLParentDirectoryURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTypeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedTypeDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelNumberKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLabelColorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLLocalizedLabelKey: CFStringRef;
}
extern "C" {
    pub static kCFURLEffectiveIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCustomIconKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPreferredIOBlockSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsReadableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsWritableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsExcludedFromBackupKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTagNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLCanonicalPathKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsMountTriggerKey: CFStringRef;
}
extern "C" {
    pub static kCFURLGenerationIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLDocumentIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFURLAddedToDirectoryDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLQuarantinePropertiesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeNamedPipe: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeDirectory: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeBlockSpecial: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeRegular: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSymbolicLink: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeSocket: CFStringRef;
}
extern "C" {
    pub static kCFURLFileResourceTypeUnknown: CFStringRef;
}
extern "C" {
    pub static kCFURLFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLTotalFileAllocatedSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsAliasFileKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionNone: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionComplete: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
}
extern "C" {
    pub static kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeTotalCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeResourceCountKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsHardLinksKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsJournalingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsBrowsableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeMaximumFileSizeKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEjectableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRemovableKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsInternalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsAutomountedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsLocalKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsReadOnlyKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeCreationDateKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeURLForRemountingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeUUIDStringKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeLocalizedNameKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsEncryptedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeIsRootFileSystemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsCompressionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileCloningKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
}
extern "C" {
    pub static kCFURLIsUbiquitousItemKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
}
extern "C" {
    pub static kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
}
pub type CFURLBookmarkCreationOptions = CFOptionFlags;
pub const kCFURLBookmarkCreationMinimalBookmarkMask: ::std::os::raw::c_uint = 512;
pub const kCFURLBookmarkCreationSuitableForBookmarkFile: ::std::os::raw::c_uint = 1024;
pub const kCFURLBookmarkCreationWithSecurityScope: ::std::os::raw::c_uint = 2048;
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess: ::std::os::raw::c_uint = 4096;
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask: ::std::os::raw::c_uint = 256;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub type CFURLBookmarkResolutionOptions = CFOptionFlags;
pub const kCFURLBookmarkResolutionWithoutUIMask: ::std::os::raw::c_uint = 256;
pub const kCFURLBookmarkResolutionWithoutMountingMask: ::std::os::raw::c_uint = 512;
pub const kCFURLBookmarkResolutionWithSecurityScope: ::std::os::raw::c_uint = 1024;
pub const kCFBookmarkResolutionWithoutUIMask: ::std::os::raw::c_uint = 256;
pub const kCFBookmarkResolutionWithoutMountingMask: ::std::os::raw::c_uint = 512;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub type CFURLBookmarkFileCreationOptions = CFOptionFlags;
extern "C" {
    pub fn CFURLCreateBookmarkData(
        allocator: CFAllocatorRef,
        url: CFURLRef,
        options: CFURLBookmarkCreationOptions,
        resourcePropertiesToInclude: CFArrayRef,
        relativeToURL: CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLCreateByResolvingBookmarkData(
        allocator: CFAllocatorRef,
        bookmark: CFDataRef,
        options: CFURLBookmarkResolutionOptions,
        relativeToURL: CFURLRef,
        resourcePropertiesToInclude: CFArrayRef,
        isStale: *mut Boolean,
        error: *mut CFErrorRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertiesToReturn: CFArrayRef,
        bookmark: CFDataRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFURLCreateResourcePropertyForKeyFromBookmarkData(
        allocator: CFAllocatorRef,
        resourcePropertyKey: CFStringRef,
        bookmark: CFDataRef,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromFile(
        allocator: CFAllocatorRef,
        fileURL: CFURLRef,
        errorRef: *mut CFErrorRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLWriteBookmarkDataToFile(
        bookmarkRef: CFDataRef,
        fileURL: CFURLRef,
        options: CFURLBookmarkFileCreationOptions,
        errorRef: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLCreateBookmarkDataFromAliasRecord(
        allocatorRef: CFAllocatorRef,
        aliasRecordDataRef: CFDataRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef);
}
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_pset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_seqno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_seqno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_mscount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_mscount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_qlimit as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_qlimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_msgcount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_msgcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_sorights as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_sorights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_srights as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_srights)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_pdrequest as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pdrequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_nsrequest as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_nsrequest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_status>())).mps_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_flags)
        )
    );
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_limits>())).mpl_qlimit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_limits),
            "::",
            stringify!(mpl_qlimit)
        )
    );
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_info_ext>())).mpie_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_info_ext>())).mpie_boost_cnt as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_boost_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_info_ext>())).reserved as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(reserved)
        )
    );
}
pub type mach_port_info_ext_t = mach_port_info_ext;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_qos>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_qos),
            "::",
            stringify!(len)
        )
    );
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_options__bindgen_ty_1>())).reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_port_options__bindgen_ty_1>())).work_interval_port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(work_interval_port)
        )
    );
}
impl Default for mach_port_options__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_options>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_port_options>())).mpl as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(mpl)
        )
    );
}
impl Default for mach_port_options {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub type CFRunLoopMode = CFStringRef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopSource {
    _unused: [u8; 0],
}
pub type CFRunLoopSourceRef = *mut __CFRunLoopSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopObserver {
    _unused: [u8; 0],
}
pub type CFRunLoopObserverRef = *mut __CFRunLoopObserver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoopTimer {
    _unused: [u8; 0],
}
pub type CFRunLoopTimerRef = *mut __CFRunLoopTimer;
pub type CFRunLoopRunResult = SInt32;
pub const kCFRunLoopRunFinished: ::std::os::raw::c_uint = 1;
pub const kCFRunLoopRunStopped: ::std::os::raw::c_uint = 2;
pub const kCFRunLoopRunTimedOut: ::std::os::raw::c_uint = 3;
pub const kCFRunLoopRunHandledSource: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub type CFRunLoopActivity = CFOptionFlags;
pub const kCFRunLoopEntry: ::std::os::raw::c_uint = 1;
pub const kCFRunLoopBeforeTimers: ::std::os::raw::c_uint = 2;
pub const kCFRunLoopBeforeSources: ::std::os::raw::c_uint = 4;
pub const kCFRunLoopBeforeWaiting: ::std::os::raw::c_uint = 32;
pub const kCFRunLoopAfterWaiting: ::std::os::raw::c_uint = 64;
pub const kCFRunLoopExit: ::std::os::raw::c_uint = 128;
pub const kCFRunLoopAllActivities: ::std::os::raw::c_uint = 268435455;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
extern "C" {
    pub static kCFRunLoopDefaultMode: CFRunLoopMode;
}
extern "C" {
    pub static kCFRunLoopCommonModes: CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopGetCurrent() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopGetMain() -> CFRunLoopRef;
}
extern "C" {
    pub fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) -> CFRunLoopMode;
}
extern "C" {
    pub fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopRun();
}
extern "C" {
    pub fn CFRunLoopRunInMode(
        mode: CFRunLoopMode,
        seconds: CFTimeInterval,
        returnAfterSourceHandled: Boolean,
    ) -> CFRunLoopRunResult;
}
extern "C" {
    pub fn CFRunLoopIsWaiting(rl: CFRunLoopRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopWakeUp(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopStop(rl: CFRunLoopRef);
}
extern "C" {
    pub fn CFRunLoopPerformBlock(
        rl: CFRunLoopRef,
        mode: CFTypeRef,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFRunLoopContainsSource(
        rl: CFRunLoopRef,
        source: CFRunLoopSourceRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopContainsObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopRemoveObserver(
        rl: CFRunLoopRef,
        observer: CFRunLoopObserverRef,
        mode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFRunLoopContainsTimer(
        rl: CFRunLoopRef,
        timer: CFRunLoopTimerRef,
        mode: CFRunLoopMode,
    ) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
extern "C" {
    pub fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub schedule: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub cancel: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut ::std::os::raw::c_void,
            rl: CFRunLoopRef,
            mode: CFRunLoopMode,
        ),
    >,
    pub perform: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_CFRunLoopSourceContext() {
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopSourceContext>(),
        80usize,
        concat!("Size of: ", stringify!(CFRunLoopSourceContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopSourceContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopSourceContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFRunLoopSourceContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).equal as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).hash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).schedule as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(schedule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).cancel as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(cancel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext>())).perform as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext),
            "::",
            stringify!(perform)
        )
    );
}
impl Default for CFRunLoopSourceContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopSourceContext1 {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
    pub equal: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const ::std::os::raw::c_void,
            info2: *const ::std::os::raw::c_void,
        ) -> Boolean,
    >,
    pub hash: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFHashCode,
    >,
    pub getPort: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> mach_port_t,
    >,
    pub perform: ::std::option::Option<
        unsafe extern "C" fn(
            msg: *mut ::std::os::raw::c_void,
            size: CFIndex,
            allocator: CFAllocatorRef,
            info: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopSourceContext1() {
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopSourceContext1>(),
        72usize,
        concat!("Size of: ", stringify!(CFRunLoopSourceContext1))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopSourceContext1>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopSourceContext1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).equal as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).hash as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).getPort as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(getPort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopSourceContext1>())).perform as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopSourceContext1),
            "::",
            stringify!(perform)
        )
    );
}
impl Default for CFRunLoopSourceContext1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CFRunLoopSourceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopSourceCreate(
        allocator: CFAllocatorRef,
        order: CFIndex,
        context: *mut CFRunLoopSourceContext,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef);
}
extern "C" {
    pub fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopSourceGetContext(
        source: CFRunLoopSourceRef,
        context: *mut CFRunLoopSourceContext,
    );
}
extern "C" {
    pub fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopObserverContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopObserverContext() {
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopObserverContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFRunLoopObserverContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopObserverContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopObserverContext))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFRunLoopObserverContext>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopObserverContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopObserverContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFRunLoopObserverContext>())).release as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFRunLoopObserverContext>())).copyDescription as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopObserverContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFRunLoopObserverContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFRunLoopObserverCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        observer: CFRunLoopObserverRef,
        activity: CFRunLoopActivity,
        info: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFRunLoopObserverGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopObserverCreate(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        callout: CFRunLoopObserverCallBack,
        context: *mut CFRunLoopObserverContext,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverCreateWithHandler(
        allocator: CFAllocatorRef,
        activities: CFOptionFlags,
        repeats: Boolean,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopObserverRef;
}
extern "C" {
    pub fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef);
}
extern "C" {
    pub fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopObserverGetContext(
        observer: CFRunLoopObserverRef,
        context: *mut CFRunLoopObserverContext,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFRunLoopTimerContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFRunLoopTimerContext() {
    assert_eq!(
        ::std::mem::size_of::<CFRunLoopTimerContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFRunLoopTimerContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFRunLoopTimerContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFRunLoopTimerContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopTimerContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopTimerContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopTimerContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFRunLoopTimerContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFRunLoopTimerContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFRunLoopTimerContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFRunLoopTimerContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFRunLoopTimerCallBack = ::std::option::Option<
    unsafe extern "C" fn(timer: CFRunLoopTimerRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFRunLoopTimerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFRunLoopTimerCreate(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        callout: CFRunLoopTimerCallBack,
        context: *mut CFRunLoopTimerContext,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerCreateWithHandler(
        allocator: CFAllocatorRef,
        fireDate: CFAbsoluteTime,
        interval: CFTimeInterval,
        flags: CFOptionFlags,
        order: CFIndex,
        block: *mut ::std::os::raw::c_void,
    ) -> CFRunLoopTimerRef;
}
extern "C" {
    pub fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) -> CFAbsoluteTime;
}
extern "C" {
    pub fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime);
}
extern "C" {
    pub fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) -> CFIndex;
}
extern "C" {
    pub fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef);
}
extern "C" {
    pub fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) -> Boolean;
}
extern "C" {
    pub fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: *mut CFRunLoopTimerContext);
}
extern "C" {
    pub fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) -> CFTimeInterval;
}
extern "C" {
    pub fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSocket {
    _unused: [u8; 0],
}
pub type CFSocketRef = *mut __CFSocket;
pub type CFSocketError = CFIndex;
pub const kCFSocketSuccess: ::std::os::raw::c_int = 0;
pub const kCFSocketError: ::std::os::raw::c_int = -1;
pub const kCFSocketTimeout: ::std::os::raw::c_int = -2;
pub type _bindgen_ty_49 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketSignature {
    pub protocolFamily: SInt32,
    pub socketType: SInt32,
    pub protocol: SInt32,
    pub address: CFDataRef,
}
#[test]
fn bindgen_test_layout_CFSocketSignature() {
    assert_eq!(
        ::std::mem::size_of::<CFSocketSignature>(),
        24usize,
        concat!("Size of: ", stringify!(CFSocketSignature))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSocketSignature>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSocketSignature))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFSocketSignature>())).protocolFamily as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketSignature),
            "::",
            stringify!(protocolFamily)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketSignature>())).socketType as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketSignature),
            "::",
            stringify!(socketType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketSignature>())).protocol as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketSignature),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketSignature>())).address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketSignature),
            "::",
            stringify!(address)
        )
    );
}
impl Default for CFSocketSignature {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketNoCallBack: ::std::os::raw::c_uint = 0;
pub const kCFSocketReadCallBack: ::std::os::raw::c_uint = 1;
pub const kCFSocketAcceptCallBack: ::std::os::raw::c_uint = 2;
pub const kCFSocketDataCallBack: ::std::os::raw::c_uint = 3;
pub const kCFSocketConnectCallBack: ::std::os::raw::c_uint = 4;
pub const kCFSocketWriteCallBack: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
pub const kCFSocketAutomaticallyReenableReadCallBack: ::std::os::raw::c_uint = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: ::std::os::raw::c_uint = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: ::std::os::raw::c_uint = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: ::std::os::raw::c_uint = 8;
pub const kCFSocketLeaveErrors: ::std::os::raw::c_uint = 64;
pub const kCFSocketCloseOnInvalidate: ::std::os::raw::c_uint = 128;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
pub type CFSocketCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        s: CFSocketRef,
        type_: CFSocketCallBackType,
        address: CFDataRef,
        data: *const ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFSocketContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFSocketContext() {
    assert_eq!(
        ::std::mem::size_of::<CFSocketContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFSocketContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSocketContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSocketContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSocketContext>())).copyDescription as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSocketContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFSocketContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFSocketNativeHandle = ::std::os::raw::c_int;
extern "C" {
    pub fn CFSocketGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSocketCreate(
        allocator: CFAllocatorRef,
        protocolFamily: SInt32,
        socketType: SInt32,
        protocol: SInt32,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithNative(
        allocator: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateWithSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketCreateConnectedToSocketSignature(
        allocator: CFAllocatorRef,
        signature: *const CFSocketSignature,
        callBackTypes: CFOptionFlags,
        callout: CFSocketCallBack,
        context: *const CFSocketContext,
        timeout: CFTimeInterval,
    ) -> CFSocketRef;
}
extern "C" {
    pub fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketConnectToAddress(
        s: CFSocketRef,
        address: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketInvalidate(s: CFSocketRef);
}
extern "C" {
    pub fn CFSocketIsValid(s: CFSocketRef) -> Boolean;
}
extern "C" {
    pub fn CFSocketCopyAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketCopyPeerAddress(s: CFSocketRef) -> CFDataRef;
}
extern "C" {
    pub fn CFSocketGetContext(s: CFSocketRef, context: *mut CFSocketContext);
}
extern "C" {
    pub fn CFSocketGetNative(s: CFSocketRef) -> CFSocketNativeHandle;
}
extern "C" {
    pub fn CFSocketCreateRunLoopSource(
        allocator: CFAllocatorRef,
        s: CFSocketRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFSocketGetSocketFlags(s: CFSocketRef) -> CFOptionFlags;
}
extern "C" {
    pub fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFSocketSendData(
        s: CFSocketRef,
        address: CFDataRef,
        data: CFDataRef,
        timeout: CFTimeInterval,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: CFPropertyListRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredValue(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        value: *mut CFPropertyListRef,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketRegisterSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *const CFSocketSignature,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketCopyRegisteredSocketSignature(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
        signature: *mut CFSocketSignature,
        nameServerAddress: *mut CFDataRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketUnregister(
        nameServerSignature: *const CFSocketSignature,
        timeout: CFTimeInterval,
        name: CFStringRef,
    ) -> CFSocketError;
}
extern "C" {
    pub fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16);
}
extern "C" {
    pub fn CFSocketGetDefaultNameRegistryPortNumber() -> UInt16;
}
extern "C" {
    pub static kCFSocketCommandKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketNameKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketValueKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketResultKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketErrorKey: CFStringRef;
}
extern "C" {
    pub static kCFSocketRegisterCommand: CFStringRef;
}
extern "C" {
    pub static kCFSocketRetrieveCommand: CFStringRef;
}
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accessx_descriptor>())).ad_name_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_pad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optreset: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        24usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct flocktimeout {
    pub fl: flock,
    pub timeout: timespec,
}
#[test]
fn bindgen_test_layout_flocktimeout() {
    assert_eq!(
        ::std::mem::size_of::<flocktimeout>(),
        40usize,
        concat!("Size of: ", stringify!(flocktimeout))
    );
    assert_eq!(
        ::std::mem::align_of::<flocktimeout>(),
        8usize,
        concat!("Alignment of ", stringify!(flocktimeout))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flocktimeout>())).fl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(fl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flocktimeout>())).timeout as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flocktimeout),
            "::",
            stringify!(timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct radvisory {
    pub ra_offset: off_t,
    pub ra_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_radvisory() {
    assert_eq!(
        ::std::mem::size_of::<radvisory>(),
        16usize,
        concat!("Size of: ", stringify!(radvisory))
    );
    assert_eq!(
        ::std::mem::align_of::<radvisory>(),
        8usize,
        concat!("Alignment of ", stringify!(radvisory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<radvisory>())).ra_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<radvisory>())).ra_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radvisory),
            "::",
            stringify!(ra_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsignatures {
    pub fs_file_start: off_t,
    pub fs_blob_start: *mut ::std::os::raw::c_void,
    pub fs_blob_size: usize,
    pub fs_fsignatures_size: usize,
    pub fs_cdhash: [::std::os::raw::c_char; 20usize],
    pub fs_hash_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsignatures() {
    assert_eq!(
        ::std::mem::size_of::<fsignatures>(),
        56usize,
        concat!("Size of: ", stringify!(fsignatures))
    );
    assert_eq!(
        ::std::mem::align_of::<fsignatures>(),
        8usize,
        concat!("Alignment of ", stringify!(fsignatures))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_file_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_blob_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_blob_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_blob_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_fsignatures_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_fsignatures_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_cdhash as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_cdhash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsignatures>())).fs_hash_type as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fsignatures),
            "::",
            stringify!(fs_hash_type)
        )
    );
}
impl Default for fsignatures {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fsignatures_t = fsignatures;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fsupplement {
    pub fs_file_start: off_t,
    pub fs_blob_start: off_t,
    pub fs_blob_size: usize,
    pub fs_orig_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fsupplement() {
    assert_eq!(
        ::std::mem::size_of::<fsupplement>(),
        32usize,
        concat!("Size of: ", stringify!(fsupplement))
    );
    assert_eq!(
        ::std::mem::align_of::<fsupplement>(),
        8usize,
        concat!("Alignment of ", stringify!(fsupplement))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsupplement>())).fs_file_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_file_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsupplement>())).fs_blob_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_blob_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsupplement>())).fs_blob_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_blob_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fsupplement>())).fs_orig_fd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fsupplement),
            "::",
            stringify!(fs_orig_fd)
        )
    );
}
pub type fsupplement_t = fsupplement;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fchecklv {
    pub lv_file_start: off_t,
    pub lv_error_message_size: usize,
    pub lv_error_message: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fchecklv() {
    assert_eq!(
        ::std::mem::size_of::<fchecklv>(),
        24usize,
        concat!("Size of: ", stringify!(fchecklv))
    );
    assert_eq!(
        ::std::mem::align_of::<fchecklv>(),
        8usize,
        concat!("Alignment of ", stringify!(fchecklv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fchecklv>())).lv_file_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_file_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fchecklv>())).lv_error_message_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fchecklv>())).lv_error_message as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fchecklv),
            "::",
            stringify!(lv_error_message)
        )
    );
}
impl Default for fchecklv {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fchecklv_t = fchecklv;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fgetsigsinfo {
    pub fg_file_start: off_t,
    pub fg_info_request: ::std::os::raw::c_int,
    pub fg_sig_is_platform: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fgetsigsinfo() {
    assert_eq!(
        ::std::mem::size_of::<fgetsigsinfo>(),
        16usize,
        concat!("Size of: ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<fgetsigsinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(fgetsigsinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fgetsigsinfo>())).fg_file_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_file_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fgetsigsinfo>())).fg_info_request as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_info_request)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fgetsigsinfo>())).fg_sig_is_platform as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fgetsigsinfo),
            "::",
            stringify!(fg_sig_is_platform)
        )
    );
}
pub type fgetsigsinfo_t = fgetsigsinfo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fstore {
    pub fst_flags: ::std::os::raw::c_uint,
    pub fst_posmode: ::std::os::raw::c_int,
    pub fst_offset: off_t,
    pub fst_length: off_t,
    pub fst_bytesalloc: off_t,
}
#[test]
fn bindgen_test_layout_fstore() {
    assert_eq!(
        ::std::mem::size_of::<fstore>(),
        32usize,
        concat!("Size of: ", stringify!(fstore))
    );
    assert_eq!(
        ::std::mem::align_of::<fstore>(),
        8usize,
        concat!("Alignment of ", stringify!(fstore))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_posmode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_posmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fstore>())).fst_bytesalloc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fstore),
            "::",
            stringify!(fst_bytesalloc)
        )
    );
}
pub type fstore_t = fstore;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fpunchhole {
    pub fp_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fp_offset: off_t,
    pub fp_length: off_t,
}
#[test]
fn bindgen_test_layout_fpunchhole() {
    assert_eq!(
        ::std::mem::size_of::<fpunchhole>(),
        24usize,
        concat!("Size of: ", stringify!(fpunchhole))
    );
    assert_eq!(
        ::std::mem::align_of::<fpunchhole>(),
        8usize,
        concat!("Alignment of ", stringify!(fpunchhole))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).fp_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).fp_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fpunchhole>())).fp_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fpunchhole),
            "::",
            stringify!(fp_length)
        )
    );
}
pub type fpunchhole_t = fpunchhole;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ftrimactivefile {
    pub fta_offset: off_t,
    pub fta_length: off_t,
}
#[test]
fn bindgen_test_layout_ftrimactivefile() {
    assert_eq!(
        ::std::mem::size_of::<ftrimactivefile>(),
        16usize,
        concat!("Size of: ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        ::std::mem::align_of::<ftrimactivefile>(),
        8usize,
        concat!("Alignment of ", stringify!(ftrimactivefile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftrimactivefile>())).fta_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ftrimactivefile>())).fta_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ftrimactivefile),
            "::",
            stringify!(fta_length)
        )
    );
}
pub type ftrimactivefile_t = ftrimactivefile;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fspecread {
    pub fsr_flags: ::std::os::raw::c_uint,
    pub reserved: ::std::os::raw::c_uint,
    pub fsr_offset: off_t,
    pub fsr_length: off_t,
}
#[test]
fn bindgen_test_layout_fspecread() {
    assert_eq!(
        ::std::mem::size_of::<fspecread>(),
        24usize,
        concat!("Size of: ", stringify!(fspecread))
    );
    assert_eq!(
        ::std::mem::align_of::<fspecread>(),
        8usize,
        concat!("Alignment of ", stringify!(fspecread))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).fsr_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).fsr_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fspecread>())).fsr_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fspecread),
            "::",
            stringify!(fsr_length)
        )
    );
}
pub type fspecread_t = fspecread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fbootstraptransfer {
    pub fbt_offset: off_t,
    pub fbt_length: usize,
    pub fbt_buffer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fbootstraptransfer() {
    assert_eq!(
        ::std::mem::size_of::<fbootstraptransfer>(),
        24usize,
        concat!("Size of: ", stringify!(fbootstraptransfer))
    );
    assert_eq!(
        ::std::mem::align_of::<fbootstraptransfer>(),
        8usize,
        concat!("Alignment of ", stringify!(fbootstraptransfer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fbootstraptransfer>())).fbt_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fbootstraptransfer),
            "::",
            stringify!(fbt_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fbootstraptransfer>())).fbt_length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fbootstraptransfer),
            "::",
            stringify!(fbt_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fbootstraptransfer>())).fbt_buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fbootstraptransfer),
            "::",
            stringify!(fbt_buffer)
        )
    );
}
impl Default for fbootstraptransfer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fbootstraptransfer_t = fbootstraptransfer;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct log2phys {
    pub l2p_flags: ::std::os::raw::c_uint,
    pub l2p_contigbytes: off_t,
    pub l2p_devoffset: off_t,
}
#[test]
fn bindgen_test_layout_log2phys() {
    assert_eq!(
        ::std::mem::size_of::<log2phys>(),
        20usize,
        concat!("Size of: ", stringify!(log2phys))
    );
    assert_eq!(
        ::std::mem::align_of::<log2phys>(),
        4usize,
        concat!("Alignment of ", stringify!(log2phys))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log2phys>())).l2p_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log2phys>())).l2p_contigbytes as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_contigbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log2phys>())).l2p_devoffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(log2phys),
            "::",
            stringify!(l2p_devoffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
pub const filesec_property_t_FILESEC_OWNER: filesec_property_t = 1;
pub const filesec_property_t_FILESEC_GROUP: filesec_property_t = 2;
pub const filesec_property_t_FILESEC_UUID: filesec_property_t = 3;
pub const filesec_property_t_FILESEC_MODE: filesec_property_t = 4;
pub const filesec_property_t_FILESEC_ACL: filesec_property_t = 5;
pub const filesec_property_t_FILESEC_GRPUUID: filesec_property_t = 6;
pub const filesec_property_t_FILESEC_ACL_RAW: filesec_property_t = 100;
pub const filesec_property_t_FILESEC_ACL_ALLOCSIZE: filesec_property_t = 101;
pub type filesec_property_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn open(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_dprotected_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_init() -> filesec_t;
}
extern "C" {
    pub fn filesec_dup(arg1: filesec_t) -> filesec_t;
}
extern "C" {
    pub fn filesec_free(arg1: filesec_t);
}
extern "C" {
    pub fn filesec_get_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_query_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_set_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesec_unset_property(
        arg1: filesec_t,
        arg2: filesec_property_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_retain(object: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_release(object: *mut ::std::os::raw::c_void);
}
pub const os_clockid_t_OS_CLOCK_MACH_ABSOLUTE_TIME: os_clockid_t = 32;
pub type os_clockid_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct os_workgroup_attr_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 60usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_attr_opaque_s() {
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_attr_opaque_s>(),
        64usize,
        concat!("Size of: ", stringify!(os_workgroup_attr_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_attr_opaque_s>(),
        4usize,
        concat!("Alignment of ", stringify!(os_workgroup_attr_opaque_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_workgroup_attr_opaque_s>())).sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_attr_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_workgroup_attr_opaque_s>())).opaque as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_attr_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for os_workgroup_attr_opaque_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct os_workgroup_interval_data_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_interval_data_opaque_s() {
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_interval_data_opaque_s>(),
        60usize,
        concat!("Size of: ", stringify!(os_workgroup_interval_data_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_interval_data_opaque_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(os_workgroup_interval_data_opaque_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_workgroup_interval_data_opaque_s>())).sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_interval_data_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_workgroup_interval_data_opaque_s>())).opaque as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_interval_data_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for os_workgroup_interval_data_opaque_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct os_workgroup_join_token_opaque_s {
    pub sig: u32,
    pub opaque: [::std::os::raw::c_char; 36usize],
}
#[test]
fn bindgen_test_layout_os_workgroup_join_token_opaque_s() {
    assert_eq!(
        ::std::mem::size_of::<os_workgroup_join_token_opaque_s>(),
        40usize,
        concat!("Size of: ", stringify!(os_workgroup_join_token_opaque_s))
    );
    assert_eq!(
        ::std::mem::align_of::<os_workgroup_join_token_opaque_s>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(os_workgroup_join_token_opaque_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_workgroup_join_token_opaque_s>())).sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_join_token_opaque_s),
            "::",
            stringify!(sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_workgroup_join_token_opaque_s>())).opaque as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_workgroup_join_token_opaque_s),
            "::",
            stringify!(opaque)
        )
    );
}
impl Default for os_workgroup_join_token_opaque_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_s {
    _unused: [u8; 0],
}
pub type os_workgroup_t = *mut os_workgroup_s;
pub type os_workgroup_attr_s = os_workgroup_attr_opaque_s;
pub type os_workgroup_attr_t = *mut os_workgroup_attr_opaque_s;
extern "C" {
    pub fn os_workgroup_copy_port(
        wg: os_workgroup_t,
        mach_port_out: *mut mach_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_create_with_port(
        name: *const ::std::os::raw::c_char,
        mach_port: mach_port_t,
    ) -> os_workgroup_t;
}
extern "C" {
    pub fn os_workgroup_create_with_workgroup(
        name: *const ::std::os::raw::c_char,
        wg: os_workgroup_t,
    ) -> os_workgroup_t;
}
pub type os_workgroup_join_token_s = os_workgroup_join_token_opaque_s;
pub type os_workgroup_join_token_t = *mut os_workgroup_join_token_opaque_s;
extern "C" {
    pub fn os_workgroup_join(
        wg: os_workgroup_t,
        token_out: os_workgroup_join_token_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_leave(wg: os_workgroup_t, token: os_workgroup_join_token_t);
}
pub type os_workgroup_index = u32;
pub type os_workgroup_working_arena_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn os_workgroup_set_working_arena(
        wg: os_workgroup_t,
        arena: *mut ::std::os::raw::c_void,
        max_workers: u32,
        destructor: os_workgroup_working_arena_destructor_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_get_working_arena(
        wg: os_workgroup_t,
        index_out: *mut os_workgroup_index,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn os_workgroup_cancel(wg: os_workgroup_t);
}
extern "C" {
    pub fn os_workgroup_testcancel(wg: os_workgroup_t) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_workgroup_max_parallel_threads_attr_s {
    _unused: [u8; 0],
}
pub type os_workgroup_mpt_attr_s = os_workgroup_max_parallel_threads_attr_s;
pub type os_workgroup_mpt_attr_t = *mut os_workgroup_max_parallel_threads_attr_s;
extern "C" {
    pub fn os_workgroup_max_parallel_threads(
        wg: os_workgroup_t,
        attr: os_workgroup_mpt_attr_t,
    ) -> ::std::os::raw::c_int;
}
pub type os_workgroup_interval_t = os_workgroup_t;
pub type os_workgroup_interval_data_s = os_workgroup_interval_data_opaque_s;
pub type os_workgroup_interval_data_t = *mut os_workgroup_interval_data_opaque_s;
extern "C" {
    pub fn os_workgroup_interval_start(
        wg: os_workgroup_interval_t,
        start: u64,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_update(
        wg: os_workgroup_interval_t,
        deadline: u64,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn os_workgroup_interval_finish(
        wg: os_workgroup_interval_t,
        data: os_workgroup_interval_data_t,
    ) -> ::std::os::raw::c_int;
}
pub type os_workgroup_parallel_t = os_workgroup_t;
extern "C" {
    pub fn os_workgroup_parallel_create(
        name: *const ::std::os::raw::c_char,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_parallel_t;
}
pub type dispatch_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[test]
fn bindgen_test_layout_time_value() {
    assert_eq!(
        ::std::mem::size_of::<time_value>(),
        8usize,
        concat!("Size of: ", stringify!(time_value))
    );
    assert_eq!(
        ::std::mem::align_of::<time_value>(),
        4usize,
        concat!("Alignment of ", stringify!(time_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<time_value>())).seconds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<time_value>())).microseconds as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(microseconds)
        )
    );
}
pub type time_value_t = time_value;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[test]
fn bindgen_test_layout_mach_timespec() {
    assert_eq!(
        ::std::mem::size_of::<mach_timespec>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_timespec>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type mach_timespec_t = mach_timespec;
pub type dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: ::std::os::raw::c_ulong = 18446744073709551614;
pub type _bindgen_ty_52 = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_time(when: dispatch_time_t, delta: i64) -> dispatch_time_t;
}
extern "C" {
    pub fn dispatch_walltime(when: *const timespec, delta: i64) -> dispatch_time_t;
}
pub const QOS_CLASS_USER_INTERACTIVE: ::std::os::raw::c_uint = 33;
pub const QOS_CLASS_USER_INITIATED: ::std::os::raw::c_uint = 25;
pub const QOS_CLASS_DEFAULT: ::std::os::raw::c_uint = 21;
pub const QOS_CLASS_UTILITY: ::std::os::raw::c_uint = 17;
pub const QOS_CLASS_BACKGROUND: ::std::os::raw::c_uint = 9;
pub const QOS_CLASS_UNSPECIFIED: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_53 = ::std::os::raw::c_uint;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dispatch_object_t {
    pub _os_obj: *mut _os_object_s,
    pub _do: *mut dispatch_object_s,
    pub _dq: *mut dispatch_queue_s,
    pub _dqa: *mut dispatch_queue_attr_s,
    pub _dg: *mut dispatch_group_s,
    pub _ds: *mut dispatch_source_s,
    pub _dch: *mut dispatch_channel_s,
    pub _dm: *mut dispatch_mach_s,
    pub _dmsg: *mut dispatch_mach_msg_s,
    pub _dsema: *mut dispatch_semaphore_s,
    pub _ddata: *mut dispatch_data_s,
    pub _dchannel: *mut dispatch_io_s,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_dispatch_object_t() {
    assert_eq!(
        ::std::mem::size_of::<dispatch_object_t>(),
        8usize,
        concat!("Size of: ", stringify!(dispatch_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dispatch_object_t>(),
        8usize,
        concat!("Alignment of ", stringify!(dispatch_object_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._os_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_os_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._do as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_do)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dqa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dqa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._ds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dmsg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dmsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dsema as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dsema)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._ddata as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_ddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dispatch_object_t>()))._dchannel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dispatch_object_t),
            "::",
            stringify!(_dchannel)
        )
    );
}
impl Default for dispatch_object_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type dispatch_block_t = *mut ::std::os::raw::c_void;
pub type dispatch_qos_class_t = qos_class_t;
extern "C" {
    pub fn dispatch_retain(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_release(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_get_context(object: dispatch_object_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_set_context(object: dispatch_object_t, context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t);
}
extern "C" {
    pub fn dispatch_activate(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_suspend(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_resume(object: dispatch_object_t);
}
extern "C" {
    pub fn dispatch_set_qos_class_floor(
        object: dispatch_object_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dispatch_wait(object: *mut ::std::os::raw::c_void, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_notify(
        object: *mut ::std::os::raw::c_void,
        queue: dispatch_object_t,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_cancel(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn dispatch_testcancel(object: *mut ::std::os::raw::c_void) -> isize;
}
extern "C" {
    pub fn dispatch_debug(object: dispatch_object_t, message: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn dispatch_debugv(
        object: dispatch_object_t,
        message: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    );
}
pub type dispatch_queue_t = *mut dispatch_queue_s;
pub type dispatch_queue_global_t = dispatch_queue_t;
pub type dispatch_queue_serial_t = dispatch_queue_t;
pub type dispatch_queue_main_t = dispatch_queue_serial_t;
pub type dispatch_queue_concurrent_t = dispatch_queue_t;
extern "C" {
    pub fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_sync_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_async_and_wait_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_apply(
        iterations: usize,
        queue: dispatch_queue_t,
        block: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_apply_f(
        iterations: usize,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: usize),
        >,
    );
}
extern "C" {
    pub fn dispatch_get_current_queue() -> dispatch_queue_t;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_queue_s {
    pub _address: u8,
}
extern "C" {
    pub static mut _dispatch_main_q: dispatch_queue_s;
}
pub type dispatch_queue_priority_t = ::std::os::raw::c_long;
extern "C" {
    pub fn dispatch_get_global_queue(identifier: isize, flags: usize) -> dispatch_queue_global_t;
}
pub type dispatch_queue_attr_t = *mut dispatch_queue_attr_s;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_queue_attr_s {
    pub _address: u8,
}
extern "C" {
    pub static mut _dispatch_queue_attr_concurrent: dispatch_queue_attr_s;
}
extern "C" {
    pub fn dispatch_queue_attr_make_initially_inactive(
        attr: dispatch_queue_attr_t,
    ) -> dispatch_queue_attr_t;
}
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_INHERIT:
    dispatch_autorelease_frequency_t = 0;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM:
    dispatch_autorelease_frequency_t = 1;
pub const dispatch_autorelease_frequency_t_DISPATCH_AUTORELEASE_FREQUENCY_NEVER:
    dispatch_autorelease_frequency_t = 2;
pub type dispatch_autorelease_frequency_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_queue_attr_make_with_autorelease_frequency(
        attr: dispatch_queue_attr_t,
        frequency: dispatch_autorelease_frequency_t,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_attr_make_with_qos_class(
        attr: dispatch_queue_attr_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
    ) -> dispatch_queue_attr_t;
}
extern "C" {
    pub fn dispatch_queue_create_with_target(
        label: *const ::std::os::raw::c_char,
        attr: dispatch_queue_attr_t,
        target: dispatch_queue_t,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_create(
        label: *const ::std::os::raw::c_char,
        attr: dispatch_queue_attr_t,
    ) -> dispatch_queue_t;
}
extern "C" {
    pub fn dispatch_queue_get_label(queue: dispatch_queue_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dispatch_queue_get_qos_class(
        queue: dispatch_queue_t,
        relative_priority_ptr: *mut ::std::os::raw::c_int,
    ) -> dispatch_qos_class_t;
}
extern "C" {
    pub fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t);
}
extern "C" {
    pub fn dispatch_main();
}
extern "C" {
    pub fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_after_f(
        when: dispatch_time_t,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_sync_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_barrier_async_and_wait_f(
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_set_specific(
        queue: dispatch_queue_t,
        key: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
        destructor: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_queue_get_specific(
        queue: dispatch_queue_t,
        key: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_get_specific(key: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dispatch_assert_queue(queue: dispatch_queue_t);
}
extern "C" {
    pub fn dispatch_assert_queue_barrier(queue: dispatch_queue_t);
}
extern "C" {
    pub fn dispatch_assert_queue_not(queue: dispatch_queue_t);
}
pub const dispatch_block_flags_t_DISPATCH_BLOCK_BARRIER: dispatch_block_flags_t = 1;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_DETACHED: dispatch_block_flags_t = 2;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ASSIGN_CURRENT: dispatch_block_flags_t = 4;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_NO_QOS_CLASS: dispatch_block_flags_t = 8;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_INHERIT_QOS_CLASS: dispatch_block_flags_t = 16;
pub const dispatch_block_flags_t_DISPATCH_BLOCK_ENFORCE_QOS_CLASS: dispatch_block_flags_t = 32;
pub type dispatch_block_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_block_create(
        flags: dispatch_block_flags_t,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_create_with_qos_class(
        flags: dispatch_block_flags_t,
        qos_class: dispatch_qos_class_t,
        relative_priority: ::std::os::raw::c_int,
        block: dispatch_block_t,
    ) -> dispatch_block_t;
}
extern "C" {
    pub fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_block_notify(
        block: dispatch_block_t,
        queue: dispatch_queue_t,
        notification_block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_block_cancel(block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_block_testcancel(block: dispatch_block_t) -> isize;
}
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_mach_msg_type_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_type_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_type_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_type_descriptor_t>())).pad1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_type_descriptor_t>())).pad2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad2)
        )
    );
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_mach_msg_port_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_port_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_port_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_port_descriptor_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_port_descriptor_t>())).pad1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor32_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor32_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor32_t>())).size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor64_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor64_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor64_t>())).size as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_descriptor_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_ool_descriptor_t>())).size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(size)
        )
    );
}
impl Default for mach_msg_ool_descriptor_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor32_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor32_t>())).address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor32_t>())).count as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor64_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor64_t>())).address as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor64_t>())).count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor_t>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_ool_ports_descriptor_t>())).count as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(count)
        )
    );
}
impl Default for mach_msg_ool_ports_descriptor_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor32_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor32_t>())).context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor32_t>())).name as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor64_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor64_t>())).context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor64_t>())).name as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor_t>())).context as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_guarded_port_descriptor_t>())).name as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_mach_msg_descriptor_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_descriptor_t>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_descriptor_t>())).out_of_line as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(out_of_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_descriptor_t>())).ool_ports as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(ool_ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_descriptor_t>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_descriptor_t>())).guarded_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(guarded_port)
        )
    );
}
impl Default for mach_msg_descriptor_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_body_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_body_t>(),
        4usize,
        concat!("Size of: ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_body_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_body_t>())).msgh_descriptor_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_body_t),
            "::",
            stringify!(msgh_descriptor_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[test]
fn bindgen_test_layout_mach_msg_header_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_header_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_remote_port as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_remote_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_local_port as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_local_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_voucher_port as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_voucher_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_header_t>())).msgh_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[test]
fn bindgen_test_layout_mach_msg_base_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_base_t>(),
        28usize,
        concat!("Size of: ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_base_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_base_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_base_t>())).body as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(body)
        )
    );
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_trailer_t>(),
        8usize,
        concat!("Size of: ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_trailer_t>())).msgh_trailer_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_trailer_t>())).msgh_trailer_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout_mach_msg_seqno_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_seqno_trailer_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_seqno_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_seqno_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_seqno_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_seqno_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_security_token_t() {
    assert_eq!(
        ::std::mem::size_of::<security_token_t>(),
        8usize,
        concat!("Size of: ", stringify!(security_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<security_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(security_token_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<security_token_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(security_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_security_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_security_trailer_t>(),
        20usize,
        concat!("Size of: ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_security_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_security_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_audit_token_t() {
    assert_eq!(
        ::std::mem::size_of::<audit_token_t>(),
        32usize,
        concat!("Size of: ", stringify!(audit_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_token_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<audit_token_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_audit_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_audit_trailer_t>(),
        52usize,
        concat!("Size of: ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_audit_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_audit_trailer_t>())).msgh_audit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout_mach_msg_context_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_context_trailer_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_context_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_audit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_context_trailer_t>())).msgh_context as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_msg_labels_t() {
    assert_eq!(
        ::std::mem::size_of::<msg_labels_t>(),
        4usize,
        concat!("Size of: ", stringify!(msg_labels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_labels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(msg_labels_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_labels_t>())).sender as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_labels_t),
            "::",
            stringify!(sender)
        )
    );
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[test]
fn bindgen_test_layout_mach_msg_mac_trailer_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_mac_trailer_t>(),
        68usize,
        concat!("Size of: ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_mac_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_trailer_type as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_trailer_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_seqno as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_sender as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_audit as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_context as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_ad as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_ad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mach_msg_mac_trailer_t>())).msgh_labels as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_labels)
        )
    );
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_send_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_send_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_send_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_send_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_send_t),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_rcv_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_rcv_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_rcv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_rcv_t>())).header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_rcv_t>())).trailer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
    _bindgen_union_align: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_mach_msg_empty_t() {
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_t>())).send as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mach_msg_empty_t>())).rcv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(rcv)
        )
    );
}
impl Default for mach_msg_empty_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub type dispatch_source_t = *mut dispatch_source_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dispatch_source_type_s {
    _unused: [u8; 0],
}
pub type dispatch_source_type_t = *const dispatch_source_type_s;
extern "C" {
    pub static _dispatch_source_type_data_add: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_or: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_data_replace: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_send: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_mach_recv: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_memorypressure: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_proc: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_read: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_signal: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_timer: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_vnode: dispatch_source_type_s;
}
extern "C" {
    pub static _dispatch_source_type_write: dispatch_source_type_s;
}
pub type dispatch_source_mach_send_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_mach_recv_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_memorypressure_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_proc_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_vnode_flags_t = ::std::os::raw::c_ulong;
pub type dispatch_source_timer_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_source_create(
        type_: dispatch_source_type_t,
        handle: usize,
        mask: usize,
        queue: dispatch_queue_t,
    ) -> dispatch_source_t;
}
extern "C" {
    pub fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_event_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_source_set_cancel_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_source_cancel(source: dispatch_source_t);
}
extern "C" {
    pub fn dispatch_source_testcancel(source: dispatch_source_t) -> isize;
}
extern "C" {
    pub fn dispatch_source_get_handle(source: dispatch_source_t) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_mask(source: dispatch_source_t) -> usize;
}
extern "C" {
    pub fn dispatch_source_get_data(source: dispatch_source_t) -> usize;
}
extern "C" {
    pub fn dispatch_source_merge_data(source: dispatch_source_t, value: usize);
}
extern "C" {
    pub fn dispatch_source_set_timer(
        source: dispatch_source_t,
        start: dispatch_time_t,
        interval: u64,
        leeway: u64,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler(
        source: dispatch_source_t,
        handler: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_source_set_registration_handler_f(
        source: dispatch_source_t,
        handler: dispatch_function_t,
    );
}
pub type dispatch_group_t = *mut dispatch_group_s;
extern "C" {
    pub fn dispatch_group_create() -> dispatch_group_t;
}
extern "C" {
    pub fn dispatch_group_async(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_group_async_f(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_group_notify(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        block: dispatch_block_t,
    );
}
extern "C" {
    pub fn dispatch_group_notify_f(
        group: dispatch_group_t,
        queue: dispatch_queue_t,
        context: *mut ::std::os::raw::c_void,
        work: dispatch_function_t,
    );
}
extern "C" {
    pub fn dispatch_group_enter(group: dispatch_group_t);
}
extern "C" {
    pub fn dispatch_group_leave(group: dispatch_group_t);
}
pub type dispatch_semaphore_t = *mut dispatch_semaphore_s;
extern "C" {
    pub fn dispatch_semaphore_create(value: isize) -> dispatch_semaphore_t;
}
extern "C" {
    pub fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) -> isize;
}
extern "C" {
    pub fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) -> isize;
}
pub type dispatch_once_t = isize;
extern "C" {
    pub fn dispatch_once(predicate: *mut dispatch_once_t, block: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_once_f(
        predicate: *mut dispatch_once_t,
        context: *mut ::std::os::raw::c_void,
        function: dispatch_function_t,
    );
}
pub type dispatch_data_t = *mut dispatch_data_s;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_data_s {
    pub _address: u8,
}
extern "C" {
    pub static mut _dispatch_data_empty: dispatch_data_s;
}
extern "C" {
    pub static _dispatch_data_destructor_free: dispatch_block_t;
}
extern "C" {
    pub static _dispatch_data_destructor_munmap: dispatch_block_t;
}
extern "C" {
    pub fn dispatch_data_create(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        queue: dispatch_queue_t,
        destructor: dispatch_block_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_get_size(data: dispatch_data_t) -> usize;
}
extern "C" {
    pub fn dispatch_data_create_map(
        data: dispatch_data_t,
        buffer_ptr: *mut *const ::std::os::raw::c_void,
        size_ptr: *mut usize,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_concat(
        data1: dispatch_data_t,
        data2: dispatch_data_t,
    ) -> dispatch_data_t;
}
extern "C" {
    pub fn dispatch_data_create_subrange(
        data: dispatch_data_t,
        offset: usize,
        length: usize,
    ) -> dispatch_data_t;
}
pub type dispatch_data_applier_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) -> bool;
}
extern "C" {
    pub fn dispatch_data_copy_region(
        data: dispatch_data_t,
        location: usize,
        offset_ptr: *mut usize,
    ) -> dispatch_data_t;
}
pub type dispatch_fd_t = ::std::os::raw::c_int;
extern "C" {
    pub fn dispatch_read(
        fd: dispatch_fd_t,
        length: usize,
        queue: dispatch_queue_t,
        handler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn dispatch_write(
        fd: dispatch_fd_t,
        data: dispatch_data_t,
        queue: dispatch_queue_t,
        handler: *mut ::std::os::raw::c_void,
    );
}
pub type dispatch_io_t = *mut dispatch_io_s;
pub type dispatch_io_type_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_create(
        type_: dispatch_io_type_t,
        fd: dispatch_fd_t,
        queue: dispatch_queue_t,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_path(
        type_: dispatch_io_type_t,
        path: *const ::std::os::raw::c_char,
        oflag: ::std::os::raw::c_int,
        mode: mode_t,
        queue: dispatch_queue_t,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
extern "C" {
    pub fn dispatch_io_create_with_io(
        type_: dispatch_io_type_t,
        io: dispatch_io_t,
        queue: dispatch_queue_t,
        cleanup_handler: *mut ::std::os::raw::c_void,
    ) -> dispatch_io_t;
}
pub type dispatch_io_handler_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn dispatch_io_read(
        channel: dispatch_io_t,
        offset: off_t,
        length: usize,
        queue: dispatch_queue_t,
        io_handler: dispatch_io_handler_t,
    );
}
extern "C" {
    pub fn dispatch_io_write(
        channel: dispatch_io_t,
        offset: off_t,
        data: dispatch_data_t,
        queue: dispatch_queue_t,
        io_handler: dispatch_io_handler_t,
    );
}
pub type dispatch_io_close_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t);
}
extern "C" {
    pub fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t);
}
extern "C" {
    pub fn dispatch_io_get_descriptor(channel: dispatch_io_t) -> dispatch_fd_t;
}
extern "C" {
    pub fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize);
}
extern "C" {
    pub fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize);
}
pub type dispatch_io_interval_flags_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn dispatch_io_set_interval(
        channel: dispatch_io_t,
        interval: u64,
        flags: dispatch_io_interval_flags_t,
    );
}
pub type dispatch_workloop_t = dispatch_queue_t;
extern "C" {
    pub fn dispatch_workloop_create(label: *const ::std::os::raw::c_char) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_create_inactive(
        label: *const ::std::os::raw::c_char,
    ) -> dispatch_workloop_t;
}
extern "C" {
    pub fn dispatch_workloop_set_autorelease_frequency(
        workloop: dispatch_workloop_t,
        frequency: dispatch_autorelease_frequency_t,
    );
}
extern "C" {
    pub fn dispatch_workloop_set_os_workgroup(
        workloop: dispatch_workloop_t,
        workgroup: os_workgroup_t,
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFStreamError {
    pub domain: CFIndex,
    pub error: SInt32,
}
#[test]
fn bindgen_test_layout_CFStreamError() {
    assert_eq!(
        ::std::mem::size_of::<CFStreamError>(),
        16usize,
        concat!("Size of: ", stringify!(CFStreamError))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStreamError>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStreamError))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStreamError>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamError),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStreamError>())).error as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamError),
            "::",
            stringify!(error)
        )
    );
}
pub type CFStreamPropertyKey = CFStringRef;
pub type CFStreamStatus = CFIndex;
pub const kCFStreamStatusNotOpen: ::std::os::raw::c_uint = 0;
pub const kCFStreamStatusOpening: ::std::os::raw::c_uint = 1;
pub const kCFStreamStatusOpen: ::std::os::raw::c_uint = 2;
pub const kCFStreamStatusReading: ::std::os::raw::c_uint = 3;
pub const kCFStreamStatusWriting: ::std::os::raw::c_uint = 4;
pub const kCFStreamStatusAtEnd: ::std::os::raw::c_uint = 5;
pub const kCFStreamStatusClosed: ::std::os::raw::c_uint = 6;
pub const kCFStreamStatusError: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
pub type CFStreamEventType = CFOptionFlags;
pub const kCFStreamEventNone: ::std::os::raw::c_uint = 0;
pub const kCFStreamEventOpenCompleted: ::std::os::raw::c_uint = 1;
pub const kCFStreamEventHasBytesAvailable: ::std::os::raw::c_uint = 2;
pub const kCFStreamEventCanAcceptBytes: ::std::os::raw::c_uint = 4;
pub const kCFStreamEventErrorOccurred: ::std::os::raw::c_uint = 8;
pub const kCFStreamEventEndEncountered: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFStreamClientContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFStreamClientContext() {
    assert_eq!(
        ::std::mem::size_of::<CFStreamClientContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFStreamClientContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFStreamClientContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFStreamClientContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStreamClientContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamClientContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStreamClientContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamClientContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStreamClientContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamClientContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFStreamClientContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamClientContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFStreamClientContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFStreamClientContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFStreamClientContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFReadStream {
    _unused: [u8; 0],
}
pub type CFReadStreamRef = *mut __CFReadStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFWriteStream {
    _unused: [u8; 0],
}
pub type CFWriteStreamRef = *mut __CFWriteStream;
pub type CFReadStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFReadStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFWriteStreamClientCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        stream: CFWriteStreamRef,
        type_: CFStreamEventType,
        clientCallBackInfo: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn CFReadStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFWriteStreamGetTypeID() -> CFTypeID;
}
extern "C" {
    pub static mut kCFStreamPropertyDataWritten: CFStreamPropertyKey;
}
extern "C" {
    pub fn CFReadStreamCreateWithBytesNoCopy(
        alloc: CFAllocatorRef,
        bytes: *const UInt8,
        length: CFIndex,
        bytesDeallocator: CFAllocatorRef,
    ) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithBuffer(
        alloc: CFAllocatorRef,
        buffer: *mut UInt8,
        bufferCapacity: CFIndex,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithAllocatedBuffers(
        alloc: CFAllocatorRef,
        bufferAllocator: CFAllocatorRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) -> CFReadStreamRef;
}
extern "C" {
    pub fn CFWriteStreamCreateWithFile(
        alloc: CFAllocatorRef,
        fileURL: CFURLRef,
    ) -> CFWriteStreamRef;
}
extern "C" {
    pub fn CFStreamCreateBoundPair(
        alloc: CFAllocatorRef,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
        transferBufferSize: CFIndex,
    );
}
extern "C" {
    pub static mut kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
}
extern "C" {
    pub static mut kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
}
extern "C" {
    pub static kCFStreamErrorDomainSOCKS: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxy: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyHost: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSProxyPort: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSVersion: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion4: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSOCKSVersion5: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSUser: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertySOCKSPassword: CFStringRef;
}
extern "C" {
    pub static kCFStreamErrorDomainSSL: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut kCFStreamPropertySocketSecurityLevel: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNone: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
}
extern "C" {
    pub static mut kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
}
extern "C" {
    pub fn CFStreamCreatePairWithSocket(
        alloc: CFAllocatorRef,
        sock: CFSocketNativeHandle,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithSocketToHost(
        alloc: CFAllocatorRef,
        host: CFStringRef,
        port: UInt32,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFStreamCreatePairWithPeerSocketSignature(
        alloc: CFAllocatorRef,
        signature: *const CFSocketSignature,
        readStream: *mut CFReadStreamRef,
        writeStream: *mut CFWriteStreamRef,
    );
}
extern "C" {
    pub fn CFReadStreamGetStatus(stream: CFReadStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) -> CFStreamStatus;
}
extern "C" {
    pub fn CFReadStreamCopyError(stream: CFReadStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFWriteStreamCopyError(stream: CFWriteStreamRef) -> CFErrorRef;
}
extern "C" {
    pub fn CFReadStreamOpen(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamOpen(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamClose(stream: CFReadStreamRef);
}
extern "C" {
    pub fn CFWriteStreamClose(stream: CFWriteStreamRef);
}
extern "C" {
    pub fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamRead(
        stream: CFReadStreamRef,
        buffer: *mut UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamGetBuffer(
        stream: CFReadStreamRef,
        maxBytesToRead: CFIndex,
        numBytesRead: *mut CFIndex,
    ) -> *const UInt8;
}
extern "C" {
    pub fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamWrite(
        stream: CFWriteStreamRef,
        buffer: *const UInt8,
        bufferLength: CFIndex,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFReadStreamCopyProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFWriteStreamCopyProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFReadStreamSetProperty(
        stream: CFReadStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetProperty(
        stream: CFWriteStreamRef,
        propertyName: CFStreamPropertyKey,
        propertyValue: CFTypeRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamSetClient(
        stream: CFReadStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFReadStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFWriteStreamSetClient(
        stream: CFWriteStreamRef,
        streamEvents: CFOptionFlags,
        clientCB: CFWriteStreamClientCallBack,
        clientContext: *mut CFStreamClientContext,
    ) -> Boolean;
}
extern "C" {
    pub fn CFReadStreamScheduleWithRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamScheduleWithRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamUnscheduleFromRunLoop(
        stream: CFReadStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFWriteStreamUnscheduleFromRunLoop(
        stream: CFWriteStreamRef,
        runLoop: CFRunLoopRef,
        runLoopMode: CFRunLoopMode,
    );
}
extern "C" {
    pub fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: dispatch_queue_t);
}
extern "C" {
    pub fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: dispatch_queue_t);
}
extern "C" {
    pub fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) -> dispatch_queue_t;
}
extern "C" {
    pub fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) -> dispatch_queue_t;
}
pub type CFStreamErrorDomain = CFIndex;
pub const kCFStreamErrorDomainCustom: ::std::os::raw::c_int = -1;
pub const kCFStreamErrorDomainPOSIX: ::std::os::raw::c_int = 1;
pub const kCFStreamErrorDomainMacOSStatus: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_56 = ::std::os::raw::c_int;
extern "C" {
    pub fn CFReadStreamGetError(stream: CFReadStreamRef) -> CFStreamError;
}
extern "C" {
    pub fn CFWriteStreamGetError(stream: CFWriteStreamRef) -> CFStreamError;
}
pub type CFPropertyListMutabilityOptions = CFOptionFlags;
pub const kCFPropertyListImmutable: ::std::os::raw::c_uint = 0;
pub const kCFPropertyListMutableContainers: ::std::os::raw::c_uint = 1;
pub const kCFPropertyListMutableContainersAndLeaves: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_57 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFPropertyListCreateFromXMLData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        mutabilityOption: CFOptionFlags,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateXMLData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
    ) -> CFDataRef;
}
extern "C" {
    pub fn CFPropertyListCreateDeepCopy(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        mutabilityOption: CFOptionFlags,
    ) -> CFPropertyListRef;
}
pub type CFPropertyListFormat = CFIndex;
pub const kCFPropertyListOpenStepFormat: ::std::os::raw::c_uint = 1;
pub const kCFPropertyListXMLFormat_v1_0: ::std::os::raw::c_uint = 100;
pub const kCFPropertyListBinaryFormat_v1_0: ::std::os::raw::c_uint = 200;
pub type _bindgen_ty_58 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat)
        -> Boolean;
}
extern "C" {
    pub fn CFPropertyListWriteToStream(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateFromStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        mutabilityOption: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        errorString: *mut CFStringRef,
    ) -> CFPropertyListRef;
}
pub const kCFPropertyListReadCorruptError: ::std::os::raw::c_uint = 3840;
pub const kCFPropertyListReadUnknownVersionError: ::std::os::raw::c_uint = 3841;
pub const kCFPropertyListReadStreamError: ::std::os::raw::c_uint = 3842;
pub const kCFPropertyListWriteStreamError: ::std::os::raw::c_uint = 3851;
pub type _bindgen_ty_59 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFPropertyListCreateWithData(
        allocator: CFAllocatorRef,
        data: CFDataRef,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListCreateWithStream(
        allocator: CFAllocatorRef,
        stream: CFReadStreamRef,
        streamLength: CFIndex,
        options: CFOptionFlags,
        format: *mut CFPropertyListFormat,
        error: *mut CFErrorRef,
    ) -> CFPropertyListRef;
}
extern "C" {
    pub fn CFPropertyListWrite(
        propertyList: CFPropertyListRef,
        stream: CFWriteStreamRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFIndex;
}
extern "C" {
    pub fn CFPropertyListCreateData(
        allocator: CFAllocatorRef,
        propertyList: CFPropertyListRef,
        format: CFPropertyListFormat,
        options: CFOptionFlags,
        error: *mut CFErrorRef,
    ) -> CFDataRef;
}
pub type CFSetRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void,
>;
pub type CFSetReleaseCallBack = ::std::option::Option<
    unsafe extern "C" fn(allocator: CFAllocatorRef, value: *const ::std::os::raw::c_void),
>;
pub type CFSetCopyDescriptionCallBack = ::std::option::Option<
    unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFStringRef,
>;
pub type CFSetEqualCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        value1: *const ::std::os::raw::c_void,
        value2: *const ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFSetHashCallBack =
    ::std::option::Option<unsafe extern "C" fn(value: *const ::std::os::raw::c_void) -> CFHashCode>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFSetCallBacks {
    pub version: CFIndex,
    pub retain: CFSetRetainCallBack,
    pub release: CFSetReleaseCallBack,
    pub copyDescription: CFSetCopyDescriptionCallBack,
    pub equal: CFSetEqualCallBack,
    pub hash: CFSetHashCallBack,
}
#[test]
fn bindgen_test_layout_CFSetCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFSetCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFSetCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFSetCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFSetCallBacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSetCallBacks>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSetCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSetCallBacks>())).retain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSetCallBacks),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSetCallBacks>())).release as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSetCallBacks),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSetCallBacks>())).copyDescription as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSetCallBacks),
            "::",
            stringify!(copyDescription)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSetCallBacks>())).equal as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSetCallBacks),
            "::",
            stringify!(equal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFSetCallBacks>())).hash as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFSetCallBacks),
            "::",
            stringify!(hash)
        )
    );
}
extern "C" {
    pub static kCFTypeSetCallBacks: CFSetCallBacks;
}
extern "C" {
    pub static kCFCopyStringSetCallBacks: CFSetCallBacks;
}
pub type CFSetApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFSet {
    _unused: [u8; 0],
}
pub type CFSetRef = *const __CFSet;
pub type CFMutableSetRef = *mut __CFSet;
extern "C" {
    pub fn CFSetGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFSetCreate(
        allocator: CFAllocatorRef,
        values: *mut *const ::std::os::raw::c_void,
        numValues: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) -> CFSetRef;
}
extern "C" {
    pub fn CFSetCreateMutable(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        callBacks: *const CFSetCallBacks,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetCreateMutableCopy(
        allocator: CFAllocatorRef,
        capacity: CFIndex,
        theSet: CFSetRef,
    ) -> CFMutableSetRef;
}
extern "C" {
    pub fn CFSetGetCount(theSet: CFSetRef) -> CFIndex;
}
extern "C" {
    pub fn CFSetGetCountOfValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> CFIndex;
}
extern "C" {
    pub fn CFSetContainsValue(theSet: CFSetRef, value: *const ::std::os::raw::c_void) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValue(
        theSet: CFSetRef,
        value: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFSetGetValueIfPresent(
        theSet: CFSetRef,
        candidate: *const ::std::os::raw::c_void,
        value: *mut *const ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFSetGetValues(theSet: CFSetRef, values: *mut *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetApplyFunction(
        theSet: CFSetRef,
        applier: CFSetApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFSetAddValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetReplaceValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetSetValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveValue(theSet: CFMutableSetRef, value: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn CFSetRemoveAllValues(theSet: CFMutableSetRef);
}
pub type CFStringEncodings = CFIndex;
pub const kCFStringEncodingMacJapanese: ::std::os::raw::c_uint = 1;
pub const kCFStringEncodingMacChineseTrad: ::std::os::raw::c_uint = 2;
pub const kCFStringEncodingMacKorean: ::std::os::raw::c_uint = 3;
pub const kCFStringEncodingMacArabic: ::std::os::raw::c_uint = 4;
pub const kCFStringEncodingMacHebrew: ::std::os::raw::c_uint = 5;
pub const kCFStringEncodingMacGreek: ::std::os::raw::c_uint = 6;
pub const kCFStringEncodingMacCyrillic: ::std::os::raw::c_uint = 7;
pub const kCFStringEncodingMacDevanagari: ::std::os::raw::c_uint = 9;
pub const kCFStringEncodingMacGurmukhi: ::std::os::raw::c_uint = 10;
pub const kCFStringEncodingMacGujarati: ::std::os::raw::c_uint = 11;
pub const kCFStringEncodingMacOriya: ::std::os::raw::c_uint = 12;
pub const kCFStringEncodingMacBengali: ::std::os::raw::c_uint = 13;
pub const kCFStringEncodingMacTamil: ::std::os::raw::c_uint = 14;
pub const kCFStringEncodingMacTelugu: ::std::os::raw::c_uint = 15;
pub const kCFStringEncodingMacKannada: ::std::os::raw::c_uint = 16;
pub const kCFStringEncodingMacMalayalam: ::std::os::raw::c_uint = 17;
pub const kCFStringEncodingMacSinhalese: ::std::os::raw::c_uint = 18;
pub const kCFStringEncodingMacBurmese: ::std::os::raw::c_uint = 19;
pub const kCFStringEncodingMacKhmer: ::std::os::raw::c_uint = 20;
pub const kCFStringEncodingMacThai: ::std::os::raw::c_uint = 21;
pub const kCFStringEncodingMacLaotian: ::std::os::raw::c_uint = 22;
pub const kCFStringEncodingMacGeorgian: ::std::os::raw::c_uint = 23;
pub const kCFStringEncodingMacArmenian: ::std::os::raw::c_uint = 24;
pub const kCFStringEncodingMacChineseSimp: ::std::os::raw::c_uint = 25;
pub const kCFStringEncodingMacTibetan: ::std::os::raw::c_uint = 26;
pub const kCFStringEncodingMacMongolian: ::std::os::raw::c_uint = 27;
pub const kCFStringEncodingMacEthiopic: ::std::os::raw::c_uint = 28;
pub const kCFStringEncodingMacCentralEurRoman: ::std::os::raw::c_uint = 29;
pub const kCFStringEncodingMacVietnamese: ::std::os::raw::c_uint = 30;
pub const kCFStringEncodingMacExtArabic: ::std::os::raw::c_uint = 31;
pub const kCFStringEncodingMacSymbol: ::std::os::raw::c_uint = 33;
pub const kCFStringEncodingMacDingbats: ::std::os::raw::c_uint = 34;
pub const kCFStringEncodingMacTurkish: ::std::os::raw::c_uint = 35;
pub const kCFStringEncodingMacCroatian: ::std::os::raw::c_uint = 36;
pub const kCFStringEncodingMacIcelandic: ::std::os::raw::c_uint = 37;
pub const kCFStringEncodingMacRomanian: ::std::os::raw::c_uint = 38;
pub const kCFStringEncodingMacCeltic: ::std::os::raw::c_uint = 39;
pub const kCFStringEncodingMacGaelic: ::std::os::raw::c_uint = 40;
pub const kCFStringEncodingMacFarsi: ::std::os::raw::c_uint = 140;
pub const kCFStringEncodingMacUkrainian: ::std::os::raw::c_uint = 152;
pub const kCFStringEncodingMacInuit: ::std::os::raw::c_uint = 236;
pub const kCFStringEncodingMacVT100: ::std::os::raw::c_uint = 252;
pub const kCFStringEncodingMacHFS: ::std::os::raw::c_uint = 255;
pub const kCFStringEncodingISOLatin2: ::std::os::raw::c_uint = 514;
pub const kCFStringEncodingISOLatin3: ::std::os::raw::c_uint = 515;
pub const kCFStringEncodingISOLatin4: ::std::os::raw::c_uint = 516;
pub const kCFStringEncodingISOLatinCyrillic: ::std::os::raw::c_uint = 517;
pub const kCFStringEncodingISOLatinArabic: ::std::os::raw::c_uint = 518;
pub const kCFStringEncodingISOLatinGreek: ::std::os::raw::c_uint = 519;
pub const kCFStringEncodingISOLatinHebrew: ::std::os::raw::c_uint = 520;
pub const kCFStringEncodingISOLatin5: ::std::os::raw::c_uint = 521;
pub const kCFStringEncodingISOLatin6: ::std::os::raw::c_uint = 522;
pub const kCFStringEncodingISOLatinThai: ::std::os::raw::c_uint = 523;
pub const kCFStringEncodingISOLatin7: ::std::os::raw::c_uint = 525;
pub const kCFStringEncodingISOLatin8: ::std::os::raw::c_uint = 526;
pub const kCFStringEncodingISOLatin9: ::std::os::raw::c_uint = 527;
pub const kCFStringEncodingISOLatin10: ::std::os::raw::c_uint = 528;
pub const kCFStringEncodingDOSLatinUS: ::std::os::raw::c_uint = 1024;
pub const kCFStringEncodingDOSGreek: ::std::os::raw::c_uint = 1029;
pub const kCFStringEncodingDOSBalticRim: ::std::os::raw::c_uint = 1030;
pub const kCFStringEncodingDOSLatin1: ::std::os::raw::c_uint = 1040;
pub const kCFStringEncodingDOSGreek1: ::std::os::raw::c_uint = 1041;
pub const kCFStringEncodingDOSLatin2: ::std::os::raw::c_uint = 1042;
pub const kCFStringEncodingDOSCyrillic: ::std::os::raw::c_uint = 1043;
pub const kCFStringEncodingDOSTurkish: ::std::os::raw::c_uint = 1044;
pub const kCFStringEncodingDOSPortuguese: ::std::os::raw::c_uint = 1045;
pub const kCFStringEncodingDOSIcelandic: ::std::os::raw::c_uint = 1046;
pub const kCFStringEncodingDOSHebrew: ::std::os::raw::c_uint = 1047;
pub const kCFStringEncodingDOSCanadianFrench: ::std::os::raw::c_uint = 1048;
pub const kCFStringEncodingDOSArabic: ::std::os::raw::c_uint = 1049;
pub const kCFStringEncodingDOSNordic: ::std::os::raw::c_uint = 1050;
pub const kCFStringEncodingDOSRussian: ::std::os::raw::c_uint = 1051;
pub const kCFStringEncodingDOSGreek2: ::std::os::raw::c_uint = 1052;
pub const kCFStringEncodingDOSThai: ::std::os::raw::c_uint = 1053;
pub const kCFStringEncodingDOSJapanese: ::std::os::raw::c_uint = 1056;
pub const kCFStringEncodingDOSChineseSimplif: ::std::os::raw::c_uint = 1057;
pub const kCFStringEncodingDOSKorean: ::std::os::raw::c_uint = 1058;
pub const kCFStringEncodingDOSChineseTrad: ::std::os::raw::c_uint = 1059;
pub const kCFStringEncodingWindowsLatin2: ::std::os::raw::c_uint = 1281;
pub const kCFStringEncodingWindowsCyrillic: ::std::os::raw::c_uint = 1282;
pub const kCFStringEncodingWindowsGreek: ::std::os::raw::c_uint = 1283;
pub const kCFStringEncodingWindowsLatin5: ::std::os::raw::c_uint = 1284;
pub const kCFStringEncodingWindowsHebrew: ::std::os::raw::c_uint = 1285;
pub const kCFStringEncodingWindowsArabic: ::std::os::raw::c_uint = 1286;
pub const kCFStringEncodingWindowsBalticRim: ::std::os::raw::c_uint = 1287;
pub const kCFStringEncodingWindowsVietnamese: ::std::os::raw::c_uint = 1288;
pub const kCFStringEncodingWindowsKoreanJohab: ::std::os::raw::c_uint = 1296;
pub const kCFStringEncodingANSEL: ::std::os::raw::c_uint = 1537;
pub const kCFStringEncodingJIS_X0201_76: ::std::os::raw::c_uint = 1568;
pub const kCFStringEncodingJIS_X0208_83: ::std::os::raw::c_uint = 1569;
pub const kCFStringEncodingJIS_X0208_90: ::std::os::raw::c_uint = 1570;
pub const kCFStringEncodingJIS_X0212_90: ::std::os::raw::c_uint = 1571;
pub const kCFStringEncodingJIS_C6226_78: ::std::os::raw::c_uint = 1572;
pub const kCFStringEncodingShiftJIS_X0213: ::std::os::raw::c_uint = 1576;
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen: ::std::os::raw::c_uint = 1577;
pub const kCFStringEncodingGB_2312_80: ::std::os::raw::c_uint = 1584;
pub const kCFStringEncodingGBK_95: ::std::os::raw::c_uint = 1585;
pub const kCFStringEncodingGB_18030_2000: ::std::os::raw::c_uint = 1586;
pub const kCFStringEncodingKSC_5601_87: ::std::os::raw::c_uint = 1600;
pub const kCFStringEncodingKSC_5601_92_Johab: ::std::os::raw::c_uint = 1601;
pub const kCFStringEncodingCNS_11643_92_P1: ::std::os::raw::c_uint = 1617;
pub const kCFStringEncodingCNS_11643_92_P2: ::std::os::raw::c_uint = 1618;
pub const kCFStringEncodingCNS_11643_92_P3: ::std::os::raw::c_uint = 1619;
pub const kCFStringEncodingISO_2022_JP: ::std::os::raw::c_uint = 2080;
pub const kCFStringEncodingISO_2022_JP_2: ::std::os::raw::c_uint = 2081;
pub const kCFStringEncodingISO_2022_JP_1: ::std::os::raw::c_uint = 2082;
pub const kCFStringEncodingISO_2022_JP_3: ::std::os::raw::c_uint = 2083;
pub const kCFStringEncodingISO_2022_CN: ::std::os::raw::c_uint = 2096;
pub const kCFStringEncodingISO_2022_CN_EXT: ::std::os::raw::c_uint = 2097;
pub const kCFStringEncodingISO_2022_KR: ::std::os::raw::c_uint = 2112;
pub const kCFStringEncodingEUC_JP: ::std::os::raw::c_uint = 2336;
pub const kCFStringEncodingEUC_CN: ::std::os::raw::c_uint = 2352;
pub const kCFStringEncodingEUC_TW: ::std::os::raw::c_uint = 2353;
pub const kCFStringEncodingEUC_KR: ::std::os::raw::c_uint = 2368;
pub const kCFStringEncodingShiftJIS: ::std::os::raw::c_uint = 2561;
pub const kCFStringEncodingKOI8_R: ::std::os::raw::c_uint = 2562;
pub const kCFStringEncodingBig5: ::std::os::raw::c_uint = 2563;
pub const kCFStringEncodingMacRomanLatin1: ::std::os::raw::c_uint = 2564;
pub const kCFStringEncodingHZ_GB_2312: ::std::os::raw::c_uint = 2565;
pub const kCFStringEncodingBig5_HKSCS_1999: ::std::os::raw::c_uint = 2566;
pub const kCFStringEncodingVISCII: ::std::os::raw::c_uint = 2567;
pub const kCFStringEncodingKOI8_U: ::std::os::raw::c_uint = 2568;
pub const kCFStringEncodingBig5_E: ::std::os::raw::c_uint = 2569;
pub const kCFStringEncodingNextStepJapanese: ::std::os::raw::c_uint = 2818;
pub const kCFStringEncodingEBCDIC_US: ::std::os::raw::c_uint = 3073;
pub const kCFStringEncodingEBCDIC_CP037: ::std::os::raw::c_uint = 3074;
pub const kCFStringEncodingUTF7: ::std::os::raw::c_uint = 67109120;
pub const kCFStringEncodingUTF7_IMAP: ::std::os::raw::c_uint = 2576;
pub const kCFStringEncodingShiftJIS_X0213_00: ::std::os::raw::c_uint = 1576;
pub type _bindgen_ty_60 = ::std::os::raw::c_uint;
pub type CFTreeRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFTreeReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFTreeCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFTreeContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFTreeRetainCallBack,
    pub release: CFTreeReleaseCallBack,
    pub copyDescription: CFTreeCopyDescriptionCallBack,
}
#[test]
fn bindgen_test_layout_CFTreeContext() {
    assert_eq!(
        ::std::mem::size_of::<CFTreeContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFTreeContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFTreeContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFTreeContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFTreeContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFTreeContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFTreeContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFTreeContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFTreeContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFTreeContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFTreeContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFTreeContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFTreeContext>())).copyDescription as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFTreeContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFTreeContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFTreeApplierFunction = ::std::option::Option<
    unsafe extern "C" fn(
        value: *const ::std::os::raw::c_void,
        context: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFTree {
    _unused: [u8; 0],
}
pub type CFTreeRef = *mut __CFTree;
extern "C" {
    pub fn CFTreeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFTreeCreate(allocator: CFAllocatorRef, context: *const CFTreeContext) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetParent(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetNextSibling(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetFirstChild(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetContext(tree: CFTreeRef, context: *mut CFTreeContext);
}
extern "C" {
    pub fn CFTreeGetChildCount(tree: CFTreeRef) -> CFIndex;
}
extern "C" {
    pub fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeGetChildren(tree: CFTreeRef, children: *mut CFTreeRef);
}
extern "C" {
    pub fn CFTreeApplyFunctionToChildren(
        tree: CFTreeRef,
        applier: CFTreeApplierFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFTreeFindRoot(tree: CFTreeRef) -> CFTreeRef;
}
extern "C" {
    pub fn CFTreeSetContext(tree: CFTreeRef, context: *const CFTreeContext);
}
extern "C" {
    pub fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef);
}
extern "C" {
    pub fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemove(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeRemoveAllChildren(tree: CFTreeRef);
}
extern "C" {
    pub fn CFTreeSortChildren(
        tree: CFTreeRef,
        comparator: CFComparatorFunction,
        context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFURLCreateDataAndPropertiesFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        resourceData: *mut CFDataRef,
        properties: *mut CFDictionaryRef,
        desiredProperties: CFArrayRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLWriteDataAndPropertiesToResource(
        url: CFURLRef,
        dataToWrite: CFDataRef,
        propertiesToWrite: CFDictionaryRef,
        errorCode: *mut SInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFURLDestroyResource(url: CFURLRef, errorCode: *mut SInt32) -> Boolean;
}
extern "C" {
    pub fn CFURLCreatePropertyFromResource(
        alloc: CFAllocatorRef,
        url: CFURLRef,
        property: CFStringRef,
        errorCode: *mut SInt32,
    ) -> CFTypeRef;
}
pub type CFURLError = CFIndex;
pub const kCFURLUnknownError: ::std::os::raw::c_int = -10;
pub const kCFURLUnknownSchemeError: ::std::os::raw::c_int = -11;
pub const kCFURLResourceNotFoundError: ::std::os::raw::c_int = -12;
pub const kCFURLResourceAccessViolationError: ::std::os::raw::c_int = -13;
pub const kCFURLRemoteHostUnavailableError: ::std::os::raw::c_int = -14;
pub const kCFURLImproperArgumentsError: ::std::os::raw::c_int = -15;
pub const kCFURLUnknownPropertyKeyError: ::std::os::raw::c_int = -16;
pub const kCFURLPropertyKeyUnavailableError: ::std::os::raw::c_int = -17;
pub const kCFURLTimeoutError: ::std::os::raw::c_int = -18;
pub type _bindgen_ty_61 = ::std::os::raw::c_int;
extern "C" {
    pub static kCFURLFileExists: CFStringRef;
}
extern "C" {
    pub static kCFURLFileDirectoryContents: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLength: CFStringRef;
}
extern "C" {
    pub static kCFURLFileLastModificationTime: CFStringRef;
}
extern "C" {
    pub static kCFURLFilePOSIXMode: CFStringRef;
}
extern "C" {
    pub static kCFURLFileOwnerID: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusCode: CFStringRef;
}
extern "C" {
    pub static kCFURLHTTPStatusLine: CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUUID {
    _unused: [u8; 0],
}
pub type CFUUIDRef = *const __CFUUID;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFUUIDBytes {
    pub byte0: UInt8,
    pub byte1: UInt8,
    pub byte2: UInt8,
    pub byte3: UInt8,
    pub byte4: UInt8,
    pub byte5: UInt8,
    pub byte6: UInt8,
    pub byte7: UInt8,
    pub byte8: UInt8,
    pub byte9: UInt8,
    pub byte10: UInt8,
    pub byte11: UInt8,
    pub byte12: UInt8,
    pub byte13: UInt8,
    pub byte14: UInt8,
    pub byte15: UInt8,
}
#[test]
fn bindgen_test_layout_CFUUIDBytes() {
    assert_eq!(
        ::std::mem::size_of::<CFUUIDBytes>(),
        16usize,
        concat!("Size of: ", stringify!(CFUUIDBytes))
    );
    assert_eq!(
        ::std::mem::align_of::<CFUUIDBytes>(),
        1usize,
        concat!("Alignment of ", stringify!(CFUUIDBytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte3 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte4 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte5 as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte6 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte7 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte8 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte9 as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte10 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte11 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte12 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte13 as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte14 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte14)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFUUIDBytes>())).byte15 as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(CFUUIDBytes),
            "::",
            stringify!(byte15)
        )
    );
}
extern "C" {
    pub fn CFUUIDGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUUIDCreate(alloc: CFAllocatorRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) -> CFStringRef;
}
extern "C" {
    pub fn CFUUIDGetConstantUUIDWithBytes(
        alloc: CFAllocatorRef,
        byte0: UInt8,
        byte1: UInt8,
        byte2: UInt8,
        byte3: UInt8,
        byte4: UInt8,
        byte5: UInt8,
        byte6: UInt8,
        byte7: UInt8,
        byte8: UInt8,
        byte9: UInt8,
        byte10: UInt8,
        byte11: UInt8,
        byte12: UInt8,
        byte13: UInt8,
        byte14: UInt8,
        byte15: UInt8,
    ) -> CFUUIDRef;
}
extern "C" {
    pub fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) -> CFUUIDBytes;
}
extern "C" {
    pub fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) -> CFUUIDRef;
}
extern "C" {
    pub fn CFCopyHomeDirectoryURL() -> CFURLRef;
}
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFBundle {
    _unused: [u8; 0],
}
pub type CFBundleRef = *mut __CFBundle;
pub type CFPlugInRef = *mut __CFBundle;
extern "C" {
    pub static kCFBundleInfoDictionaryVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleExecutableKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleIdentifierKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleVersionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleDevelopmentRegionKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleNameKey: CFStringRef;
}
extern "C" {
    pub static kCFBundleLocalizationsKey: CFStringRef;
}
extern "C" {
    pub fn CFBundleGetMainBundle() -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleGetAllBundles() -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFBundleCreateBundlesFromDirectory(
        allocator: CFAllocatorRef,
        directoryURL: CFURLRef,
        bundleType: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef)
        -> CFTypeRef;
}
extern "C" {
    pub fn CFBundleGetInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfo(
        bundle: CFBundleRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    );
}
extern "C" {
    pub fn CFBundleGetIdentifier(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleGetVersionNumber(bundle: CFBundleRef) -> UInt32;
}
extern "C" {
    pub fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleGetPackageInfoInDirectory(
        url: CFURLRef,
        packageType: *mut UInt32,
        packageCreator: *mut UInt32,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleCopyResourceURL(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfType(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizedString(
        bundle: CFBundleRef,
        key: CFStringRef,
        value: CFStringRef,
        tableName: CFStringRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLInDirectory(
        bundleURL: CFURLRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeInDirectory(
        bundleURL: CFURLRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForPreferences(
        locArray: CFArrayRef,
        prefArray: CFArrayRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLForLocalization(
        bundle: CFBundleRef,
        resourceName: CFStringRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleCopyResourceURLsOfTypeForLocalization(
        bundle: CFBundleRef,
        resourceType: CFStringRef,
        subDirName: CFStringRef,
        localizationName: CFStringRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFBundleCopyLocalizationsForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundleCopyExecutableURL(bundle: CFBundleRef) -> CFURLRef;
}
pub const kCFBundleExecutableArchitectureI386: ::std::os::raw::c_uint = 7;
pub const kCFBundleExecutableArchitecturePPC: ::std::os::raw::c_uint = 18;
pub const kCFBundleExecutableArchitectureX86_64: ::std::os::raw::c_uint = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: ::std::os::raw::c_uint = 16777234;
pub const kCFBundleExecutableArchitectureARM64: ::std::os::raw::c_uint = 16777228;
pub type _bindgen_ty_62 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFBundlePreflightExecutable(bundle: CFBundleRef, error: *mut CFErrorRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutableAndReturnError(
        bundle: CFBundleRef,
        error: *mut CFErrorRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFBundleLoadExecutable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleUnloadExecutable(bundle: CFBundleRef);
}
extern "C" {
    pub fn CFBundleGetFunctionPointerForName(
        bundle: CFBundleRef,
        functionName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetFunctionPointersForNames(
        bundle: CFBundleRef,
        functionNames: CFArrayRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleGetDataPointerForName(
        bundle: CFBundleRef,
        symbolName: CFStringRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFBundleGetDataPointersForNames(
        bundle: CFBundleRef,
        symbolNames: CFArrayRef,
        stbl: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn CFBundleCopyAuxiliaryExecutableURL(
        bundle: CFBundleRef,
        executableName: CFStringRef,
    ) -> CFURLRef;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) -> Boolean;
}
extern "C" {
    pub fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) -> Boolean;
}
extern "C" {
    pub fn CFBundleGetPlugIn(bundle: CFBundleRef) -> CFPlugInRef;
}
pub type CFBundleRefNum = ::std::os::raw::c_int;
extern "C" {
    pub fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) -> CFBundleRefNum;
}
extern "C" {
    pub fn CFBundleOpenBundleResourceFiles(
        bundle: CFBundleRef,
        refNum: *mut CFBundleRefNum,
        localizedRefNum: *mut CFBundleRefNum,
    ) -> SInt32;
}
extern "C" {
    pub fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMessagePort {
    _unused: [u8; 0],
}
pub type CFMessagePortRef = *mut __CFMessagePort;
pub const kCFMessagePortSuccess: ::std::os::raw::c_int = 0;
pub const kCFMessagePortSendTimeout: ::std::os::raw::c_int = -1;
pub const kCFMessagePortReceiveTimeout: ::std::os::raw::c_int = -2;
pub const kCFMessagePortIsInvalid: ::std::os::raw::c_int = -3;
pub const kCFMessagePortTransportError: ::std::os::raw::c_int = -4;
pub const kCFMessagePortBecameInvalidError: ::std::os::raw::c_int = -5;
pub type _bindgen_ty_63 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMessagePortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFMessagePortContext() {
    assert_eq!(
        ::std::mem::size_of::<CFMessagePortContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFMessagePortContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFMessagePortContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFMessagePortContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMessagePortContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMessagePortContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMessagePortContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMessagePortContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMessagePortContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMessagePortContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMessagePortContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMessagePortContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFMessagePortContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMessagePortContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFMessagePortContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFMessagePortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        local: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFMessagePortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(ms: CFMessagePortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMessagePortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMessagePortCreateLocal(
        allocator: CFAllocatorRef,
        name: CFStringRef,
        callout: CFMessagePortCallBack,
        context: *mut CFMessagePortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortCreateRemote(
        allocator: CFAllocatorRef,
        name: CFStringRef,
    ) -> CFMessagePortRef;
}
extern "C" {
    pub fn CFMessagePortIsRemote(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetName(ms: CFMessagePortRef) -> CFStringRef;
}
extern "C" {
    pub fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetContext(ms: CFMessagePortRef, context: *mut CFMessagePortContext);
}
extern "C" {
    pub fn CFMessagePortInvalidate(ms: CFMessagePortRef);
}
extern "C" {
    pub fn CFMessagePortIsValid(ms: CFMessagePortRef) -> Boolean;
}
extern "C" {
    pub fn CFMessagePortGetInvalidationCallBack(
        ms: CFMessagePortRef,
    ) -> CFMessagePortInvalidationCallBack;
}
extern "C" {
    pub fn CFMessagePortSetInvalidationCallBack(
        ms: CFMessagePortRef,
        callout: CFMessagePortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMessagePortSendRequest(
        remote: CFMessagePortRef,
        msgid: SInt32,
        data: CFDataRef,
        sendTimeout: CFTimeInterval,
        rcvTimeout: CFTimeInterval,
        replyMode: CFStringRef,
        returnData: *mut CFDataRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFMessagePortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        local: CFMessagePortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: dispatch_queue_t);
}
extern "C" {
    pub static kCFPlugInDynamicRegistrationKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInUnloadFunctionKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInFactoriesKey: CFStringRef;
}
extern "C" {
    pub static kCFPlugInTypesKey: CFStringRef;
}
pub type CFPlugInDynamicRegisterFunction =
    ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInUnloadFunction = ::std::option::Option<unsafe extern "C" fn(plugIn: CFPlugInRef)>;
pub type CFPlugInFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: CFAllocatorRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn CFPlugInGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) -> CFPlugInRef;
}
extern "C" {
    pub fn CFPlugInGetBundle(plugIn: CFPlugInRef) -> CFBundleRef;
}
extern "C" {
    pub fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean);
}
extern "C" {
    pub fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(
        typeUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
    ) -> CFArrayRef;
}
extern "C" {
    pub fn CFPlugInInstanceCreate(
        allocator: CFAllocatorRef,
        factoryUUID: CFUUIDRef,
        typeUUID: CFUUIDRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunction(
        factoryUUID: CFUUIDRef,
        func: CFPlugInFactoryFunction,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterFactoryFunctionByName(
        factoryUUID: CFUUIDRef,
        plugIn: CFPlugInRef,
        functionName: CFStringRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef);
}
extern "C" {
    pub fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFPlugInInstance {
    _unused: [u8; 0],
}
pub type CFPlugInInstanceRef = *mut __CFPlugInInstance;
pub type CFPlugInInstanceGetInterfaceFunction = ::std::option::Option<
    unsafe extern "C" fn(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
pub type CFPlugInInstanceDeallocateInstanceDataFunction =
    ::std::option::Option<unsafe extern "C" fn(instanceData: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn CFPlugInInstanceGetInterfaceFunctionTable(
        instance: CFPlugInInstanceRef,
        interfaceName: CFStringRef,
        ftbl: *mut *mut ::std::os::raw::c_void,
    ) -> Boolean;
}
extern "C" {
    pub fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) -> CFStringRef;
}
extern "C" {
    pub fn CFPlugInInstanceGetInstanceData(
        instance: CFPlugInInstanceRef,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFPlugInInstanceGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFPlugInInstanceCreateWithInstanceDataSize(
        allocator: CFAllocatorRef,
        instanceDataSize: CFIndex,
        deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction,
        factoryName: CFStringRef,
        getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction,
    ) -> CFPlugInInstanceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFMachPort {
    _unused: [u8; 0],
}
pub type CFMachPortRef = *mut __CFMachPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFMachPortContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFMachPortContext() {
    assert_eq!(
        ::std::mem::size_of::<CFMachPortContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFMachPortContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFMachPortContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFMachPortContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMachPortContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMachPortContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMachPortContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMachPortContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMachPortContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMachPortContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFMachPortContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMachPortContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFMachPortContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFMachPortContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFMachPortContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFMachPortCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        port: CFMachPortRef,
        msg: *mut ::std::os::raw::c_void,
        size: CFIndex,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFMachPortInvalidationCallBack = ::std::option::Option<
    unsafe extern "C" fn(port: CFMachPortRef, info: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn CFMachPortGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFMachPortCreate(
        allocator: CFAllocatorRef,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortCreateWithPort(
        allocator: CFAllocatorRef,
        portNum: mach_port_t,
        callout: CFMachPortCallBack,
        context: *mut CFMachPortContext,
        shouldFreeInfo: *mut Boolean,
    ) -> CFMachPortRef;
}
extern "C" {
    pub fn CFMachPortGetPort(port: CFMachPortRef) -> mach_port_t;
}
extern "C" {
    pub fn CFMachPortGetContext(port: CFMachPortRef, context: *mut CFMachPortContext);
}
extern "C" {
    pub fn CFMachPortInvalidate(port: CFMachPortRef);
}
extern "C" {
    pub fn CFMachPortIsValid(port: CFMachPortRef) -> Boolean;
}
extern "C" {
    pub fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef)
        -> CFMachPortInvalidationCallBack;
}
extern "C" {
    pub fn CFMachPortSetInvalidationCallBack(
        port: CFMachPortRef,
        callout: CFMachPortInvalidationCallBack,
    );
}
extern "C" {
    pub fn CFMachPortCreateRunLoopSource(
        allocator: CFAllocatorRef,
        port: CFMachPortRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFAttributedString {
    _unused: [u8; 0],
}
pub type CFAttributedStringRef = *const __CFAttributedString;
pub type CFMutableAttributedStringRef = *mut __CFAttributedString;
extern "C" {
    pub fn CFAttributedStringGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFAttributedStringCreate(
        alloc: CFAllocatorRef,
        str_: CFStringRef,
        attributes: CFDictionaryRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateWithSubstring(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
        range: CFRange,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateCopy(
        alloc: CFAllocatorRef,
        aStr: CFAttributedStringRef,
    ) -> CFAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetString(aStr: CFAttributedStringRef) -> CFStringRef;
}
extern "C" {
    pub fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) -> CFIndex;
}
extern "C" {
    pub fn CFAttributedStringGetAttributes(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        effectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttribute(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        effectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributesAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFAttributedStringGetAttributeAndLongestEffectiveRange(
        aStr: CFAttributedStringRef,
        loc: CFIndex,
        attrName: CFStringRef,
        inRange: CFRange,
        longestEffectiveRange: *mut CFRange,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutableCopy(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
        aStr: CFAttributedStringRef,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringCreateMutable(
        alloc: CFAllocatorRef,
        maxLength: CFIndex,
    ) -> CFMutableAttributedStringRef;
}
extern "C" {
    pub fn CFAttributedStringReplaceString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringGetMutableString(
        aStr: CFMutableAttributedStringRef,
    ) -> CFMutableStringRef;
}
extern "C" {
    pub fn CFAttributedStringSetAttributes(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFDictionaryRef,
        clearOtherAttributes: Boolean,
    );
}
extern "C" {
    pub fn CFAttributedStringSetAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
        value: CFTypeRef,
    );
}
extern "C" {
    pub fn CFAttributedStringRemoveAttribute(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        attrName: CFStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringReplaceAttributedString(
        aStr: CFMutableAttributedStringRef,
        range: CFRange,
        replacement: CFAttributedStringRef,
    );
}
extern "C" {
    pub fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef);
}
extern "C" {
    pub fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFURLEnumerator {
    _unused: [u8; 0],
}
pub type CFURLEnumeratorRef = *const __CFURLEnumerator;
extern "C" {
    pub fn CFURLEnumeratorGetTypeID() -> CFTypeID;
}
pub type CFURLEnumeratorOptions = CFOptionFlags;
pub const kCFURLEnumeratorDefaultBehavior: ::std::os::raw::c_uint = 0;
pub const kCFURLEnumeratorDescendRecursively: ::std::os::raw::c_uint = 1;
pub const kCFURLEnumeratorSkipInvisibles: ::std::os::raw::c_uint = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: ::std::os::raw::c_uint = 4;
pub const kCFURLEnumeratorSkipPackageContents: ::std::os::raw::c_uint = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: ::std::os::raw::c_uint = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: ::std::os::raw::c_uint = 32;
pub const kCFURLEnumeratorGenerateRelativePathURLs: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_64 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFURLEnumeratorCreateForDirectoryURL(
        alloc: CFAllocatorRef,
        directoryURL: CFURLRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
extern "C" {
    pub fn CFURLEnumeratorCreateForMountedVolumes(
        alloc: CFAllocatorRef,
        option: CFURLEnumeratorOptions,
        propertyKeys: CFArrayRef,
    ) -> CFURLEnumeratorRef;
}
pub type CFURLEnumeratorResult = CFIndex;
pub const kCFURLEnumeratorSuccess: ::std::os::raw::c_uint = 1;
pub const kCFURLEnumeratorEnd: ::std::os::raw::c_uint = 2;
pub const kCFURLEnumeratorError: ::std::os::raw::c_uint = 3;
pub const kCFURLEnumeratorDirectoryPostOrderSuccess: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_65 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFURLEnumeratorGetNextURL(
        enumerator: CFURLEnumeratorRef,
        url: *mut CFURLRef,
        error: *mut CFErrorRef,
    ) -> CFURLEnumeratorResult;
}
extern "C" {
    pub fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef);
}
extern "C" {
    pub fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) -> CFIndex;
}
extern "C" {
    pub fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) -> Boolean;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union guid_t {
    pub g_guid: [::std::os::raw::c_uchar; 16usize],
    pub g_guid_asint: [::std::os::raw::c_uint; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_guid_t() {
    assert_eq!(
        ::std::mem::size_of::<guid_t>(),
        16usize,
        concat!("Size of: ", stringify!(guid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<guid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(guid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<guid_t>())).g_guid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(guid_t),
            "::",
            stringify!(g_guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<guid_t>())).g_guid_asint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(guid_t),
            "::",
            stringify!(g_guid_asint)
        )
    );
}
impl Default for guid_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ntsid_t {
    pub sid_kind: u_int8_t,
    pub sid_authcount: u_int8_t,
    pub sid_authority: [u_int8_t; 6usize],
    pub sid_authorities: [u_int32_t; 16usize],
}
#[test]
fn bindgen_test_layout_ntsid_t() {
    assert_eq!(
        ::std::mem::size_of::<ntsid_t>(),
        72usize,
        concat!("Size of: ", stringify!(ntsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ntsid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(ntsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ntsid_t>())).sid_kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ntsid_t),
            "::",
            stringify!(sid_kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ntsid_t>())).sid_authcount as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ntsid_t),
            "::",
            stringify!(sid_authcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ntsid_t>())).sid_authority as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ntsid_t),
            "::",
            stringify!(sid_authority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ntsid_t>())).sid_authorities as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ntsid_t),
            "::",
            stringify!(sid_authorities)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_identity_extlookup {
    pub el_seqno: u_int32_t,
    pub el_result: u_int32_t,
    pub el_flags: u_int32_t,
    pub el_info_pid: __darwin_pid_t,
    pub el_extend: u_int64_t,
    pub el_info_reserved_1: u_int32_t,
    pub el_uid: uid_t,
    pub el_uguid: guid_t,
    pub el_uguid_valid: u_int32_t,
    pub el_usid: ntsid_t,
    pub el_usid_valid: u_int32_t,
    pub el_gid: gid_t,
    pub el_gguid: guid_t,
    pub el_gguid_valid: u_int32_t,
    pub el_gsid: ntsid_t,
    pub el_gsid_valid: u_int32_t,
    pub el_member_valid: u_int32_t,
    pub el_sup_grp_cnt: u_int32_t,
    pub el_sup_groups: [gid_t; 16usize],
}
#[test]
fn bindgen_test_layout_kauth_identity_extlookup() {
    assert_eq!(
        ::std::mem::size_of::<kauth_identity_extlookup>(),
        304usize,
        concat!("Size of: ", stringify!(kauth_identity_extlookup))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_identity_extlookup>(),
        8usize,
        concat!("Alignment of ", stringify!(kauth_identity_extlookup))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_seqno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_seqno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_result as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_info_pid as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_info_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_extend as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_extend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_info_reserved_1 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_info_reserved_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_uguid as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_uguid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_uguid_valid as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_uguid_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_usid as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_usid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_usid_valid as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_usid_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_gid as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_gguid as *const _ as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gguid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_gguid_valid as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gguid_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_gsid as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gsid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_gsid_valid as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_gsid_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_member_valid as *const _
                as usize
        },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_member_valid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_sup_grp_cnt as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_sup_grp_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_identity_extlookup>())).el_sup_groups as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_identity_extlookup),
            "::",
            stringify!(el_sup_groups)
        )
    );
}
impl Default for kauth_identity_extlookup {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct kauth_cache_sizes {
    pub kcs_group_size: u_int32_t,
    pub kcs_id_size: u_int32_t,
}
#[test]
fn bindgen_test_layout_kauth_cache_sizes() {
    assert_eq!(
        ::std::mem::size_of::<kauth_cache_sizes>(),
        8usize,
        concat!("Size of: ", stringify!(kauth_cache_sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_cache_sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_cache_sizes))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<kauth_cache_sizes>())).kcs_group_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_cache_sizes),
            "::",
            stringify!(kcs_group_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_cache_sizes>())).kcs_id_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_cache_sizes),
            "::",
            stringify!(kcs_id_size)
        )
    );
}
pub type kauth_ace_rights_t = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_ace {
    pub ace_applicable: guid_t,
    pub ace_flags: u_int32_t,
    pub ace_rights: kauth_ace_rights_t,
}
#[test]
fn bindgen_test_layout_kauth_ace() {
    assert_eq!(
        ::std::mem::size_of::<kauth_ace>(),
        24usize,
        concat!("Size of: ", stringify!(kauth_ace))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_ace>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_ace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_ace>())).ace_applicable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_ace),
            "::",
            stringify!(ace_applicable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_ace>())).ace_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_ace),
            "::",
            stringify!(ace_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_ace>())).ace_rights as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_ace),
            "::",
            stringify!(ace_rights)
        )
    );
}
impl Default for kauth_ace {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type kauth_ace_t = *mut kauth_ace;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_acl {
    pub acl_entrycount: u_int32_t,
    pub acl_flags: u_int32_t,
    pub acl_ace: [kauth_ace; 1usize],
}
#[test]
fn bindgen_test_layout_kauth_acl() {
    assert_eq!(
        ::std::mem::size_of::<kauth_acl>(),
        32usize,
        concat!("Size of: ", stringify!(kauth_acl))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_acl>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_acl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_acl>())).acl_entrycount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_acl),
            "::",
            stringify!(acl_entrycount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_acl>())).acl_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_acl),
            "::",
            stringify!(acl_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_acl>())).acl_ace as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_acl),
            "::",
            stringify!(acl_ace)
        )
    );
}
impl Default for kauth_acl {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type kauth_acl_t = *mut kauth_acl;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kauth_filesec {
    pub fsec_magic: u_int32_t,
    pub fsec_owner: guid_t,
    pub fsec_group: guid_t,
    pub fsec_acl: kauth_acl,
}
#[test]
fn bindgen_test_layout_kauth_filesec() {
    assert_eq!(
        ::std::mem::size_of::<kauth_filesec>(),
        68usize,
        concat!("Size of: ", stringify!(kauth_filesec))
    );
    assert_eq!(
        ::std::mem::align_of::<kauth_filesec>(),
        4usize,
        concat!("Alignment of ", stringify!(kauth_filesec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_filesec>())).fsec_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_filesec),
            "::",
            stringify!(fsec_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_filesec>())).fsec_owner as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_filesec),
            "::",
            stringify!(fsec_owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_filesec>())).fsec_group as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_filesec),
            "::",
            stringify!(fsec_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kauth_filesec>())).fsec_acl as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(kauth_filesec),
            "::",
            stringify!(fsec_acl)
        )
    );
}
impl Default for kauth_filesec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type kauth_filesec_t = *mut kauth_filesec;
pub const acl_perm_t_ACL_READ_DATA: acl_perm_t = 2;
pub const acl_perm_t_ACL_LIST_DIRECTORY: acl_perm_t = 2;
pub const acl_perm_t_ACL_WRITE_DATA: acl_perm_t = 4;
pub const acl_perm_t_ACL_ADD_FILE: acl_perm_t = 4;
pub const acl_perm_t_ACL_EXECUTE: acl_perm_t = 8;
pub const acl_perm_t_ACL_SEARCH: acl_perm_t = 8;
pub const acl_perm_t_ACL_DELETE: acl_perm_t = 16;
pub const acl_perm_t_ACL_APPEND_DATA: acl_perm_t = 32;
pub const acl_perm_t_ACL_ADD_SUBDIRECTORY: acl_perm_t = 32;
pub const acl_perm_t_ACL_DELETE_CHILD: acl_perm_t = 64;
pub const acl_perm_t_ACL_READ_ATTRIBUTES: acl_perm_t = 128;
pub const acl_perm_t_ACL_WRITE_ATTRIBUTES: acl_perm_t = 256;
pub const acl_perm_t_ACL_READ_EXTATTRIBUTES: acl_perm_t = 512;
pub const acl_perm_t_ACL_WRITE_EXTATTRIBUTES: acl_perm_t = 1024;
pub const acl_perm_t_ACL_READ_SECURITY: acl_perm_t = 2048;
pub const acl_perm_t_ACL_WRITE_SECURITY: acl_perm_t = 4096;
pub const acl_perm_t_ACL_CHANGE_OWNER: acl_perm_t = 8192;
pub const acl_perm_t_ACL_SYNCHRONIZE: acl_perm_t = 1048576;
pub type acl_perm_t = ::std::os::raw::c_uint;
pub const acl_tag_t_ACL_UNDEFINED_TAG: acl_tag_t = 0;
pub const acl_tag_t_ACL_EXTENDED_ALLOW: acl_tag_t = 1;
pub const acl_tag_t_ACL_EXTENDED_DENY: acl_tag_t = 2;
pub type acl_tag_t = ::std::os::raw::c_uint;
pub const acl_type_t_ACL_TYPE_EXTENDED: acl_type_t = 256;
pub const acl_type_t_ACL_TYPE_ACCESS: acl_type_t = 0;
pub const acl_type_t_ACL_TYPE_DEFAULT: acl_type_t = 1;
pub const acl_type_t_ACL_TYPE_AFS: acl_type_t = 2;
pub const acl_type_t_ACL_TYPE_CODA: acl_type_t = 3;
pub const acl_type_t_ACL_TYPE_NTFS: acl_type_t = 4;
pub const acl_type_t_ACL_TYPE_NWFS: acl_type_t = 5;
pub type acl_type_t = ::std::os::raw::c_uint;
pub const acl_entry_id_t_ACL_FIRST_ENTRY: acl_entry_id_t = 0;
pub const acl_entry_id_t_ACL_NEXT_ENTRY: acl_entry_id_t = -1;
pub const acl_entry_id_t_ACL_LAST_ENTRY: acl_entry_id_t = -2;
pub type acl_entry_id_t = ::std::os::raw::c_int;
pub const acl_flag_t_ACL_FLAG_DEFER_INHERIT: acl_flag_t = 1;
pub const acl_flag_t_ACL_FLAG_NO_INHERIT: acl_flag_t = 131072;
pub const acl_flag_t_ACL_ENTRY_INHERITED: acl_flag_t = 16;
pub const acl_flag_t_ACL_ENTRY_FILE_INHERIT: acl_flag_t = 32;
pub const acl_flag_t_ACL_ENTRY_DIRECTORY_INHERIT: acl_flag_t = 64;
pub const acl_flag_t_ACL_ENTRY_LIMIT_INHERIT: acl_flag_t = 128;
pub const acl_flag_t_ACL_ENTRY_ONLY_INHERIT: acl_flag_t = 256;
pub type acl_flag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_permset {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _acl_flagset {
    _unused: [u8; 0],
}
pub type acl_t = *mut _acl;
pub type acl_entry_t = *mut _acl_entry;
pub type acl_permset_t = *mut _acl_permset;
pub type acl_flagset_t = *mut _acl_flagset;
pub type acl_permset_mask_t = u_int64_t;
extern "C" {
    pub fn acl_dup(acl: acl_t) -> acl_t;
}
extern "C" {
    pub fn acl_free(obj_p: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_init(count: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry(acl_p: *mut acl_t, entry_p: *mut acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_create_entry_np(
        acl_p: *mut acl_t,
        entry_p: *mut acl_entry_t,
        entry_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_entry(
        acl: acl_t,
        entry_id: ::std::os::raw::c_int,
        entry_p: *mut acl_entry_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid(acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_fd_np(
        fd: ::std::os::raw::c_int,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_file_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_valid_link_np(
        path: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_calc_mask(acl_p: *mut acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_perms(permset_d: acl_permset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset(
        entry_d: acl_entry_t,
        permset_p: *mut acl_permset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_maximal_permset_mask_np(mask_p: *mut acl_permset_mask_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_permset_mask_np(
        entry_d: acl_entry_t,
        mask_p: *mut acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_permset_mask_np(
        entry_d: acl_entry_t,
        mask: acl_permset_mask_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_clear_flags_np(flagset_d: acl_flagset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_p: *mut acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_flagset_np(
        obj_p: *mut ::std::os::raw::c_void,
        flagset_d: acl_flagset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_qualifier(entry_d: acl_entry_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn acl_get_tag_type(
        entry_d: acl_entry_t,
        tag_type_p: *mut acl_tag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_qualifier(
        entry_d: acl_entry_t,
        tag_qualifier_p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_delete_def_file(path_p: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_get_fd(fd: ::std::os::raw::c_int) -> acl_t;
}
extern "C" {
    pub fn acl_get_fd_np(fd: ::std::os::raw::c_int, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_file(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_get_link_np(path_p: *const ::std::os::raw::c_char, type_: acl_type_t) -> acl_t;
}
extern "C" {
    pub fn acl_set_fd(fd: ::std::os::raw::c_int, acl: acl_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_fd_np(
        fd: ::std::os::raw::c_int,
        acl: acl_t,
        acl_type: acl_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_file(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_set_link_np(
        path_p: *const ::std::os::raw::c_char,
        type_: acl_type_t,
        acl: acl_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acl_copy_ext(buf_p: *mut ::std::os::raw::c_void, acl: acl_t, size: isize) -> isize;
}
extern "C" {
    pub fn acl_copy_ext_native(
        buf_p: *mut ::std::os::raw::c_void,
        acl: acl_t,
        size: isize,
    ) -> isize;
}
extern "C" {
    pub fn acl_copy_int(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_copy_int_native(buf_p: *const ::std::os::raw::c_void) -> acl_t;
}
extern "C" {
    pub fn acl_from_text(buf_p: *const ::std::os::raw::c_char) -> acl_t;
}
extern "C" {
    pub fn acl_size(acl: acl_t) -> isize;
}
extern "C" {
    pub fn acl_to_text(acl: acl_t, len_p: *mut isize) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileSecurity {
    _unused: [u8; 0],
}
pub type CFFileSecurityRef = *mut __CFFileSecurity;
extern "C" {
    pub fn CFFileSecurityGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileSecurityCreate(allocator: CFAllocatorRef) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCreateCopy(
        allocator: CFAllocatorRef,
        fileSec: CFFileSecurityRef,
    ) -> CFFileSecurityRef;
}
extern "C" {
    pub fn CFFileSecurityCopyOwnerUUID(
        fileSec: CFFileSecurityRef,
        ownerUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyGroupUUID(
        fileSec: CFFileSecurityRef,
        groupUUID: *mut CFUUIDRef,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityCopyAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: *mut acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetAccessControlList(
        fileSec: CFFileSecurityRef,
        accessControlList: acl_t,
    ) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: *mut uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: *mut gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: *mut mode_t) -> Boolean;
}
extern "C" {
    pub fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) -> Boolean;
}
pub type CFFileSecurityClearOptions = CFOptionFlags;
pub const kCFFileSecurityClearOwner: ::std::os::raw::c_uint = 1;
pub const kCFFileSecurityClearGroup: ::std::os::raw::c_uint = 2;
pub const kCFFileSecurityClearMode: ::std::os::raw::c_uint = 4;
pub const kCFFileSecurityClearOwnerUUID: ::std::os::raw::c_uint = 8;
pub const kCFFileSecurityClearGroupUUID: ::std::os::raw::c_uint = 16;
pub const kCFFileSecurityClearAccessControlList: ::std::os::raw::c_uint = 32;
pub type _bindgen_ty_66 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFFileSecurityClearProperties(
        fileSec: CFFileSecurityRef,
        clearPropertyMask: CFFileSecurityClearOptions,
    ) -> Boolean;
}
extern "C" {
    pub fn CFStringTokenizerCopyBestStringLanguage(
        string: CFStringRef,
        range: CFRange,
    ) -> CFStringRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFStringTokenizer {
    _unused: [u8; 0],
}
pub type CFStringTokenizerRef = *mut __CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: ::std::os::raw::c_uint = 0;
pub const kCFStringTokenizerUnitSentence: ::std::os::raw::c_uint = 1;
pub const kCFStringTokenizerUnitParagraph: ::std::os::raw::c_uint = 2;
pub const kCFStringTokenizerUnitLineBreak: ::std::os::raw::c_uint = 3;
pub const kCFStringTokenizerUnitWordBoundary: ::std::os::raw::c_uint = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: ::std::os::raw::c_uint = 65536;
pub const kCFStringTokenizerAttributeLanguage: ::std::os::raw::c_uint = 131072;
pub type _bindgen_ty_67 = ::std::os::raw::c_uint;
pub type CFStringTokenizerTokenType = CFOptionFlags;
pub const kCFStringTokenizerTokenNone: ::std::os::raw::c_uint = 0;
pub const kCFStringTokenizerTokenNormal: ::std::os::raw::c_uint = 1;
pub const kCFStringTokenizerTokenHasSubTokensMask: ::std::os::raw::c_uint = 2;
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask: ::std::os::raw::c_uint = 4;
pub const kCFStringTokenizerTokenHasHasNumbersMask: ::std::os::raw::c_uint = 8;
pub const kCFStringTokenizerTokenHasNonLettersMask: ::std::os::raw::c_uint = 16;
pub const kCFStringTokenizerTokenIsCJWordMask: ::std::os::raw::c_uint = 32;
pub type _bindgen_ty_68 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CFStringTokenizerGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFStringTokenizerCreate(
        alloc: CFAllocatorRef,
        string: CFStringRef,
        range: CFRange,
        options: CFOptionFlags,
        locale: CFLocaleRef,
    ) -> CFStringTokenizerRef;
}
extern "C" {
    pub fn CFStringTokenizerSetString(
        tokenizer: CFStringTokenizerRef,
        string: CFStringRef,
        range: CFRange,
    );
}
extern "C" {
    pub fn CFStringTokenizerGoToTokenAtIndex(
        tokenizer: CFStringTokenizerRef,
        index: CFIndex,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerAdvanceToNextToken(
        tokenizer: CFStringTokenizerRef,
    ) -> CFStringTokenizerTokenType;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) -> CFRange;
}
extern "C" {
    pub fn CFStringTokenizerCopyCurrentTokenAttribute(
        tokenizer: CFStringTokenizerRef,
        attribute: CFOptionFlags,
    ) -> CFTypeRef;
}
extern "C" {
    pub fn CFStringTokenizerGetCurrentSubTokens(
        tokenizer: CFStringTokenizerRef,
        ranges: *mut CFRange,
        maxRangeLength: CFIndex,
        derivedSubTokens: CFMutableArrayRef,
    ) -> CFIndex;
}
pub type CFFileDescriptorNativeDescriptor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFFileDescriptor {
    _unused: [u8; 0],
}
pub type CFFileDescriptorRef = *mut __CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: ::std::os::raw::c_uint = 1;
pub const kCFFileDescriptorWriteCallBack: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_69 = ::std::os::raw::c_uint;
pub type CFFileDescriptorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        f: CFFileDescriptorRef,
        callBackTypes: CFOptionFlags,
        info: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFFileDescriptorContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub release: ::std::option::Option<unsafe extern "C" fn(info: *mut ::std::os::raw::c_void)>,
    pub copyDescription: ::std::option::Option<
        unsafe extern "C" fn(info: *mut ::std::os::raw::c_void) -> CFStringRef,
    >,
}
#[test]
fn bindgen_test_layout_CFFileDescriptorContext() {
    assert_eq!(
        ::std::mem::size_of::<CFFileDescriptorContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFFileDescriptorContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFFileDescriptorContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFFileDescriptorContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFFileDescriptorContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFFileDescriptorContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFFileDescriptorContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFFileDescriptorContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFFileDescriptorContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFFileDescriptorContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFFileDescriptorContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CFFileDescriptorGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFFileDescriptorCreate(
        allocator: CFAllocatorRef,
        fd: CFFileDescriptorNativeDescriptor,
        closeOnInvalidate: Boolean,
        callout: CFFileDescriptorCallBack,
        context: *const CFFileDescriptorContext,
    ) -> CFFileDescriptorRef;
}
extern "C" {
    pub fn CFFileDescriptorGetNativeDescriptor(
        f: CFFileDescriptorRef,
    ) -> CFFileDescriptorNativeDescriptor;
}
extern "C" {
    pub fn CFFileDescriptorGetContext(
        f: CFFileDescriptorRef,
        context: *mut CFFileDescriptorContext,
    );
}
extern "C" {
    pub fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags);
}
extern "C" {
    pub fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef);
}
extern "C" {
    pub fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) -> Boolean;
}
extern "C" {
    pub fn CFFileDescriptorCreateRunLoopSource(
        allocator: CFAllocatorRef,
        f: CFFileDescriptorRef,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFUserNotification {
    _unused: [u8; 0],
}
pub type CFUserNotificationRef = *mut __CFUserNotification;
pub type CFUserNotificationCallBack = ::std::option::Option<
    unsafe extern "C" fn(userNotification: CFUserNotificationRef, responseFlags: CFOptionFlags),
>;
extern "C" {
    pub fn CFUserNotificationGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFUserNotificationCreate(
        allocator: CFAllocatorRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        error: *mut SInt32,
        dictionary: CFDictionaryRef,
    ) -> CFUserNotificationRef;
}
extern "C" {
    pub fn CFUserNotificationReceiveResponse(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationGetResponseValue(
        userNotification: CFUserNotificationRef,
        key: CFStringRef,
        idx: CFIndex,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFUserNotificationGetResponseDictionary(
        userNotification: CFUserNotificationRef,
    ) -> CFDictionaryRef;
}
extern "C" {
    pub fn CFUserNotificationUpdate(
        userNotification: CFUserNotificationRef,
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        dictionary: CFDictionaryRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationCreateRunLoopSource(
        allocator: CFAllocatorRef,
        userNotification: CFUserNotificationRef,
        callout: CFUserNotificationCallBack,
        order: CFIndex,
    ) -> CFRunLoopSourceRef;
}
extern "C" {
    pub fn CFUserNotificationDisplayNotice(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
    ) -> SInt32;
}
extern "C" {
    pub fn CFUserNotificationDisplayAlert(
        timeout: CFTimeInterval,
        flags: CFOptionFlags,
        iconURL: CFURLRef,
        soundURL: CFURLRef,
        localizationURL: CFURLRef,
        alertHeader: CFStringRef,
        alertMessage: CFStringRef,
        defaultButtonTitle: CFStringRef,
        alternateButtonTitle: CFStringRef,
        otherButtonTitle: CFStringRef,
        responseFlags: *mut CFOptionFlags,
    ) -> SInt32;
}
pub const kCFUserNotificationStopAlertLevel: ::std::os::raw::c_uint = 0;
pub const kCFUserNotificationNoteAlertLevel: ::std::os::raw::c_uint = 1;
pub const kCFUserNotificationCautionAlertLevel: ::std::os::raw::c_uint = 2;
pub const kCFUserNotificationPlainAlertLevel: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_70 = ::std::os::raw::c_uint;
pub const kCFUserNotificationDefaultResponse: ::std::os::raw::c_uint = 0;
pub const kCFUserNotificationAlternateResponse: ::std::os::raw::c_uint = 1;
pub const kCFUserNotificationOtherResponse: ::std::os::raw::c_uint = 2;
pub const kCFUserNotificationCancelResponse: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_71 = ::std::os::raw::c_uint;
pub const kCFUserNotificationNoDefaultButtonFlag: ::std::os::raw::c_uint = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_72 = ::std::os::raw::c_uint;
extern "C" {
    pub static kCFUserNotificationIconURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationSoundURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationLocalizationURLKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertHeaderKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertMessageKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationOtherButtonTitleKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationTextFieldValuesKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationPopUpSelectionKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationAlertTopMostKey: CFStringRef;
}
extern "C" {
    pub static kCFUserNotificationKeyboardTypesKey: CFStringRef;
}
pub const kCFXMLNodeCurrentVersion: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_73 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLNode {
    _unused: [u8; 0],
}
pub type CFXMLNodeRef = *const __CFXMLNode;
pub type CFXMLTreeRef = CFTreeRef;
pub type CFXMLNodeTypeCode = CFIndex;
pub const kCFXMLNodeTypeDocument: ::std::os::raw::c_uint = 1;
pub const kCFXMLNodeTypeElement: ::std::os::raw::c_uint = 2;
pub const kCFXMLNodeTypeAttribute: ::std::os::raw::c_uint = 3;
pub const kCFXMLNodeTypeProcessingInstruction: ::std::os::raw::c_uint = 4;
pub const kCFXMLNodeTypeComment: ::std::os::raw::c_uint = 5;
pub const kCFXMLNodeTypeText: ::std::os::raw::c_uint = 6;
pub const kCFXMLNodeTypeCDATASection: ::std::os::raw::c_uint = 7;
pub const kCFXMLNodeTypeDocumentFragment: ::std::os::raw::c_uint = 8;
pub const kCFXMLNodeTypeEntity: ::std::os::raw::c_uint = 9;
pub const kCFXMLNodeTypeEntityReference: ::std::os::raw::c_uint = 10;
pub const kCFXMLNodeTypeDocumentType: ::std::os::raw::c_uint = 11;
pub const kCFXMLNodeTypeWhitespace: ::std::os::raw::c_uint = 12;
pub const kCFXMLNodeTypeNotation: ::std::os::raw::c_uint = 13;
pub const kCFXMLNodeTypeElementTypeDeclaration: ::std::os::raw::c_uint = 14;
pub const kCFXMLNodeTypeAttributeListDeclaration: ::std::os::raw::c_uint = 15;
pub type _bindgen_ty_74 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementInfo {
    pub attributes: CFDictionaryRef,
    pub attributeOrder: CFArrayRef,
    pub isEmpty: Boolean,
    pub _reserved: [::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_CFXMLElementInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLElementInfo>(),
        24usize,
        concat!("Size of: ", stringify!(CFXMLElementInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLElementInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLElementInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLElementInfo>())).attributes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementInfo),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLElementInfo>())).attributeOrder as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementInfo),
            "::",
            stringify!(attributeOrder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLElementInfo>())).isEmpty as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementInfo),
            "::",
            stringify!(isEmpty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLElementInfo>()))._reserved as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementInfo),
            "::",
            stringify!(_reserved)
        )
    );
}
impl Default for CFXMLElementInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLProcessingInstructionInfo {
    pub dataString: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLProcessingInstructionInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLProcessingInstructionInfo>(),
        8usize,
        concat!("Size of: ", stringify!(CFXMLProcessingInstructionInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLProcessingInstructionInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLProcessingInstructionInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLProcessingInstructionInfo>())).dataString as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLProcessingInstructionInfo),
            "::",
            stringify!(dataString)
        )
    );
}
impl Default for CFXMLProcessingInstructionInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentInfo {
    pub sourceURL: CFURLRef,
    pub encoding: CFStringEncoding,
}
#[test]
fn bindgen_test_layout_CFXMLDocumentInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLDocumentInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLDocumentInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLDocumentInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLDocumentInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLDocumentInfo>())).sourceURL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLDocumentInfo),
            "::",
            stringify!(sourceURL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLDocumentInfo>())).encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLDocumentInfo),
            "::",
            stringify!(encoding)
        )
    );
}
impl Default for CFXMLDocumentInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLExternalID {
    pub systemID: CFURLRef,
    pub publicID: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLExternalID() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLExternalID>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLExternalID))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLExternalID>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLExternalID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLExternalID>())).systemID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLExternalID),
            "::",
            stringify!(systemID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLExternalID>())).publicID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLExternalID),
            "::",
            stringify!(publicID)
        )
    );
}
impl Default for CFXMLExternalID {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLDocumentTypeInfo {
    pub externalID: CFXMLExternalID,
}
#[test]
fn bindgen_test_layout_CFXMLDocumentTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLDocumentTypeInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLDocumentTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLDocumentTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLDocumentTypeInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLDocumentTypeInfo>())).externalID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLDocumentTypeInfo),
            "::",
            stringify!(externalID)
        )
    );
}
impl Default for CFXMLDocumentTypeInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLNotationInfo {
    pub externalID: CFXMLExternalID,
}
#[test]
fn bindgen_test_layout_CFXMLNotationInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLNotationInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLNotationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLNotationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLNotationInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLNotationInfo>())).externalID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLNotationInfo),
            "::",
            stringify!(externalID)
        )
    );
}
impl Default for CFXMLNotationInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLElementTypeDeclarationInfo {
    pub contentDescription: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLElementTypeDeclarationInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLElementTypeDeclarationInfo>(),
        8usize,
        concat!("Size of: ", stringify!(CFXMLElementTypeDeclarationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLElementTypeDeclarationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLElementTypeDeclarationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLElementTypeDeclarationInfo>())).contentDescription
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLElementTypeDeclarationInfo),
            "::",
            stringify!(contentDescription)
        )
    );
}
impl Default for CFXMLElementTypeDeclarationInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeDeclarationInfo {
    pub attributeName: CFStringRef,
    pub typeString: CFStringRef,
    pub defaultString: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLAttributeDeclarationInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLAttributeDeclarationInfo>(),
        24usize,
        concat!("Size of: ", stringify!(CFXMLAttributeDeclarationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLAttributeDeclarationInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLAttributeDeclarationInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLAttributeDeclarationInfo>())).attributeName as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeDeclarationInfo),
            "::",
            stringify!(attributeName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLAttributeDeclarationInfo>())).typeString as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeDeclarationInfo),
            "::",
            stringify!(typeString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLAttributeDeclarationInfo>())).defaultString as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeDeclarationInfo),
            "::",
            stringify!(defaultString)
        )
    );
}
impl Default for CFXMLAttributeDeclarationInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLAttributeListDeclarationInfo {
    pub numberOfAttributes: CFIndex,
    pub attributes: *mut CFXMLAttributeDeclarationInfo,
}
#[test]
fn bindgen_test_layout_CFXMLAttributeListDeclarationInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLAttributeListDeclarationInfo>(),
        16usize,
        concat!("Size of: ", stringify!(CFXMLAttributeListDeclarationInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLAttributeListDeclarationInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(CFXMLAttributeListDeclarationInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLAttributeListDeclarationInfo>())).numberOfAttributes
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeListDeclarationInfo),
            "::",
            stringify!(numberOfAttributes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLAttributeListDeclarationInfo>())).attributes as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLAttributeListDeclarationInfo),
            "::",
            stringify!(attributes)
        )
    );
}
impl Default for CFXMLAttributeListDeclarationInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type CFXMLEntityTypeCode = CFIndex;
pub const kCFXMLEntityTypeParameter: ::std::os::raw::c_uint = 0;
pub const kCFXMLEntityTypeParsedInternal: ::std::os::raw::c_uint = 1;
pub const kCFXMLEntityTypeParsedExternal: ::std::os::raw::c_uint = 2;
pub const kCFXMLEntityTypeUnparsed: ::std::os::raw::c_uint = 3;
pub const kCFXMLEntityTypeCharacter: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_75 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLEntityInfo {
    pub entityType: CFXMLEntityTypeCode,
    pub replacementText: CFStringRef,
    pub entityID: CFXMLExternalID,
    pub notationName: CFStringRef,
}
#[test]
fn bindgen_test_layout_CFXMLEntityInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLEntityInfo>(),
        40usize,
        concat!("Size of: ", stringify!(CFXMLEntityInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLEntityInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLEntityInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLEntityInfo>())).entityType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityInfo),
            "::",
            stringify!(entityType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLEntityInfo>())).replacementText as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityInfo),
            "::",
            stringify!(replacementText)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLEntityInfo>())).entityID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityInfo),
            "::",
            stringify!(entityID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLEntityInfo>())).notationName as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityInfo),
            "::",
            stringify!(notationName)
        )
    );
}
impl Default for CFXMLEntityInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFXMLEntityReferenceInfo {
    pub entityType: CFXMLEntityTypeCode,
}
#[test]
fn bindgen_test_layout_CFXMLEntityReferenceInfo() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLEntityReferenceInfo>(),
        8usize,
        concat!("Size of: ", stringify!(CFXMLEntityReferenceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLEntityReferenceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLEntityReferenceInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLEntityReferenceInfo>())).entityType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLEntityReferenceInfo),
            "::",
            stringify!(entityType)
        )
    );
}
extern "C" {
    pub fn CFXMLNodeGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLNodeCreate(
        alloc: CFAllocatorRef,
        xmlType: CFXMLNodeTypeCode,
        dataString: CFStringRef,
        additionalInfoPtr: *const ::std::os::raw::c_void,
        version: CFIndex,
    ) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) -> CFXMLNodeRef;
}
extern "C" {
    pub fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) -> CFXMLNodeTypeCode;
}
extern "C" {
    pub fn CFXMLNodeGetString(node: CFXMLNodeRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLNodeGetVersion(node: CFXMLNodeRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) -> CFXMLNodeRef;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFXMLParser {
    _unused: [u8; 0],
}
pub type CFXMLParserRef = *mut __CFXMLParser;
pub type CFXMLParserOptions = CFOptionFlags;
pub const kCFXMLParserValidateDocument: ::std::os::raw::c_uint = 1;
pub const kCFXMLParserSkipMetaData: ::std::os::raw::c_uint = 2;
pub const kCFXMLParserReplacePhysicalEntities: ::std::os::raw::c_uint = 4;
pub const kCFXMLParserSkipWhitespace: ::std::os::raw::c_uint = 8;
pub const kCFXMLParserResolveExternalEntities: ::std::os::raw::c_uint = 16;
pub const kCFXMLParserAddImpliedAttributes: ::std::os::raw::c_uint = 32;
pub const kCFXMLParserAllOptions: ::std::os::raw::c_uint = 16777215;
pub const kCFXMLParserNoOptions: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_76 = ::std::os::raw::c_uint;
pub type CFXMLParserStatusCode = CFIndex;
pub const kCFXMLStatusParseNotBegun: ::std::os::raw::c_int = -2;
pub const kCFXMLStatusParseInProgress: ::std::os::raw::c_int = -1;
pub const kCFXMLStatusParseSuccessful: ::std::os::raw::c_int = 0;
pub const kCFXMLErrorUnexpectedEOF: ::std::os::raw::c_int = 1;
pub const kCFXMLErrorUnknownEncoding: ::std::os::raw::c_int = 2;
pub const kCFXMLErrorEncodingConversionFailure: ::std::os::raw::c_int = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: ::std::os::raw::c_int = 4;
pub const kCFXMLErrorMalformedDTD: ::std::os::raw::c_int = 5;
pub const kCFXMLErrorMalformedName: ::std::os::raw::c_int = 6;
pub const kCFXMLErrorMalformedCDSect: ::std::os::raw::c_int = 7;
pub const kCFXMLErrorMalformedCloseTag: ::std::os::raw::c_int = 8;
pub const kCFXMLErrorMalformedStartTag: ::std::os::raw::c_int = 9;
pub const kCFXMLErrorMalformedDocument: ::std::os::raw::c_int = 10;
pub const kCFXMLErrorElementlessDocument: ::std::os::raw::c_int = 11;
pub const kCFXMLErrorMalformedComment: ::std::os::raw::c_int = 12;
pub const kCFXMLErrorMalformedCharacterReference: ::std::os::raw::c_int = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: ::std::os::raw::c_int = 14;
pub const kCFXMLErrorNoData: ::std::os::raw::c_int = 15;
pub type _bindgen_ty_77 = ::std::os::raw::c_int;
pub type CFXMLParserCreateXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        nodeDesc: CFXMLNodeRef,
        info: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type CFXMLParserAddChildCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        parent: *mut ::std::os::raw::c_void,
        child: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserEndXMLStructureCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        xmlType: *mut ::std::os::raw::c_void,
        info: *mut ::std::os::raw::c_void,
    ),
>;
pub type CFXMLParserResolveExternalEntityCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        extID: *mut CFXMLExternalID,
        info: *mut ::std::os::raw::c_void,
    ) -> CFDataRef,
>;
pub type CFXMLParserHandleErrorCallBack = ::std::option::Option<
    unsafe extern "C" fn(
        parser: CFXMLParserRef,
        error: CFXMLParserStatusCode,
        info: *mut ::std::os::raw::c_void,
    ) -> Boolean,
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CFXMLParserCallBacks {
    pub version: CFIndex,
    pub createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    pub addChild: CFXMLParserAddChildCallBack,
    pub endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    pub resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    pub handleError: CFXMLParserHandleErrorCallBack,
}
#[test]
fn bindgen_test_layout_CFXMLParserCallBacks() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLParserCallBacks>(),
        48usize,
        concat!("Size of: ", stringify!(CFXMLParserCallBacks))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLParserCallBacks>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLParserCallBacks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLParserCallBacks>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLParserCallBacks>())).createXMLStructure as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(createXMLStructure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLParserCallBacks>())).addChild as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(addChild)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLParserCallBacks>())).endXMLStructure as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(endXMLStructure)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLParserCallBacks>())).resolveExternalEntity as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(resolveExternalEntity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLParserCallBacks>())).handleError as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserCallBacks),
            "::",
            stringify!(handleError)
        )
    );
}
pub type CFXMLParserRetainCallBack = ::std::option::Option<
    unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> *const ::std::os::raw::c_void,
>;
pub type CFXMLParserReleaseCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void)>;
pub type CFXMLParserCopyDescriptionCallBack =
    ::std::option::Option<unsafe extern "C" fn(info: *const ::std::os::raw::c_void) -> CFStringRef>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CFXMLParserContext {
    pub version: CFIndex,
    pub info: *mut ::std::os::raw::c_void,
    pub retain: CFXMLParserRetainCallBack,
    pub release: CFXMLParserReleaseCallBack,
    pub copyDescription: CFXMLParserCopyDescriptionCallBack,
}
#[test]
fn bindgen_test_layout_CFXMLParserContext() {
    assert_eq!(
        ::std::mem::size_of::<CFXMLParserContext>(),
        40usize,
        concat!("Size of: ", stringify!(CFXMLParserContext))
    );
    assert_eq!(
        ::std::mem::align_of::<CFXMLParserContext>(),
        8usize,
        concat!("Alignment of ", stringify!(CFXMLParserContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLParserContext>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserContext),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLParserContext>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserContext),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLParserContext>())).retain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserContext),
            "::",
            stringify!(retain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CFXMLParserContext>())).release as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserContext),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CFXMLParserContext>())).copyDescription as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CFXMLParserContext),
            "::",
            stringify!(copyDescription)
        )
    );
}
impl Default for CFXMLParserContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CFXMLParserGetTypeID() -> CFTypeID;
}
extern "C" {
    pub fn CFXMLParserCreate(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        callBacks: *mut CFXMLParserCallBacks,
        context: *mut CFXMLParserContext,
    ) -> CFXMLParserRef;
}
extern "C" {
    pub fn CFXMLParserGetContext(parser: CFXMLParserRef, context: *mut CFXMLParserContext);
}
extern "C" {
    pub fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: *mut CFXMLParserCallBacks);
}
extern "C" {
    pub fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) -> CFURLRef;
}
extern "C" {
    pub fn CFXMLParserGetLocation(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) -> CFIndex;
}
extern "C" {
    pub fn CFXMLParserGetDocument(parser: CFXMLParserRef) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) -> CFXMLParserStatusCode;
}
extern "C" {
    pub fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLParserAbort(
        parser: CFXMLParserRef,
        errorCode: CFXMLParserStatusCode,
        errorDescription: CFStringRef,
    );
}
extern "C" {
    pub fn CFXMLParserParse(parser: CFXMLParserRef) -> Boolean;
}
extern "C" {
    pub fn CFXMLTreeCreateFromData(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateFromDataWithError(
        allocator: CFAllocatorRef,
        xmlData: CFDataRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
        errorDict: *mut CFDictionaryRef,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateWithDataFromURL(
        allocator: CFAllocatorRef,
        dataSource: CFURLRef,
        parseOptions: CFOptionFlags,
        versionOfNodes: CFIndex,
    ) -> CFXMLTreeRef;
}
extern "C" {
    pub fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) -> CFDataRef;
}
extern "C" {
    pub fn CFXMLCreateStringByEscapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub fn CFXMLCreateStringByUnescapingEntities(
        allocator: CFAllocatorRef,
        string: CFStringRef,
        entitiesDictionary: CFDictionaryRef,
    ) -> CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorDescription: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLineNumber: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorLocation: CFStringRef;
}
extern "C" {
    pub static kCFXMLTreeErrorStatusCode: CFStringRef;
}
pub type AudioComponentFlags = UInt32;
pub const kAudioComponentFlag_Unsearchable: ::std::os::raw::c_uint = 1;
pub const kAudioComponentFlag_SandboxSafe: ::std::os::raw::c_uint = 2;
pub const kAudioComponentFlag_IsV3AudioUnit: ::std::os::raw::c_uint = 4;
pub const kAudioComponentFlag_RequiresAsyncInstantiation: ::std::os::raw::c_uint = 8;
pub const kAudioComponentFlag_CanLoadInProcess: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_78 = ::std::os::raw::c_uint;
pub type AudioComponentInstantiationOptions = UInt32;
pub const kAudioComponentInstantiation_LoadOutOfProcess: ::std::os::raw::c_uint = 1;
pub const kAudioComponentInstantiation_LoadInProcess: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_79 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioComponentDescription {
    pub componentType: OSType,
    pub componentSubType: OSType,
    pub componentManufacturer: OSType,
    pub componentFlags: UInt32,
    pub componentFlagsMask: UInt32,
}
#[test]
fn bindgen_test_layout_AudioComponentDescription() {
    assert_eq!(
        ::std::mem::size_of::<AudioComponentDescription>(),
        20usize,
        concat!("Size of: ", stringify!(AudioComponentDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioComponentDescription>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioComponentDescription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentDescription>())).componentType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentDescription),
            "::",
            stringify!(componentType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentDescription>())).componentSubType as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentDescription),
            "::",
            stringify!(componentSubType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentDescription>())).componentManufacturer as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentDescription),
            "::",
            stringify!(componentManufacturer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentDescription>())).componentFlags as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentDescription),
            "::",
            stringify!(componentFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentDescription>())).componentFlagsMask as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentDescription),
            "::",
            stringify!(componentFlagsMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioComponent {
    _unused: [u8; 0],
}
pub type AudioComponent = *mut OpaqueAudioComponent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComponentInstanceRecord {
    _unused: [u8; 0],
}
pub type AudioComponentInstance = *mut ComponentInstanceRecord;
pub type AudioComponentMethod = ::std::option::Option<
    unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void, ...) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioComponentPlugInInterface {
    pub Open: ::std::option::Option<
        unsafe extern "C" fn(
            self_: *mut ::std::os::raw::c_void,
            mInstance: AudioComponentInstance,
        ) -> OSStatus,
    >,
    pub Close:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>,
    pub Lookup:
        ::std::option::Option<unsafe extern "C" fn(selector: SInt16) -> AudioComponentMethod>,
    pub reserved: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AudioComponentPlugInInterface() {
    assert_eq!(
        ::std::mem::size_of::<AudioComponentPlugInInterface>(),
        32usize,
        concat!("Size of: ", stringify!(AudioComponentPlugInInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioComponentPlugInInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioComponentPlugInInterface))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentPlugInInterface>())).Open as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentPlugInInterface),
            "::",
            stringify!(Open)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentPlugInInterface>())).Close as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentPlugInInterface),
            "::",
            stringify!(Close)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentPlugInInterface>())).Lookup as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentPlugInInterface),
            "::",
            stringify!(Lookup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioComponentPlugInInterface>())).reserved as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioComponentPlugInInterface),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for AudioComponentPlugInInterface {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioComponentFactoryFunction = ::std::option::Option<
    unsafe extern "C" fn(
        inDesc: *const AudioComponentDescription,
    ) -> *mut AudioComponentPlugInInterface,
>;
extern "C" {
    pub fn AudioComponentFindNext(
        inComponent: AudioComponent,
        inDesc: *const AudioComponentDescription,
    ) -> AudioComponent;
}
extern "C" {
    pub fn AudioComponentCount(inDesc: *const AudioComponentDescription) -> UInt32;
}
extern "C" {
    pub fn AudioComponentCopyName(
        inComponent: AudioComponent,
        outName: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentGetDescription(
        inComponent: AudioComponent,
        outDesc: *mut AudioComponentDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentGetVersion(
        inComponent: AudioComponent,
        outVersion: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentInstanceNew(
        inComponent: AudioComponent,
        outInstance: *mut AudioComponentInstance,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentInstantiate(
        inComponent: AudioComponent,
        inOptions: AudioComponentInstantiationOptions,
        inCompletionHandler: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn AudioComponentInstanceDispose(inInstance: AudioComponentInstance) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentInstanceGetComponent(inInstance: AudioComponentInstance)
        -> AudioComponent;
}
extern "C" {
    pub fn AudioComponentInstanceCanDo(
        inInstance: AudioComponentInstance,
        inSelectorID: SInt16,
    ) -> Boolean;
}
extern "C" {
    pub fn AudioComponentRegister(
        inDesc: *const AudioComponentDescription,
        inName: CFStringRef,
        inVersion: UInt32,
        inFactory: AudioComponentFactoryFunction,
    ) -> AudioComponent;
}
extern "C" {
    pub fn AudioComponentCopyConfigurationInfo(
        inComponent: AudioComponent,
        outConfigurationInfo: *mut CFDictionaryRef,
    ) -> OSStatus;
}
pub type AudioComponentValidationResult = UInt32;
pub const kAudioComponentValidationResult_Unknown: ::std::os::raw::c_uint = 0;
pub const kAudioComponentValidationResult_Passed: ::std::os::raw::c_uint = 1;
pub const kAudioComponentValidationResult_Failed: ::std::os::raw::c_uint = 2;
pub const kAudioComponentValidationResult_TimedOut: ::std::os::raw::c_uint = 3;
pub const kAudioComponentValidationResult_UnauthorizedError_Open: ::std::os::raw::c_uint = 4;
pub const kAudioComponentValidationResult_UnauthorizedError_Init: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_80 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioComponentValidate(
        inComponent: AudioComponent,
        inValidationParameters: CFDictionaryRef,
        outValidationResult: *mut AudioComponentValidationResult,
    ) -> OSStatus;
}
pub type AudioUnit = AudioComponentInstance;
pub const kAudioUnitType_Output: ::std::os::raw::c_uint = 1635086197;
pub const kAudioUnitType_MusicDevice: ::std::os::raw::c_uint = 1635085685;
pub const kAudioUnitType_MusicEffect: ::std::os::raw::c_uint = 1635085670;
pub const kAudioUnitType_FormatConverter: ::std::os::raw::c_uint = 1635083875;
pub const kAudioUnitType_Effect: ::std::os::raw::c_uint = 1635083896;
pub const kAudioUnitType_Mixer: ::std::os::raw::c_uint = 1635085688;
pub const kAudioUnitType_Panner: ::std::os::raw::c_uint = 1635086446;
pub const kAudioUnitType_Generator: ::std::os::raw::c_uint = 1635084142;
pub const kAudioUnitType_OfflineEffect: ::std::os::raw::c_uint = 1635086188;
pub const kAudioUnitType_MIDIProcessor: ::std::os::raw::c_uint = 1635085673;
pub type _bindgen_ty_81 = ::std::os::raw::c_uint;
pub const kAudioUnitType_RemoteEffect: ::std::os::raw::c_uint = 1635086968;
pub const kAudioUnitType_RemoteGenerator: ::std::os::raw::c_uint = 1635086951;
pub const kAudioUnitType_RemoteInstrument: ::std::os::raw::c_uint = 1635086953;
pub const kAudioUnitType_RemoteMusicEffect: ::std::os::raw::c_uint = 1635086957;
pub type _bindgen_ty_82 = ::std::os::raw::c_uint;
pub const kAudioUnitManufacturer_Apple: ::std::os::raw::c_uint = 1634758764;
pub type _bindgen_ty_83 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_GenericOutput: ::std::os::raw::c_uint = 1734700658;
pub const kAudioUnitSubType_VoiceProcessingIO: ::std::os::raw::c_uint = 1987078511;
pub type _bindgen_ty_84 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_HALOutput: ::std::os::raw::c_uint = 1634230636;
pub const kAudioUnitSubType_DefaultOutput: ::std::os::raw::c_uint = 1684366880;
pub const kAudioUnitSubType_SystemOutput: ::std::os::raw::c_uint = 1937339168;
pub type _bindgen_ty_85 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_DLSSynth: ::std::os::raw::c_uint = 1684828960;
pub const kAudioUnitSubType_Sampler: ::std::os::raw::c_uint = 1935764848;
pub const kAudioUnitSubType_MIDISynth: ::std::os::raw::c_uint = 1836284270;
pub type _bindgen_ty_86 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_AUConverter: ::std::os::raw::c_uint = 1668247158;
pub const kAudioUnitSubType_Varispeed: ::std::os::raw::c_uint = 1986097769;
pub const kAudioUnitSubType_DeferredRenderer: ::std::os::raw::c_uint = 1684366962;
pub const kAudioUnitSubType_Splitter: ::std::os::raw::c_uint = 1936747636;
pub const kAudioUnitSubType_MultiSplitter: ::std::os::raw::c_uint = 1836281964;
pub const kAudioUnitSubType_Merger: ::std::os::raw::c_uint = 1835364967;
pub const kAudioUnitSubType_NewTimePitch: ::std::os::raw::c_uint = 1853191280;
pub const kAudioUnitSubType_AUiPodTimeOther: ::std::os::raw::c_uint = 1768977519;
pub const kAudioUnitSubType_RoundTripAAC: ::std::os::raw::c_uint = 1918984547;
pub type _bindgen_ty_87 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_TimePitch: ::std::os::raw::c_uint = 1953329268;
pub type _bindgen_ty_88 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_PeakLimiter: ::std::os::raw::c_uint = 1819112562;
pub const kAudioUnitSubType_DynamicsProcessor: ::std::os::raw::c_uint = 1684237680;
pub const kAudioUnitSubType_LowPassFilter: ::std::os::raw::c_uint = 1819304307;
pub const kAudioUnitSubType_HighPassFilter: ::std::os::raw::c_uint = 1752195443;
pub const kAudioUnitSubType_BandPassFilter: ::std::os::raw::c_uint = 1651532147;
pub const kAudioUnitSubType_HighShelfFilter: ::std::os::raw::c_uint = 1752393830;
pub const kAudioUnitSubType_LowShelfFilter: ::std::os::raw::c_uint = 1819502694;
pub const kAudioUnitSubType_ParametricEQ: ::std::os::raw::c_uint = 1886217585;
pub const kAudioUnitSubType_Distortion: ::std::os::raw::c_uint = 1684632436;
pub const kAudioUnitSubType_Delay: ::std::os::raw::c_uint = 1684368505;
pub const kAudioUnitSubType_SampleDelay: ::std::os::raw::c_uint = 1935961209;
pub const kAudioUnitSubType_NBandEQ: ::std::os::raw::c_uint = 1851942257;
pub const kAudioUnitSubType_Reverb2: ::std::os::raw::c_uint = 1920361010;
pub type _bindgen_ty_89 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_GraphicEQ: ::std::os::raw::c_uint = 1735550321;
pub const kAudioUnitSubType_MultiBandCompressor: ::std::os::raw::c_uint = 1835232624;
pub const kAudioUnitSubType_MatrixReverb: ::std::os::raw::c_uint = 1836213622;
pub const kAudioUnitSubType_Pitch: ::std::os::raw::c_uint = 1953329268;
pub const kAudioUnitSubType_AUFilter: ::std::os::raw::c_uint = 1718185076;
pub const kAudioUnitSubType_NetSend: ::std::os::raw::c_uint = 1853058660;
pub const kAudioUnitSubType_RogerBeep: ::std::os::raw::c_uint = 1919903602;
pub type _bindgen_ty_90 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_MultiChannelMixer: ::std::os::raw::c_uint = 1835232632;
pub const kAudioUnitSubType_MatrixMixer: ::std::os::raw::c_uint = 1836608888;
pub const kAudioUnitSubType_SpatialMixer: ::std::os::raw::c_uint = 862217581;
pub type _bindgen_ty_91 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_StereoMixer: ::std::os::raw::c_uint = 1936554098;
pub const kAudioUnitSubType_3DMixer: ::std::os::raw::c_uint = 862219640;
pub type _bindgen_ty_92 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_SphericalHeadPanner: ::std::os::raw::c_uint = 1936746610;
pub const kAudioUnitSubType_VectorPanner: ::std::os::raw::c_uint = 1986158963;
pub const kAudioUnitSubType_SoundFieldPanner: ::std::os::raw::c_uint = 1634558569;
pub const kAudioUnitSubType_HRTFPanner: ::std::os::raw::c_uint = 1752331366;
pub type _bindgen_ty_93 = ::std::os::raw::c_uint;
pub const kAudioUnitSubType_NetReceive: ::std::os::raw::c_uint = 1852990326;
pub const kAudioUnitSubType_ScheduledSoundPlayer: ::std::os::raw::c_uint = 1936945260;
pub const kAudioUnitSubType_AudioFilePlayer: ::std::os::raw::c_uint = 1634103404;
pub type _bindgen_ty_94 = ::std::os::raw::c_uint;
pub type AudioUnitRenderActionFlags = UInt32;
pub const kAudioUnitRenderAction_PreRender: ::std::os::raw::c_uint = 4;
pub const kAudioUnitRenderAction_PostRender: ::std::os::raw::c_uint = 8;
pub const kAudioUnitRenderAction_OutputIsSilence: ::std::os::raw::c_uint = 16;
pub const kAudioOfflineUnitRenderAction_Preflight: ::std::os::raw::c_uint = 32;
pub const kAudioOfflineUnitRenderAction_Render: ::std::os::raw::c_uint = 64;
pub const kAudioOfflineUnitRenderAction_Complete: ::std::os::raw::c_uint = 128;
pub const kAudioUnitRenderAction_PostRenderError: ::std::os::raw::c_uint = 256;
pub const kAudioUnitRenderAction_DoNotCheckRenderArgs: ::std::os::raw::c_uint = 512;
pub type _bindgen_ty_95 = ::std::os::raw::c_uint;
pub const kAudioUnitErr_InvalidProperty: ::std::os::raw::c_int = -10879;
pub const kAudioUnitErr_InvalidParameter: ::std::os::raw::c_int = -10878;
pub const kAudioUnitErr_InvalidElement: ::std::os::raw::c_int = -10877;
pub const kAudioUnitErr_NoConnection: ::std::os::raw::c_int = -10876;
pub const kAudioUnitErr_FailedInitialization: ::std::os::raw::c_int = -10875;
pub const kAudioUnitErr_TooManyFramesToProcess: ::std::os::raw::c_int = -10874;
pub const kAudioUnitErr_InvalidFile: ::std::os::raw::c_int = -10871;
pub const kAudioUnitErr_UnknownFileType: ::std::os::raw::c_int = -10870;
pub const kAudioUnitErr_FileNotSpecified: ::std::os::raw::c_int = -10869;
pub const kAudioUnitErr_FormatNotSupported: ::std::os::raw::c_int = -10868;
pub const kAudioUnitErr_Uninitialized: ::std::os::raw::c_int = -10867;
pub const kAudioUnitErr_InvalidScope: ::std::os::raw::c_int = -10866;
pub const kAudioUnitErr_PropertyNotWritable: ::std::os::raw::c_int = -10865;
pub const kAudioUnitErr_CannotDoInCurrentContext: ::std::os::raw::c_int = -10863;
pub const kAudioUnitErr_InvalidPropertyValue: ::std::os::raw::c_int = -10851;
pub const kAudioUnitErr_PropertyNotInUse: ::std::os::raw::c_int = -10850;
pub const kAudioUnitErr_Initialized: ::std::os::raw::c_int = -10849;
pub const kAudioUnitErr_InvalidOfflineRender: ::std::os::raw::c_int = -10848;
pub const kAudioUnitErr_Unauthorized: ::std::os::raw::c_int = -10847;
pub const kAudioUnitErr_MIDIOutputBufferFull: ::std::os::raw::c_int = -66753;
pub const kAudioComponentErr_InstanceTimedOut: ::std::os::raw::c_int = -66754;
pub const kAudioComponentErr_InstanceInvalidated: ::std::os::raw::c_int = -66749;
pub const kAudioUnitErr_RenderTimeout: ::std::os::raw::c_int = -66745;
pub const kAudioUnitErr_ExtensionNotFound: ::std::os::raw::c_int = -66744;
pub const kAudioUnitErr_InvalidParameterValue: ::std::os::raw::c_int = -66743;
pub const kAudioUnitErr_InvalidFilePath: ::std::os::raw::c_int = -66742;
pub const kAudioUnitErr_MissingKey: ::std::os::raw::c_int = -66741;
pub type _bindgen_ty_96 = ::std::os::raw::c_int;
pub const kAudioComponentErr_DuplicateDescription: ::std::os::raw::c_int = -66752;
pub const kAudioComponentErr_UnsupportedType: ::std::os::raw::c_int = -66751;
pub const kAudioComponentErr_TooManyInstances: ::std::os::raw::c_int = -66750;
pub const kAudioComponentErr_NotPermitted: ::std::os::raw::c_int = -66748;
pub const kAudioComponentErr_InitializationTimedOut: ::std::os::raw::c_int = -66747;
pub const kAudioComponentErr_InvalidFormat: ::std::os::raw::c_int = -66746;
pub type _bindgen_ty_97 = ::std::os::raw::c_int;
pub type AudioUnitPropertyID = UInt32;
pub type AudioUnitScope = UInt32;
pub type AudioUnitElement = UInt32;
pub type AudioUnitParameterID = UInt32;
pub type AudioUnitParameterValue = Float32;
pub type AUParameterEventType = UInt32;
pub const kParameterEvent_Immediate: ::std::os::raw::c_uint = 1;
pub const kParameterEvent_Ramped: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_98 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AudioUnitParameterEvent {
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub parameter: AudioUnitParameterID,
    pub eventType: AUParameterEventType,
    pub eventValues: AudioUnitParameterEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AudioUnitParameterEvent__bindgen_ty_1 {
    pub ramp: AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1,
    pub immediate: AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1 {
    pub startBufferOffset: SInt32,
    pub durationInFrames: UInt32,
    pub startValue: AudioUnitParameterValue,
    pub endValue: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1>()))
                .startBufferOffset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(startBufferOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1>()))
                .durationInFrames as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(durationInFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1>()))
                .startValue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(startValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1>())).endValue
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(endValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2 {
    pub bufferOffset: UInt32,
    pub value: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2>()))
                .bufferOffset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bufferOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2>())).value
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_AudioUnitParameterEvent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterEvent__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterEvent__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1>())).ramp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1),
            "::",
            stringify!(ramp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent__bindgen_ty_1>())).immediate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent__bindgen_ty_1),
            "::",
            stringify!(immediate)
        )
    );
}
impl Default for AudioUnitParameterEvent__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_AudioUnitParameterEvent() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterEvent>(),
        32usize,
        concat!("Size of: ", stringify!(AudioUnitParameterEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitParameterEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterEvent>())).scope as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterEvent>())).element as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent>())).parameter as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent),
            "::",
            stringify!(parameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent>())).eventType as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent),
            "::",
            stringify!(eventType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterEvent>())).eventValues as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterEvent),
            "::",
            stringify!(eventValues)
        )
    );
}
impl Default for AudioUnitParameterEvent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameter {
    pub mAudioUnit: AudioUnit,
    pub mParameterID: AudioUnitParameterID,
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
}
#[test]
fn bindgen_test_layout_AudioUnitParameter() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameter>(),
        24usize,
        concat!("Size of: ", stringify!(AudioUnitParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameter>())).mAudioUnit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameter),
            "::",
            stringify!(mAudioUnit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameter>())).mParameterID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameter),
            "::",
            stringify!(mParameterID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameter>())).mScope as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameter),
            "::",
            stringify!(mScope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameter>())).mElement as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameter),
            "::",
            stringify!(mElement)
        )
    );
}
impl Default for AudioUnitParameter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitProperty {
    pub mAudioUnit: AudioUnit,
    pub mPropertyID: AudioUnitPropertyID,
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
}
#[test]
fn bindgen_test_layout_AudioUnitProperty() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitProperty>(),
        24usize,
        concat!("Size of: ", stringify!(AudioUnitProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitProperty))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitProperty>())).mAudioUnit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitProperty),
            "::",
            stringify!(mAudioUnit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitProperty>())).mPropertyID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitProperty),
            "::",
            stringify!(mPropertyID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitProperty>())).mScope as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitProperty),
            "::",
            stringify!(mScope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitProperty>())).mElement as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitProperty),
            "::",
            stringify!(mElement)
        )
    );
}
impl Default for AudioUnitProperty {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AURenderCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inRefCon: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inBusNumber: UInt32,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus,
>;
pub type AudioUnitPropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inRefCon: *mut ::std::os::raw::c_void,
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
    ),
>;
pub type AUInputSamplesInOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inRefCon: *mut ::std::os::raw::c_void,
        inOutputTimeStamp: *const AudioTimeStamp,
        inInputSample: Float64,
        inNumberInputSamples: Float64,
    ),
>;
extern "C" {
    pub static kAudioComponentRegistrationsChangedNotification: CFStringRef;
}
extern "C" {
    pub static kAudioComponentInstanceInvalidationNotification: CFStringRef;
}
extern "C" {
    pub fn AudioUnitInitialize(inUnit: AudioUnit) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitUninitialize(inUnit: AudioUnit) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitGetPropertyInfo(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitGetProperty(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outData: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitSetProperty(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitAddPropertyListener(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inProc: AudioUnitPropertyListenerProc,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitRemovePropertyListenerWithUserData(
        inUnit: AudioUnit,
        inID: AudioUnitPropertyID,
        inProc: AudioUnitPropertyListenerProc,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitAddRenderNotify(
        inUnit: AudioUnit,
        inProc: AURenderCallback,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitRemoveRenderNotify(
        inUnit: AudioUnit,
        inProc: AURenderCallback,
        inProcUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitGetParameter(
        inUnit: AudioUnit,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outValue: *mut AudioUnitParameterValue,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitSetParameter(
        inUnit: AudioUnit,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inValue: AudioUnitParameterValue,
        inBufferOffsetInFrames: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitScheduleParameters(
        inUnit: AudioUnit,
        inParameterEvent: *const AudioUnitParameterEvent,
        inNumParamEvents: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitRender(
        inUnit: AudioUnit,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inOutputBusNumber: UInt32,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitProcess(
        inUnit: AudioUnit,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitProcessMultiple(
        inUnit: AudioUnit,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        inNumberInputBufferLists: UInt32,
        inInputBufferLists: *mut *const AudioBufferList,
        inNumberOutputBufferLists: UInt32,
        ioOutputBufferLists: *mut *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitReset(
        inUnit: AudioUnit,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioOutputUnitPublish(
        inDesc: *const AudioComponentDescription,
        inName: CFStringRef,
        inVersion: UInt32,
        inOutputUnit: AudioUnit,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioComponentGetLastActiveTime(comp: AudioComponent) -> CFAbsoluteTime;
}
extern "C" {
    pub fn AudioUnitExtensionSetComponentList(
        extensionIdentifier: CFStringRef,
        audioComponentInfo: CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioUnitExtensionCopyComponentList(extensionIdentifier: CFStringRef) -> CFArrayRef;
}
pub const kAudioUnitRange: ::std::os::raw::c_uint = 0;
pub const kAudioUnitInitializeSelect: ::std::os::raw::c_uint = 1;
pub const kAudioUnitUninitializeSelect: ::std::os::raw::c_uint = 2;
pub const kAudioUnitGetPropertyInfoSelect: ::std::os::raw::c_uint = 3;
pub const kAudioUnitGetPropertySelect: ::std::os::raw::c_uint = 4;
pub const kAudioUnitSetPropertySelect: ::std::os::raw::c_uint = 5;
pub const kAudioUnitAddPropertyListenerSelect: ::std::os::raw::c_uint = 10;
pub const kAudioUnitRemovePropertyListenerSelect: ::std::os::raw::c_uint = 11;
pub const kAudioUnitRemovePropertyListenerWithUserDataSelect: ::std::os::raw::c_uint = 18;
pub const kAudioUnitAddRenderNotifySelect: ::std::os::raw::c_uint = 15;
pub const kAudioUnitRemoveRenderNotifySelect: ::std::os::raw::c_uint = 16;
pub const kAudioUnitGetParameterSelect: ::std::os::raw::c_uint = 6;
pub const kAudioUnitSetParameterSelect: ::std::os::raw::c_uint = 7;
pub const kAudioUnitScheduleParametersSelect: ::std::os::raw::c_uint = 17;
pub const kAudioUnitRenderSelect: ::std::os::raw::c_uint = 14;
pub const kAudioUnitResetSelect: ::std::os::raw::c_uint = 9;
pub const kAudioUnitComplexRenderSelect: ::std::os::raw::c_uint = 19;
pub const kAudioUnitProcessSelect: ::std::os::raw::c_uint = 20;
pub const kAudioUnitProcessMultipleSelect: ::std::os::raw::c_uint = 21;
pub type _bindgen_ty_99 = ::std::os::raw::c_uint;
pub type AudioUnitInitializeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioUnitUninitializeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioUnitGetPropertyInfoProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        scope: AudioUnitScope,
        elem: AudioUnitElement,
        outDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus,
>;
pub type AudioUnitGetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outData: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitSetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inID: AudioUnitPropertyID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitAddPropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        proc_: AudioUnitPropertyListenerProc,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitRemovePropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        proc_: AudioUnitPropertyListenerProc,
    ) -> OSStatus,
>;
pub type AudioUnitRemovePropertyListenerWithUserDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        prop: AudioUnitPropertyID,
        proc_: AudioUnitPropertyListenerProc,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitAddRenderNotifyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        proc_: AURenderCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitRemoveRenderNotifyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        proc_: AURenderCallback,
        userData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioUnitScheduleParametersProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        events: *const AudioUnitParameterEvent,
        numEvents: UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitResetProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
    ) -> OSStatus,
>;
pub type AudioUnitComplexRenderProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inOutputBusNumber: UInt32,
        inNumberOfPackets: UInt32,
        outNumberOfPackets: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        ioData: *mut AudioBufferList,
        outMetadata: *mut ::std::os::raw::c_void,
        outMetadataByteSize: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitProcessProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus,
>;
pub type AudioUnitProcessMultipleProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inNumberFrames: UInt32,
        inNumberInputBufferLists: UInt32,
        inInputBufferLists: *mut *const AudioBufferList,
        inNumberOutputBufferLists: UInt32,
        ioOutputBufferLists: *mut *mut AudioBufferList,
    ) -> OSStatus,
>;
pub type AudioUnitGetParameterProc = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        outValue: *mut AudioUnitParameterValue,
    ) -> OSStatus,
>;
pub type AudioUnitSetParameterProc = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inID: AudioUnitParameterID,
        inScope: AudioUnitScope,
        inElement: AudioUnitElement,
        inValue: AudioUnitParameterValue,
        inBufferOffsetInFrames: UInt32,
    ) -> OSStatus,
>;
pub type AudioUnitRenderProc = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        ioActionFlags: *mut AudioUnitRenderActionFlags,
        inTimeStamp: *const AudioTimeStamp,
        inOutputBusNumber: UInt32,
        inNumberFrames: UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus,
>;
pub const kAudioUnitErr_IllegalInstrument: ::std::os::raw::c_int = -10873;
pub const kAudioUnitErr_InstrumentTypeNotFound: ::std::os::raw::c_int = -10872;
pub type _bindgen_ty_100 = ::std::os::raw::c_int;
pub type AudioCodec = AudioComponentInstance;
pub type AudioCodecPropertyID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioCodecMagicCookieInfo {
    pub mMagicCookieSize: UInt32,
    pub mMagicCookie: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AudioCodecMagicCookieInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioCodecMagicCookieInfo>(),
        16usize,
        concat!("Size of: ", stringify!(AudioCodecMagicCookieInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioCodecMagicCookieInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioCodecMagicCookieInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioCodecMagicCookieInfo>())).mMagicCookieSize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioCodecMagicCookieInfo),
            "::",
            stringify!(mMagicCookieSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioCodecMagicCookieInfo>())).mMagicCookie as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioCodecMagicCookieInfo),
            "::",
            stringify!(mMagicCookie)
        )
    );
}
impl Default for AudioCodecMagicCookieInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAudioDecoderComponentType: ::std::os::raw::c_uint = 1633969507;
pub const kAudioEncoderComponentType: ::std::os::raw::c_uint = 1634037347;
pub const kAudioUnityCodecComponentType: ::std::os::raw::c_uint = 1633903715;
pub type _bindgen_ty_101 = ::std::os::raw::c_uint;
pub const kAudioCodecPropertySupportedInputFormats: ::std::os::raw::c_uint = 1768320291;
pub const kAudioCodecPropertySupportedOutputFormats: ::std::os::raw::c_uint = 1868983587;
pub const kAudioCodecPropertyAvailableInputSampleRates: ::std::os::raw::c_uint = 1634300786;
pub const kAudioCodecPropertyAvailableOutputSampleRates: ::std::os::raw::c_uint = 1634694002;
pub const kAudioCodecPropertyAvailableBitRateRange: ::std::os::raw::c_uint = 1633841780;
pub const kAudioCodecPropertyMinimumNumberInputPackets: ::std::os::raw::c_uint = 1835952496;
pub const kAudioCodecPropertyMinimumNumberOutputPackets: ::std::os::raw::c_uint = 1835954032;
pub const kAudioCodecPropertyAvailableNumberChannels: ::std::os::raw::c_uint = 1668116067;
pub const kAudioCodecPropertyDoesSampleRateConversion: ::std::os::raw::c_uint = 1819112035;
pub const kAudioCodecPropertyAvailableInputChannelLayoutTags: ::std::os::raw::c_uint = 1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayoutTags: ::std::os::raw::c_uint = 1634689900;
pub const kAudioCodecPropertyInputFormatsForOutputFormat: ::std::os::raw::c_uint = 1768305775;
pub const kAudioCodecPropertyOutputFormatsForInputFormat: ::std::os::raw::c_uint = 1868969065;
pub const kAudioCodecPropertyFormatInfo: ::std::os::raw::c_uint = 1633904233;
pub type _bindgen_ty_102 = ::std::os::raw::c_uint;
pub const kAudioCodecPropertyInputBufferSize: ::std::os::raw::c_uint = 1952609638;
pub const kAudioCodecPropertyPacketFrameSize: ::std::os::raw::c_uint = 1885432678;
pub const kAudioCodecPropertyHasVariablePacketByteSizes: ::std::os::raw::c_uint = 1987078975;
pub const kAudioCodecPropertyEmploysDependentPackets: ::std::os::raw::c_uint = 1685089087;
pub const kAudioCodecPropertyMaximumPacketByteSize: ::std::os::raw::c_uint = 1885432674;
pub const kAudioCodecPropertyPacketSizeLimitForVBR: ::std::os::raw::c_uint = 1885432684;
pub const kAudioCodecPropertyCurrentInputFormat: ::std::os::raw::c_uint = 1768320372;
pub const kAudioCodecPropertyCurrentOutputFormat: ::std::os::raw::c_uint = 1868983668;
pub const kAudioCodecPropertyMagicCookie: ::std::os::raw::c_uint = 1802857321;
pub const kAudioCodecPropertyUsedInputBufferSize: ::std::os::raw::c_uint = 1969386854;
pub const kAudioCodecPropertyIsInitialized: ::std::os::raw::c_uint = 1768843636;
pub const kAudioCodecPropertyCurrentTargetBitRate: ::std::os::raw::c_uint = 1651663220;
pub const kAudioCodecPropertyCurrentInputSampleRate: ::std::os::raw::c_uint = 1667855218;
pub const kAudioCodecPropertyCurrentOutputSampleRate: ::std::os::raw::c_uint = 1668248434;
pub const kAudioCodecPropertyQualitySetting: ::std::os::raw::c_uint = 1936876401;
pub const kAudioCodecPropertyApplicableBitRateRange: ::std::os::raw::c_uint = 1651668065;
pub const kAudioCodecPropertyRecommendedBitRateRange: ::std::os::raw::c_uint = 1651668082;
pub const kAudioCodecPropertyApplicableInputSampleRates: ::std::os::raw::c_uint = 1769173601;
pub const kAudioCodecPropertyApplicableOutputSampleRates: ::std::os::raw::c_uint = 1869836897;
pub const kAudioCodecPropertyPaddedZeros: ::std::os::raw::c_uint = 1885430832;
pub const kAudioCodecPropertyPrimeMethod: ::std::os::raw::c_uint = 1886547309;
pub const kAudioCodecPropertyPrimeInfo: ::std::os::raw::c_uint = 1886546285;
pub const kAudioCodecPropertyCurrentInputChannelLayout: ::std::os::raw::c_uint = 1768123424;
pub const kAudioCodecPropertyCurrentOutputChannelLayout: ::std::os::raw::c_uint = 1868786720;
pub const kAudioCodecPropertySettings: ::std::os::raw::c_uint = 1633907488;
pub const kAudioCodecPropertyFormatList: ::std::os::raw::c_uint = 1633904236;
pub const kAudioCodecPropertyBitRateControlMode: ::std::os::raw::c_uint = 1633903206;
pub const kAudioCodecPropertySoundQualityForVBR: ::std::os::raw::c_uint = 1986163313;
pub const kAudioCodecPropertyBitRateForVBR: ::std::os::raw::c_uint = 1986163298;
pub const kAudioCodecPropertyDelayMode: ::std::os::raw::c_uint = 1684893540;
pub const kAudioCodecPropertyAdjustLocalQuality: ::std::os::raw::c_uint = 1584488812;
pub const kAudioCodecPropertyProgramTargetLevel: ::std::os::raw::c_uint = 1886418028;
pub const kAudioCodecPropertyDynamicRangeControlMode: ::std::os::raw::c_uint = 1835299427;
pub const kAudioCodecPropertyProgramTargetLevelConstant: ::std::os::raw::c_uint = 1886678115;
pub type _bindgen_ty_103 = ::std::os::raw::c_uint;
pub const kAudioCodecQuality_Max: ::std::os::raw::c_uint = 127;
pub const kAudioCodecQuality_High: ::std::os::raw::c_uint = 96;
pub const kAudioCodecQuality_Medium: ::std::os::raw::c_uint = 64;
pub const kAudioCodecQuality_Low: ::std::os::raw::c_uint = 32;
pub const kAudioCodecQuality_Min: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_104 = ::std::os::raw::c_uint;
pub const kAudioCodecPrimeMethod_Pre: ::std::os::raw::c_uint = 0;
pub const kAudioCodecPrimeMethod_Normal: ::std::os::raw::c_uint = 1;
pub const kAudioCodecPrimeMethod_None: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_105 = ::std::os::raw::c_uint;
pub const kAudioCodecBitRateControlMode_Constant: ::std::os::raw::c_uint = 0;
pub const kAudioCodecBitRateControlMode_LongTermAverage: ::std::os::raw::c_uint = 1;
pub const kAudioCodecBitRateControlMode_VariableConstrained: ::std::os::raw::c_uint = 2;
pub const kAudioCodecBitRateControlMode_Variable: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_106 = ::std::os::raw::c_uint;
pub const kAudioCodecDelayMode_Compatibility: ::std::os::raw::c_uint = 0;
pub const kAudioCodecDelayMode_Minimum: ::std::os::raw::c_uint = 1;
pub const kAudioCodecDelayMode_Optimal: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_107 = ::std::os::raw::c_uint;
pub const kProgramTargetLevel_None: ::std::os::raw::c_uint = 0;
pub const kProgramTargetLevel_Minus31dB: ::std::os::raw::c_uint = 1;
pub const kProgramTargetLevel_Minus23dB: ::std::os::raw::c_uint = 2;
pub const kProgramTargetLevel_Minus20dB: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_108 = ::std::os::raw::c_uint;
pub const kDynamicRangeControlMode_None: ::std::os::raw::c_uint = 0;
pub const kDynamicRangeControlMode_Light: ::std::os::raw::c_uint = 1;
pub const kDynamicRangeControlMode_Heavy: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_109 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioCodecPrimeInfo {
    pub leadingFrames: UInt32,
    pub trailingFrames: UInt32,
}
#[test]
fn bindgen_test_layout_AudioCodecPrimeInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioCodecPrimeInfo>(),
        8usize,
        concat!("Size of: ", stringify!(AudioCodecPrimeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioCodecPrimeInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioCodecPrimeInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioCodecPrimeInfo>())).leadingFrames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioCodecPrimeInfo),
            "::",
            stringify!(leadingFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioCodecPrimeInfo>())).trailingFrames as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioCodecPrimeInfo),
            "::",
            stringify!(trailingFrames)
        )
    );
}
pub type AudioSettingsFlags = UInt32;
pub const kAudioSettingsFlags_ExpertParameter: ::std::os::raw::c_uint = 1;
pub const kAudioSettingsFlags_InvisibleParameter: ::std::os::raw::c_uint = 2;
pub const kAudioSettingsFlags_MetaParameter: ::std::os::raw::c_uint = 4;
pub const kAudioSettingsFlags_UserInterfaceParameter: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_110 = ::std::os::raw::c_uint;
pub const kAudioCodecProduceOutputPacketFailure: ::std::os::raw::c_uint = 1;
pub const kAudioCodecProduceOutputPacketSuccess: ::std::os::raw::c_uint = 2;
pub const kAudioCodecProduceOutputPacketSuccessHasMore: ::std::os::raw::c_uint = 3;
pub const kAudioCodecProduceOutputPacketNeedsMoreInputData: ::std::os::raw::c_uint = 4;
pub const kAudioCodecProduceOutputPacketAtEOF: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_111 = ::std::os::raw::c_uint;
pub const kAudioCodecGetPropertyInfoSelect: ::std::os::raw::c_uint = 1;
pub const kAudioCodecGetPropertySelect: ::std::os::raw::c_uint = 2;
pub const kAudioCodecSetPropertySelect: ::std::os::raw::c_uint = 3;
pub const kAudioCodecInitializeSelect: ::std::os::raw::c_uint = 4;
pub const kAudioCodecUninitializeSelect: ::std::os::raw::c_uint = 5;
pub const kAudioCodecAppendInputDataSelect: ::std::os::raw::c_uint = 6;
pub const kAudioCodecProduceOutputDataSelect: ::std::os::raw::c_uint = 7;
pub const kAudioCodecResetSelect: ::std::os::raw::c_uint = 8;
pub const kAudioCodecAppendInputBufferListSelect: ::std::os::raw::c_uint = 9;
pub const kAudioCodecProduceOutputBufferListSelect: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_112 = ::std::os::raw::c_uint;
pub const kAudioCodecNoError: ::std::os::raw::c_uint = 0;
pub const kAudioCodecUnspecifiedError: ::std::os::raw::c_uint = 2003329396;
pub const kAudioCodecUnknownPropertyError: ::std::os::raw::c_uint = 2003332927;
pub const kAudioCodecBadPropertySizeError: ::std::os::raw::c_uint = 561211770;
pub const kAudioCodecIllegalOperationError: ::std::os::raw::c_uint = 1852797029;
pub const kAudioCodecUnsupportedFormatError: ::std::os::raw::c_uint = 560226676;
pub const kAudioCodecStateError: ::std::os::raw::c_uint = 561214580;
pub const kAudioCodecNotEnoughBufferSpaceError: ::std::os::raw::c_uint = 560100710;
pub const kAudioCodecBadDataError: ::std::os::raw::c_uint = 1650549857;
pub type _bindgen_ty_113 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioCodecGetPropertyInfo(
        inCodec: AudioCodec,
        inPropertyID: AudioCodecPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecGetProperty(
        inCodec: AudioCodec,
        inPropertyID: AudioCodecPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecSetProperty(
        inCodec: AudioCodec,
        inPropertyID: AudioCodecPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecInitialize(
        inCodec: AudioCodec,
        inInputFormat: *const AudioStreamBasicDescription,
        inOutputFormat: *const AudioStreamBasicDescription,
        inMagicCookie: *const ::std::os::raw::c_void,
        inMagicCookieByteSize: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecUninitialize(inCodec: AudioCodec) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecAppendInputData(
        inCodec: AudioCodec,
        inInputData: *const ::std::os::raw::c_void,
        ioInputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecProduceOutputPackets(
        inCodec: AudioCodec,
        outOutputData: *mut ::std::os::raw::c_void,
        ioOutputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecAppendInputBufferList(
        inCodec: AudioCodec,
        inBufferList: *const AudioBufferList,
        ioNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
        outBytesConsumed: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecProduceOutputBufferList(
        inCodec: AudioCodec,
        ioBufferList: *mut AudioBufferList,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioCodecReset(inCodec: AudioCodec) -> OSStatus;
}
pub type AudioCodecGetPropertyInfoProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioCodecPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus,
>;
pub type AudioCodecGetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioCodecPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioCodecSetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioCodecPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioCodecInitializeProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inInputFormat: *const AudioStreamBasicDescription,
        inOutputFormat: *const AudioStreamBasicDescription,
        inMagicCookie: *const ::std::os::raw::c_void,
        inMagicCookieByteSize: UInt32,
    ) -> OSStatus,
>;
pub type AudioCodecUninitializeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioCodecAppendInputDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inInputData: *const ::std::os::raw::c_void,
        ioInputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
    ) -> OSStatus,
>;
pub type AudioCodecProduceOutputPacketsProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        outOutputData: *mut ::std::os::raw::c_void,
        ioOutputDataByteSize: *mut UInt32,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioCodecResetProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioCodecAppendInputBufferListProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioBufferList: *const AudioBufferList,
        inNumberPackets: *mut UInt32,
        inPacketDescription: *const AudioStreamPacketDescription,
        outBytesConsumed: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioCodecProduceOutputBufferListProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        ioBufferList: *mut AudioBufferList,
        ioNumberPackets: *mut UInt32,
        outPacketDescription: *mut AudioStreamPacketDescription,
        outStatus: *mut UInt32,
    ) -> OSStatus,
>;
pub const kAudioCodecPropertyMinimumDelayMode: ::std::os::raw::c_uint = 1835296108;
pub type _bindgen_ty_114 = ::std::os::raw::c_uint;
pub const kAudioCodecPropertyNameCFString: ::std::os::raw::c_uint = 1819173229;
pub const kAudioCodecPropertyManufacturerCFString: ::std::os::raw::c_uint = 1819107691;
pub const kAudioCodecPropertyFormatCFString: ::std::os::raw::c_uint = 1818652530;
pub type _bindgen_ty_115 = ::std::os::raw::c_uint;
pub const kAudioCodecPropertyRequiresPacketDescription: ::std::os::raw::c_uint = 1885432676;
pub const kAudioCodecPropertyAvailableBitRates: ::std::os::raw::c_uint = 1651668003;
pub const kAudioCodecExtendFrequencies: ::std::os::raw::c_uint = 1633903974;
pub const kAudioCodecUseRecommendedSampleRate: ::std::os::raw::c_uint = 1970434930;
pub const kAudioCodecOutputPrecedence: ::std::os::raw::c_uint = 1869639794;
pub const kAudioCodecBitRateFormat: ::std::os::raw::c_uint = 1633903206;
pub const kAudioCodecDoesSampleRateConversion: ::std::os::raw::c_uint = 1819112035;
pub const kAudioCodecInputFormatsForOutputFormat: ::std::os::raw::c_uint = 1768305775;
pub const kAudioCodecOutputFormatsForInputFormat: ::std::os::raw::c_uint = 1868969065;
pub const kAudioCodecPropertyInputChannelLayout: ::std::os::raw::c_uint = 1768123424;
pub const kAudioCodecPropertyOutputChannelLayout: ::std::os::raw::c_uint = 1868786720;
pub const kAudioCodecPropertyAvailableInputChannelLayouts: ::std::os::raw::c_uint = 1634296684;
pub const kAudioCodecPropertyAvailableOutputChannelLayouts: ::std::os::raw::c_uint = 1634689900;
pub const kAudioCodecPropertyZeroFramesPadded: ::std::os::raw::c_uint = 1885430832;
pub type _bindgen_ty_116 = ::std::os::raw::c_uint;
pub const kAudioCodecBitRateFormat_CBR: ::std::os::raw::c_uint = 0;
pub const kAudioCodecBitRateFormat_ABR: ::std::os::raw::c_uint = 1;
pub const kAudioCodecBitRateFormat_VBR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_117 = ::std::os::raw::c_uint;
pub const kAudioCodecOutputPrecedenceNone: ::std::os::raw::c_uint = 0;
pub const kAudioCodecOutputPrecedenceBitRate: ::std::os::raw::c_uint = 1;
pub const kAudioCodecOutputPrecedenceSampleRate: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_118 = ::std::os::raw::c_uint;
pub type MagicCookieInfo = AudioCodecMagicCookieInfo;
pub const kHintBasic: ::std::os::raw::c_uint = 0;
pub const kHintAdvanced: ::std::os::raw::c_uint = 1;
pub const kHintHidden: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_119 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioOutputUnitStart(ci: AudioUnit) -> OSStatus;
}
extern "C" {
    pub fn AudioOutputUnitStop(ci: AudioUnit) -> OSStatus;
}
pub const kAudioOutputUnitRange: ::std::os::raw::c_uint = 512;
pub const kAudioOutputUnitStartSelect: ::std::os::raw::c_uint = 513;
pub const kAudioOutputUnitStopSelect: ::std::os::raw::c_uint = 514;
pub type _bindgen_ty_120 = ::std::os::raw::c_uint;
pub type AudioOutputUnitStartProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioOutputUnitStopProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub const kAUGroupParameterID_Volume: ::std::os::raw::c_uint = 7;
pub const kAUGroupParameterID_Sustain: ::std::os::raw::c_uint = 64;
pub const kAUGroupParameterID_Sostenuto: ::std::os::raw::c_uint = 66;
pub const kAUGroupParameterID_AllNotesOff: ::std::os::raw::c_uint = 123;
pub const kAUGroupParameterID_ModWheel: ::std::os::raw::c_uint = 1;
pub const kAUGroupParameterID_PitchBend: ::std::os::raw::c_uint = 224;
pub const kAUGroupParameterID_AllSoundOff: ::std::os::raw::c_uint = 120;
pub const kAUGroupParameterID_ResetAllControllers: ::std::os::raw::c_uint = 121;
pub const kAUGroupParameterID_Pan: ::std::os::raw::c_uint = 10;
pub const kAUGroupParameterID_Foot: ::std::os::raw::c_uint = 4;
pub const kAUGroupParameterID_ChannelPressure: ::std::os::raw::c_uint = 208;
pub const kAUGroupParameterID_KeyPressure: ::std::os::raw::c_uint = 160;
pub const kAUGroupParameterID_Expression: ::std::os::raw::c_uint = 11;
pub const kAUGroupParameterID_DataEntry: ::std::os::raw::c_uint = 6;
pub const kAUGroupParameterID_Volume_LSB: ::std::os::raw::c_uint = 39;
pub const kAUGroupParameterID_ModWheel_LSB: ::std::os::raw::c_uint = 33;
pub const kAUGroupParameterID_Pan_LSB: ::std::os::raw::c_uint = 42;
pub const kAUGroupParameterID_Foot_LSB: ::std::os::raw::c_uint = 36;
pub const kAUGroupParameterID_Expression_LSB: ::std::os::raw::c_uint = 43;
pub const kAUGroupParameterID_DataEntry_LSB: ::std::os::raw::c_uint = 38;
pub const kAUGroupParameterID_KeyPressure_FirstKey: ::std::os::raw::c_uint = 256;
pub const kAUGroupParameterID_KeyPressure_LastKey: ::std::os::raw::c_uint = 383;
pub type _bindgen_ty_121 = ::std::os::raw::c_uint;
pub const kPannerParam_Gain: ::std::os::raw::c_uint = 0;
pub const kPannerParam_Azimuth: ::std::os::raw::c_uint = 1;
pub const kPannerParam_Elevation: ::std::os::raw::c_uint = 2;
pub const kPannerParam_Distance: ::std::os::raw::c_uint = 3;
pub const kPannerParam_CoordScale: ::std::os::raw::c_uint = 4;
pub const kPannerParam_RefDistance: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_122 = ::std::os::raw::c_uint;
pub const kSpatialMixerParam_Azimuth: ::std::os::raw::c_uint = 0;
pub const kSpatialMixerParam_Elevation: ::std::os::raw::c_uint = 1;
pub const kSpatialMixerParam_Distance: ::std::os::raw::c_uint = 2;
pub const kSpatialMixerParam_Gain: ::std::os::raw::c_uint = 3;
pub const kSpatialMixerParam_PlaybackRate: ::std::os::raw::c_uint = 4;
pub const kSpatialMixerParam_Enable: ::std::os::raw::c_uint = 5;
pub const kSpatialMixerParam_MinGain: ::std::os::raw::c_uint = 6;
pub const kSpatialMixerParam_MaxGain: ::std::os::raw::c_uint = 7;
pub const kSpatialMixerParam_ReverbBlend: ::std::os::raw::c_uint = 8;
pub const kSpatialMixerParam_GlobalReverbGain: ::std::os::raw::c_uint = 9;
pub const kSpatialMixerParam_OcclusionAttenuation: ::std::os::raw::c_uint = 10;
pub const kSpatialMixerParam_ObstructionAttenuation: ::std::os::raw::c_uint = 11;
pub const kSpatialMixerParam_HeadYaw: ::std::os::raw::c_uint = 19;
pub const kSpatialMixerParam_HeadPitch: ::std::os::raw::c_uint = 20;
pub const kSpatialMixerParam_HeadRoll: ::std::os::raw::c_uint = 21;
pub type _bindgen_ty_123 = ::std::os::raw::c_uint;
pub const kReverbParam_FilterFrequency: ::std::os::raw::c_uint = 14;
pub const kReverbParam_FilterBandwidth: ::std::os::raw::c_uint = 15;
pub const kReverbParam_FilterGain: ::std::os::raw::c_uint = 16;
pub const kReverbParam_FilterType: ::std::os::raw::c_uint = 17;
pub const kReverbParam_FilterEnable: ::std::os::raw::c_uint = 18;
pub type _bindgen_ty_124 = ::std::os::raw::c_uint;
pub const k3DMixerParam_Azimuth: ::std::os::raw::c_uint = 0;
pub const k3DMixerParam_Elevation: ::std::os::raw::c_uint = 1;
pub const k3DMixerParam_Distance: ::std::os::raw::c_uint = 2;
pub const k3DMixerParam_Gain: ::std::os::raw::c_uint = 3;
pub const k3DMixerParam_PlaybackRate: ::std::os::raw::c_uint = 4;
pub const k3DMixerParam_BusEnable: ::std::os::raw::c_uint = 20;
pub const k3DMixerParam_MinGainInDecibels: ::std::os::raw::c_uint = 21;
pub const k3DMixerParam_MaxGainInDecibels: ::std::os::raw::c_uint = 22;
pub const k3DMixerParam_DryWetReverbBlend: ::std::os::raw::c_uint = 23;
pub const k3DMixerParam_GlobalReverbGainInDecibels: ::std::os::raw::c_uint = 24;
pub const k3DMixerParam_OcclusionAttenuationInDecibels: ::std::os::raw::c_uint = 25;
pub const k3DMixerParam_ObstructionAttenuationInDecibels: ::std::os::raw::c_uint = 26;
pub const k3DMixerParam_ReverbBlend: ::std::os::raw::c_uint = 5;
pub const k3DMixerParam_GlobalReverbGain: ::std::os::raw::c_uint = 6;
pub const k3DMixerParam_OcclusionAttenuation: ::std::os::raw::c_uint = 7;
pub const k3DMixerParam_ObstructionAttenuation: ::std::os::raw::c_uint = 8;
pub const k3DMixerParam_MinGain: ::std::os::raw::c_uint = 9;
pub const k3DMixerParam_MaxGain: ::std::os::raw::c_uint = 10;
pub const k3DMixerParam_PreAveragePower: ::std::os::raw::c_uint = 1000;
pub const k3DMixerParam_PrePeakHoldLevel: ::std::os::raw::c_uint = 2000;
pub const k3DMixerParam_PostAveragePower: ::std::os::raw::c_uint = 3000;
pub const k3DMixerParam_PostPeakHoldLevel: ::std::os::raw::c_uint = 4000;
pub type _bindgen_ty_125 = ::std::os::raw::c_uint;
pub const kMultiChannelMixerParam_Volume: ::std::os::raw::c_uint = 0;
pub const kMultiChannelMixerParam_Enable: ::std::os::raw::c_uint = 1;
pub const kMultiChannelMixerParam_Pan: ::std::os::raw::c_uint = 2;
pub const kMultiChannelMixerParam_PreAveragePower: ::std::os::raw::c_uint = 1000;
pub const kMultiChannelMixerParam_PrePeakHoldLevel: ::std::os::raw::c_uint = 2000;
pub const kMultiChannelMixerParam_PostAveragePower: ::std::os::raw::c_uint = 3000;
pub const kMultiChannelMixerParam_PostPeakHoldLevel: ::std::os::raw::c_uint = 4000;
pub type _bindgen_ty_126 = ::std::os::raw::c_uint;
pub const kMatrixMixerParam_Volume: ::std::os::raw::c_uint = 0;
pub const kMatrixMixerParam_Enable: ::std::os::raw::c_uint = 1;
pub const kMatrixMixerParam_PreAveragePower: ::std::os::raw::c_uint = 1000;
pub const kMatrixMixerParam_PrePeakHoldLevel: ::std::os::raw::c_uint = 2000;
pub const kMatrixMixerParam_PostAveragePower: ::std::os::raw::c_uint = 3000;
pub const kMatrixMixerParam_PostPeakHoldLevel: ::std::os::raw::c_uint = 4000;
pub const kMatrixMixerParam_PreAveragePowerLinear: ::std::os::raw::c_uint = 5000;
pub const kMatrixMixerParam_PrePeakHoldLevelLinear: ::std::os::raw::c_uint = 6000;
pub const kMatrixMixerParam_PostAveragePowerLinear: ::std::os::raw::c_uint = 7000;
pub const kMatrixMixerParam_PostPeakHoldLevelLinear: ::std::os::raw::c_uint = 8000;
pub type _bindgen_ty_127 = ::std::os::raw::c_uint;
pub const kHALOutputParam_Volume: ::std::os::raw::c_uint = 14;
pub type _bindgen_ty_128 = ::std::os::raw::c_uint;
pub const kTimePitchParam_Rate: ::std::os::raw::c_uint = 0;
pub const kTimePitchParam_Pitch: ::std::os::raw::c_uint = 1;
pub const kTimePitchParam_EffectBlend: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_129 = ::std::os::raw::c_uint;
pub const kNewTimePitchParam_Rate: ::std::os::raw::c_uint = 0;
pub const kNewTimePitchParam_Pitch: ::std::os::raw::c_uint = 1;
pub const kNewTimePitchParam_Overlap: ::std::os::raw::c_uint = 4;
pub const kNewTimePitchParam_EnablePeakLocking: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_130 = ::std::os::raw::c_uint;
pub const kAUSamplerParam_Gain: ::std::os::raw::c_uint = 900;
pub const kAUSamplerParam_CoarseTuning: ::std::os::raw::c_uint = 901;
pub const kAUSamplerParam_FineTuning: ::std::os::raw::c_uint = 902;
pub const kAUSamplerParam_Pan: ::std::os::raw::c_uint = 903;
pub type _bindgen_ty_131 = ::std::os::raw::c_uint;
pub const kBandpassParam_CenterFrequency: ::std::os::raw::c_uint = 0;
pub const kBandpassParam_Bandwidth: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_132 = ::std::os::raw::c_uint;
pub const kHipassParam_CutoffFrequency: ::std::os::raw::c_uint = 0;
pub const kHipassParam_Resonance: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_133 = ::std::os::raw::c_uint;
pub const kLowPassParam_CutoffFrequency: ::std::os::raw::c_uint = 0;
pub const kLowPassParam_Resonance: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_134 = ::std::os::raw::c_uint;
pub const kHighShelfParam_CutOffFrequency: ::std::os::raw::c_uint = 0;
pub const kHighShelfParam_Gain: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_135 = ::std::os::raw::c_uint;
pub const kAULowShelfParam_CutoffFrequency: ::std::os::raw::c_uint = 0;
pub const kAULowShelfParam_Gain: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_136 = ::std::os::raw::c_uint;
pub const kParametricEQParam_CenterFreq: ::std::os::raw::c_uint = 0;
pub const kParametricEQParam_Q: ::std::os::raw::c_uint = 1;
pub const kParametricEQParam_Gain: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_137 = ::std::os::raw::c_uint;
pub const kLimiterParam_AttackTime: ::std::os::raw::c_uint = 0;
pub const kLimiterParam_DecayTime: ::std::os::raw::c_uint = 1;
pub const kLimiterParam_PreGain: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_138 = ::std::os::raw::c_uint;
pub const kDynamicsProcessorParam_Threshold: ::std::os::raw::c_uint = 0;
pub const kDynamicsProcessorParam_HeadRoom: ::std::os::raw::c_uint = 1;
pub const kDynamicsProcessorParam_ExpansionRatio: ::std::os::raw::c_uint = 2;
pub const kDynamicsProcessorParam_ExpansionThreshold: ::std::os::raw::c_uint = 3;
pub const kDynamicsProcessorParam_AttackTime: ::std::os::raw::c_uint = 4;
pub const kDynamicsProcessorParam_ReleaseTime: ::std::os::raw::c_uint = 5;
pub const kDynamicsProcessorParam_MasterGain: ::std::os::raw::c_uint = 6;
pub const kDynamicsProcessorParam_CompressionAmount: ::std::os::raw::c_uint = 1000;
pub const kDynamicsProcessorParam_InputAmplitude: ::std::os::raw::c_uint = 2000;
pub const kDynamicsProcessorParam_OutputAmplitude: ::std::os::raw::c_uint = 3000;
pub type _bindgen_ty_139 = ::std::os::raw::c_uint;
pub const kVarispeedParam_PlaybackRate: ::std::os::raw::c_uint = 0;
pub const kVarispeedParam_PlaybackCents: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_140 = ::std::os::raw::c_uint;
pub const kDistortionParam_Delay: ::std::os::raw::c_uint = 0;
pub const kDistortionParam_Decay: ::std::os::raw::c_uint = 1;
pub const kDistortionParam_DelayMix: ::std::os::raw::c_uint = 2;
pub const kDistortionParam_Decimation: ::std::os::raw::c_uint = 3;
pub const kDistortionParam_Rounding: ::std::os::raw::c_uint = 4;
pub const kDistortionParam_DecimationMix: ::std::os::raw::c_uint = 5;
pub const kDistortionParam_LinearTerm: ::std::os::raw::c_uint = 6;
pub const kDistortionParam_SquaredTerm: ::std::os::raw::c_uint = 7;
pub const kDistortionParam_CubicTerm: ::std::os::raw::c_uint = 8;
pub const kDistortionParam_PolynomialMix: ::std::os::raw::c_uint = 9;
pub const kDistortionParam_RingModFreq1: ::std::os::raw::c_uint = 10;
pub const kDistortionParam_RingModFreq2: ::std::os::raw::c_uint = 11;
pub const kDistortionParam_RingModBalance: ::std::os::raw::c_uint = 12;
pub const kDistortionParam_RingModMix: ::std::os::raw::c_uint = 13;
pub const kDistortionParam_SoftClipGain: ::std::os::raw::c_uint = 14;
pub const kDistortionParam_FinalMix: ::std::os::raw::c_uint = 15;
pub type _bindgen_ty_141 = ::std::os::raw::c_uint;
pub const kDelayParam_WetDryMix: ::std::os::raw::c_uint = 0;
pub const kDelayParam_DelayTime: ::std::os::raw::c_uint = 1;
pub const kDelayParam_Feedback: ::std::os::raw::c_uint = 2;
pub const kDelayParam_LopassCutoff: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_142 = ::std::os::raw::c_uint;
pub const kSampleDelayParam_DelayFrames: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_143 = ::std::os::raw::c_uint;
pub const kAUNBandEQParam_GlobalGain: ::std::os::raw::c_uint = 0;
pub const kAUNBandEQParam_BypassBand: ::std::os::raw::c_uint = 1000;
pub const kAUNBandEQParam_FilterType: ::std::os::raw::c_uint = 2000;
pub const kAUNBandEQParam_Frequency: ::std::os::raw::c_uint = 3000;
pub const kAUNBandEQParam_Gain: ::std::os::raw::c_uint = 4000;
pub const kAUNBandEQParam_Bandwidth: ::std::os::raw::c_uint = 5000;
pub type _bindgen_ty_144 = ::std::os::raw::c_uint;
pub const kAUNBandEQFilterType_Parametric: ::std::os::raw::c_uint = 0;
pub const kAUNBandEQFilterType_2ndOrderButterworthLowPass: ::std::os::raw::c_uint = 1;
pub const kAUNBandEQFilterType_2ndOrderButterworthHighPass: ::std::os::raw::c_uint = 2;
pub const kAUNBandEQFilterType_ResonantLowPass: ::std::os::raw::c_uint = 3;
pub const kAUNBandEQFilterType_ResonantHighPass: ::std::os::raw::c_uint = 4;
pub const kAUNBandEQFilterType_BandPass: ::std::os::raw::c_uint = 5;
pub const kAUNBandEQFilterType_BandStop: ::std::os::raw::c_uint = 6;
pub const kAUNBandEQFilterType_LowShelf: ::std::os::raw::c_uint = 7;
pub const kAUNBandEQFilterType_HighShelf: ::std::os::raw::c_uint = 8;
pub const kAUNBandEQFilterType_ResonantLowShelf: ::std::os::raw::c_uint = 9;
pub const kAUNBandEQFilterType_ResonantHighShelf: ::std::os::raw::c_uint = 10;
pub const kNumAUNBandEQFilterTypes: ::std::os::raw::c_uint = 11;
pub type _bindgen_ty_145 = ::std::os::raw::c_uint;
pub const kRoundTripAACParam_Format: ::std::os::raw::c_uint = 0;
pub const kRoundTripAACParam_EncodingStrategy: ::std::os::raw::c_uint = 1;
pub const kRoundTripAACParam_RateOrQuality: ::std::os::raw::c_uint = 2;
pub const kRoundTripAACParam_BitRate: ::std::os::raw::c_uint = 1;
pub const kRoundTripAACParam_Quality: ::std::os::raw::c_uint = 2;
pub const kRoundTripAACParam_CompressedFormatSampleRate: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_146 = ::std::os::raw::c_uint;
pub const kGraphicEQParam_NumberOfBands: ::std::os::raw::c_uint = 10000;
pub type _bindgen_ty_147 = ::std::os::raw::c_uint;
pub const kReverbParam_DryWetMix: ::std::os::raw::c_uint = 0;
pub const kReverbParam_SmallLargeMix: ::std::os::raw::c_uint = 1;
pub const kReverbParam_SmallSize: ::std::os::raw::c_uint = 2;
pub const kReverbParam_LargeSize: ::std::os::raw::c_uint = 3;
pub const kReverbParam_PreDelay: ::std::os::raw::c_uint = 4;
pub const kReverbParam_LargeDelay: ::std::os::raw::c_uint = 5;
pub const kReverbParam_SmallDensity: ::std::os::raw::c_uint = 6;
pub const kReverbParam_LargeDensity: ::std::os::raw::c_uint = 7;
pub const kReverbParam_LargeDelayRange: ::std::os::raw::c_uint = 8;
pub const kReverbParam_SmallBrightness: ::std::os::raw::c_uint = 9;
pub const kReverbParam_LargeBrightness: ::std::os::raw::c_uint = 10;
pub const kReverbParam_SmallDelayRange: ::std::os::raw::c_uint = 11;
pub const kReverbParam_ModulationRate: ::std::os::raw::c_uint = 12;
pub const kReverbParam_ModulationDepth: ::std::os::raw::c_uint = 13;
pub type _bindgen_ty_148 = ::std::os::raw::c_uint;
pub const kMultibandCompressorParam_Pregain: ::std::os::raw::c_uint = 0;
pub const kMultibandCompressorParam_Postgain: ::std::os::raw::c_uint = 1;
pub const kMultibandCompressorParam_Crossover1: ::std::os::raw::c_uint = 2;
pub const kMultibandCompressorParam_Crossover2: ::std::os::raw::c_uint = 3;
pub const kMultibandCompressorParam_Crossover3: ::std::os::raw::c_uint = 4;
pub const kMultibandCompressorParam_Threshold1: ::std::os::raw::c_uint = 5;
pub const kMultibandCompressorParam_Threshold2: ::std::os::raw::c_uint = 6;
pub const kMultibandCompressorParam_Threshold3: ::std::os::raw::c_uint = 7;
pub const kMultibandCompressorParam_Threshold4: ::std::os::raw::c_uint = 8;
pub const kMultibandCompressorParam_Headroom1: ::std::os::raw::c_uint = 9;
pub const kMultibandCompressorParam_Headroom2: ::std::os::raw::c_uint = 10;
pub const kMultibandCompressorParam_Headroom3: ::std::os::raw::c_uint = 11;
pub const kMultibandCompressorParam_Headroom4: ::std::os::raw::c_uint = 12;
pub const kMultibandCompressorParam_AttackTime: ::std::os::raw::c_uint = 13;
pub const kMultibandCompressorParam_ReleaseTime: ::std::os::raw::c_uint = 14;
pub const kMultibandCompressorParam_EQ1: ::std::os::raw::c_uint = 15;
pub const kMultibandCompressorParam_EQ2: ::std::os::raw::c_uint = 16;
pub const kMultibandCompressorParam_EQ3: ::std::os::raw::c_uint = 17;
pub const kMultibandCompressorParam_EQ4: ::std::os::raw::c_uint = 18;
pub const kMultibandCompressorParam_CompressionAmount1: ::std::os::raw::c_uint = 1000;
pub const kMultibandCompressorParam_CompressionAmount2: ::std::os::raw::c_uint = 2000;
pub const kMultibandCompressorParam_CompressionAmount3: ::std::os::raw::c_uint = 3000;
pub const kMultibandCompressorParam_CompressionAmount4: ::std::os::raw::c_uint = 4000;
pub const kMultibandCompressorParam_InputAmplitude1: ::std::os::raw::c_uint = 5000;
pub const kMultibandCompressorParam_InputAmplitude2: ::std::os::raw::c_uint = 6000;
pub const kMultibandCompressorParam_InputAmplitude3: ::std::os::raw::c_uint = 7000;
pub const kMultibandCompressorParam_InputAmplitude4: ::std::os::raw::c_uint = 8000;
pub const kMultibandCompressorParam_OutputAmplitude1: ::std::os::raw::c_uint = 9000;
pub const kMultibandCompressorParam_OutputAmplitude2: ::std::os::raw::c_uint = 10000;
pub const kMultibandCompressorParam_OutputAmplitude3: ::std::os::raw::c_uint = 11000;
pub const kMultibandCompressorParam_OutputAmplitude4: ::std::os::raw::c_uint = 12000;
pub type _bindgen_ty_149 = ::std::os::raw::c_uint;
pub const kMultibandFilter_LowFilterType: ::std::os::raw::c_uint = 0;
pub const kMultibandFilter_LowFrequency: ::std::os::raw::c_uint = 1;
pub const kMultibandFilter_LowGain: ::std::os::raw::c_uint = 2;
pub const kMultibandFilter_CenterFreq1: ::std::os::raw::c_uint = 3;
pub const kMultibandFilter_CenterGain1: ::std::os::raw::c_uint = 4;
pub const kMultibandFilter_Bandwidth1: ::std::os::raw::c_uint = 5;
pub const kMultibandFilter_CenterFreq2: ::std::os::raw::c_uint = 6;
pub const kMultibandFilter_CenterGain2: ::std::os::raw::c_uint = 7;
pub const kMultibandFilter_Bandwidth2: ::std::os::raw::c_uint = 8;
pub const kMultibandFilter_CenterFreq3: ::std::os::raw::c_uint = 9;
pub const kMultibandFilter_CenterGain3: ::std::os::raw::c_uint = 10;
pub const kMultibandFilter_Bandwidth3: ::std::os::raw::c_uint = 11;
pub const kMultibandFilter_HighFilterType: ::std::os::raw::c_uint = 12;
pub const kMultibandFilter_HighFrequency: ::std::os::raw::c_uint = 13;
pub const kMultibandFilter_HighGain: ::std::os::raw::c_uint = 14;
pub type _bindgen_ty_150 = ::std::os::raw::c_uint;
pub const kRogerBeepParam_InGateThreshold: ::std::os::raw::c_uint = 0;
pub const kRogerBeepParam_InGateThresholdTime: ::std::os::raw::c_uint = 1;
pub const kRogerBeepParam_OutGateThreshold: ::std::os::raw::c_uint = 2;
pub const kRogerBeepParam_OutGateThresholdTime: ::std::os::raw::c_uint = 3;
pub const kRogerBeepParam_Sensitivity: ::std::os::raw::c_uint = 4;
pub const kRogerBeepParam_RogerType: ::std::os::raw::c_uint = 5;
pub const kRogerBeepParam_RogerGain: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_151 = ::std::os::raw::c_uint;
pub const kStereoMixerParam_Volume: ::std::os::raw::c_uint = 0;
pub const kStereoMixerParam_Pan: ::std::os::raw::c_uint = 1;
pub const kStereoMixerParam_PreAveragePower: ::std::os::raw::c_uint = 1000;
pub const kStereoMixerParam_PrePeakHoldLevel: ::std::os::raw::c_uint = 2000;
pub const kStereoMixerParam_PostAveragePower: ::std::os::raw::c_uint = 3000;
pub const kStereoMixerParam_PostPeakHoldLevel: ::std::os::raw::c_uint = 4000;
pub type _bindgen_ty_152 = ::std::os::raw::c_uint;
pub const kAUNetReceiveParam_Status: ::std::os::raw::c_uint = 0;
pub const kAUNetReceiveParam_NumParameters: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_153 = ::std::os::raw::c_uint;
pub const kAUNetSendParam_Status: ::std::os::raw::c_uint = 0;
pub const kAUNetSendParam_NumParameters: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_154 = ::std::os::raw::c_uint;
pub const kAUNetStatus_NotConnected: ::std::os::raw::c_uint = 0;
pub const kAUNetStatus_Connected: ::std::os::raw::c_uint = 1;
pub const kAUNetStatus_Overflow: ::std::os::raw::c_uint = 2;
pub const kAUNetStatus_Underflow: ::std::os::raw::c_uint = 3;
pub const kAUNetStatus_Connecting: ::std::os::raw::c_uint = 4;
pub const kAUNetStatus_Listening: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_155 = ::std::os::raw::c_uint;
pub const kMusicDeviceParam_Tuning: ::std::os::raw::c_uint = 0;
pub const kMusicDeviceParam_Volume: ::std::os::raw::c_uint = 1;
pub const kMusicDeviceParam_ReverbVolume: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_156 = ::std::os::raw::c_uint;
pub const kRandomParam_BoundA: ::std::os::raw::c_uint = 0;
pub const kRandomParam_BoundB: ::std::os::raw::c_uint = 1;
pub const kRandomParam_Curve: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_157 = ::std::os::raw::c_uint;
pub const kReverb2Param_DryWetMix: ::std::os::raw::c_uint = 0;
pub const kReverb2Param_Gain: ::std::os::raw::c_uint = 1;
pub const kReverb2Param_MinDelayTime: ::std::os::raw::c_uint = 2;
pub const kReverb2Param_MaxDelayTime: ::std::os::raw::c_uint = 3;
pub const kReverb2Param_DecayTimeAt0Hz: ::std::os::raw::c_uint = 4;
pub const kReverb2Param_DecayTimeAtNyquist: ::std::os::raw::c_uint = 5;
pub const kReverb2Param_RandomizeReflections: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_158 = ::std::os::raw::c_uint;
pub const kAudioUnitScope_Global: ::std::os::raw::c_uint = 0;
pub const kAudioUnitScope_Input: ::std::os::raw::c_uint = 1;
pub const kAudioUnitScope_Output: ::std::os::raw::c_uint = 2;
pub const kAudioUnitScope_Group: ::std::os::raw::c_uint = 3;
pub const kAudioUnitScope_Part: ::std::os::raw::c_uint = 4;
pub const kAudioUnitScope_Note: ::std::os::raw::c_uint = 5;
pub const kAudioUnitScope_Layer: ::std::os::raw::c_uint = 6;
pub const kAudioUnitScope_LayerItem: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_159 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_ClassInfo: ::std::os::raw::c_uint = 0;
pub const kAudioUnitProperty_MakeConnection: ::std::os::raw::c_uint = 1;
pub const kAudioUnitProperty_SampleRate: ::std::os::raw::c_uint = 2;
pub const kAudioUnitProperty_ParameterList: ::std::os::raw::c_uint = 3;
pub const kAudioUnitProperty_ParameterInfo: ::std::os::raw::c_uint = 4;
pub const kAudioUnitProperty_CPULoad: ::std::os::raw::c_uint = 6;
pub const kAudioUnitProperty_StreamFormat: ::std::os::raw::c_uint = 8;
pub const kAudioUnitProperty_ElementCount: ::std::os::raw::c_uint = 11;
pub const kAudioUnitProperty_Latency: ::std::os::raw::c_uint = 12;
pub const kAudioUnitProperty_SupportedNumChannels: ::std::os::raw::c_uint = 13;
pub const kAudioUnitProperty_MaximumFramesPerSlice: ::std::os::raw::c_uint = 14;
pub const kAudioUnitProperty_ParameterValueStrings: ::std::os::raw::c_uint = 16;
pub const kAudioUnitProperty_AudioChannelLayout: ::std::os::raw::c_uint = 19;
pub const kAudioUnitProperty_TailTime: ::std::os::raw::c_uint = 20;
pub const kAudioUnitProperty_BypassEffect: ::std::os::raw::c_uint = 21;
pub const kAudioUnitProperty_LastRenderError: ::std::os::raw::c_uint = 22;
pub const kAudioUnitProperty_SetRenderCallback: ::std::os::raw::c_uint = 23;
pub const kAudioUnitProperty_FactoryPresets: ::std::os::raw::c_uint = 24;
pub const kAudioUnitProperty_RenderQuality: ::std::os::raw::c_uint = 26;
pub const kAudioUnitProperty_HostCallbacks: ::std::os::raw::c_uint = 27;
pub const kAudioUnitProperty_InPlaceProcessing: ::std::os::raw::c_uint = 29;
pub const kAudioUnitProperty_ElementName: ::std::os::raw::c_uint = 30;
pub const kAudioUnitProperty_SupportedChannelLayoutTags: ::std::os::raw::c_uint = 32;
pub const kAudioUnitProperty_PresentPreset: ::std::os::raw::c_uint = 36;
pub const kAudioUnitProperty_DependentParameters: ::std::os::raw::c_uint = 45;
pub const kAudioUnitProperty_InputSamplesInOutput: ::std::os::raw::c_uint = 49;
pub const kAudioUnitProperty_ShouldAllocateBuffer: ::std::os::raw::c_uint = 51;
pub const kAudioUnitProperty_FrequencyResponse: ::std::os::raw::c_uint = 52;
pub const kAudioUnitProperty_ParameterHistoryInfo: ::std::os::raw::c_uint = 53;
pub const kAudioUnitProperty_NickName: ::std::os::raw::c_uint = 54;
pub const kAudioUnitProperty_OfflineRender: ::std::os::raw::c_uint = 37;
pub const kAudioUnitProperty_ParameterIDName: ::std::os::raw::c_uint = 34;
pub const kAudioUnitProperty_ParameterStringFromValue: ::std::os::raw::c_uint = 33;
pub const kAudioUnitProperty_ParameterClumpName: ::std::os::raw::c_uint = 35;
pub const kAudioUnitProperty_ParameterValueFromString: ::std::os::raw::c_uint = 38;
pub const kAudioUnitProperty_ContextName: ::std::os::raw::c_uint = 25;
pub const kAudioUnitProperty_PresentationLatency: ::std::os::raw::c_uint = 40;
pub const kAudioUnitProperty_ClassInfoFromDocument: ::std::os::raw::c_uint = 50;
pub const kAudioUnitProperty_RequestViewController: ::std::os::raw::c_uint = 56;
pub const kAudioUnitProperty_ParametersForOverview: ::std::os::raw::c_uint = 57;
pub const kAudioUnitProperty_SupportsMPE: ::std::os::raw::c_uint = 58;
pub const kAudioUnitProperty_RenderContextObserver: ::std::os::raw::c_uint = 60;
pub const kAudioUnitProperty_FastDispatch: ::std::os::raw::c_uint = 5;
pub const kAudioUnitProperty_SetExternalBuffer: ::std::os::raw::c_uint = 15;
pub const kAudioUnitProperty_GetUIComponentList: ::std::os::raw::c_uint = 18;
pub const kAudioUnitProperty_CocoaUI: ::std::os::raw::c_uint = 31;
pub const kAudioUnitProperty_IconLocation: ::std::os::raw::c_uint = 39;
pub const kAudioUnitProperty_AUHostIdentifier: ::std::os::raw::c_uint = 46;
pub const kAudioUnitProperty_MIDIOutputCallbackInfo: ::std::os::raw::c_uint = 47;
pub const kAudioUnitProperty_MIDIOutputCallback: ::std::os::raw::c_uint = 48;
pub type _bindgen_ty_160 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_RemoteControlEventListener: ::std::os::raw::c_uint = 100;
pub const kAudioUnitProperty_IsInterAppConnected: ::std::os::raw::c_uint = 101;
pub const kAudioUnitProperty_PeerURL: ::std::os::raw::c_uint = 102;
pub type _bindgen_ty_161 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitConnection {
    pub sourceAudioUnit: AudioUnit,
    pub sourceOutputNumber: UInt32,
    pub destInputNumber: UInt32,
}
#[test]
fn bindgen_test_layout_AudioUnitConnection() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitConnection>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitConnection))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitConnection>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitConnection))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitConnection>())).sourceAudioUnit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitConnection),
            "::",
            stringify!(sourceAudioUnit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitConnection>())).sourceOutputNumber as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitConnection),
            "::",
            stringify!(sourceOutputNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitConnection>())).destInputNumber as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitConnection),
            "::",
            stringify!(destInputNumber)
        )
    );
}
impl Default for AudioUnitConnection {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AUChannelInfo {
    pub inChannels: SInt16,
    pub outChannels: SInt16,
}
#[test]
fn bindgen_test_layout_AUChannelInfo() {
    assert_eq!(
        ::std::mem::size_of::<AUChannelInfo>(),
        4usize,
        concat!("Size of: ", stringify!(AUChannelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AUChannelInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(AUChannelInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUChannelInfo>())).inChannels as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUChannelInfo),
            "::",
            stringify!(inChannels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUChannelInfo>())).outChannels as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AUChannelInfo),
            "::",
            stringify!(outChannels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitExternalBuffer {
    pub buffer: *mut Byte,
    pub size: UInt32,
}
#[test]
fn bindgen_test_layout_AudioUnitExternalBuffer() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitExternalBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitExternalBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitExternalBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitExternalBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitExternalBuffer>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitExternalBuffer),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitExternalBuffer>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitExternalBuffer),
            "::",
            stringify!(size)
        )
    );
}
impl Default for AudioUnitExternalBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AURenderCallbackStruct {
    pub inputProc: AURenderCallback,
    pub inputProcRefCon: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AURenderCallbackStruct() {
    assert_eq!(
        ::std::mem::size_of::<AURenderCallbackStruct>(),
        16usize,
        concat!("Size of: ", stringify!(AURenderCallbackStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<AURenderCallbackStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(AURenderCallbackStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AURenderCallbackStruct>())).inputProc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AURenderCallbackStruct),
            "::",
            stringify!(inputProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AURenderCallbackStruct>())).inputProcRefCon as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AURenderCallbackStruct),
            "::",
            stringify!(inputProcRefCon)
        )
    );
}
impl Default for AURenderCallbackStruct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUPreset {
    pub presetNumber: SInt32,
    pub presetName: CFStringRef,
}
#[test]
fn bindgen_test_layout_AUPreset() {
    assert_eq!(
        ::std::mem::size_of::<AUPreset>(),
        16usize,
        concat!("Size of: ", stringify!(AUPreset))
    );
    assert_eq!(
        ::std::mem::align_of::<AUPreset>(),
        8usize,
        concat!("Alignment of ", stringify!(AUPreset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUPreset>())).presetNumber as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUPreset),
            "::",
            stringify!(presetNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUPreset>())).presetName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUPreset),
            "::",
            stringify!(presetName)
        )
    );
}
impl Default for AUPreset {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kRenderQuality_Max: ::std::os::raw::c_uint = 127;
pub const kRenderQuality_High: ::std::os::raw::c_uint = 96;
pub const kRenderQuality_Medium: ::std::os::raw::c_uint = 64;
pub const kRenderQuality_Low: ::std::os::raw::c_uint = 32;
pub const kRenderQuality_Min: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_162 = ::std::os::raw::c_uint;
pub const kNumberOfResponseFrequencies: ::std::os::raw::c_uint = 1024;
pub type _bindgen_ty_163 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitFrequencyResponseBin {
    pub mFrequency: Float64,
    pub mMagnitude: Float64,
}
#[test]
fn bindgen_test_layout_AudioUnitFrequencyResponseBin() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitFrequencyResponseBin>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitFrequencyResponseBin))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitFrequencyResponseBin>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitFrequencyResponseBin))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitFrequencyResponseBin>())).mFrequency as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitFrequencyResponseBin),
            "::",
            stringify!(mFrequency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitFrequencyResponseBin>())).mMagnitude as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitFrequencyResponseBin),
            "::",
            stringify!(mMagnitude)
        )
    );
}
pub type HostCallback_GetBeatAndTempo = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outCurrentBeat: *mut Float64,
        outCurrentTempo: *mut Float64,
    ) -> OSStatus,
>;
pub type HostCallback_GetMusicalTimeLocation = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outDeltaSampleOffsetToNextBeat: *mut UInt32,
        outTimeSig_Numerator: *mut Float32,
        outTimeSig_Denominator: *mut UInt32,
        outCurrentMeasureDownBeat: *mut Float64,
    ) -> OSStatus,
>;
pub type HostCallback_GetTransportState = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outIsPlaying: *mut Boolean,
        outTransportStateChanged: *mut Boolean,
        outCurrentSampleInTimeLine: *mut Float64,
        outIsCycling: *mut Boolean,
        outCycleStartBeat: *mut Float64,
        outCycleEndBeat: *mut Float64,
    ) -> OSStatus,
>;
pub type HostCallback_GetTransportState2 = ::std::option::Option<
    unsafe extern "C" fn(
        inHostUserData: *mut ::std::os::raw::c_void,
        outIsPlaying: *mut Boolean,
        outIsRecording: *mut Boolean,
        outTransportStateChanged: *mut Boolean,
        outCurrentSampleInTimeLine: *mut Float64,
        outIsCycling: *mut Boolean,
        outCycleStartBeat: *mut Float64,
        outCycleEndBeat: *mut Float64,
    ) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HostCallbackInfo {
    pub hostUserData: *mut ::std::os::raw::c_void,
    pub beatAndTempoProc: HostCallback_GetBeatAndTempo,
    pub musicalTimeLocationProc: HostCallback_GetMusicalTimeLocation,
    pub transportStateProc: HostCallback_GetTransportState,
    pub transportStateProc2: HostCallback_GetTransportState2,
}
#[test]
fn bindgen_test_layout_HostCallbackInfo() {
    assert_eq!(
        ::std::mem::size_of::<HostCallbackInfo>(),
        40usize,
        concat!("Size of: ", stringify!(HostCallbackInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<HostCallbackInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(HostCallbackInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HostCallbackInfo>())).hostUserData as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HostCallbackInfo),
            "::",
            stringify!(hostUserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HostCallbackInfo>())).beatAndTempoProc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HostCallbackInfo),
            "::",
            stringify!(beatAndTempoProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HostCallbackInfo>())).musicalTimeLocationProc as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HostCallbackInfo),
            "::",
            stringify!(musicalTimeLocationProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HostCallbackInfo>())).transportStateProc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HostCallbackInfo),
            "::",
            stringify!(transportStateProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<HostCallbackInfo>())).transportStateProc2 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HostCallbackInfo),
            "::",
            stringify!(transportStateProc2)
        )
    );
}
impl Default for HostCallbackInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AUDependentParameter {
    pub mScope: AudioUnitScope,
    pub mParameterID: AudioUnitParameterID,
}
#[test]
fn bindgen_test_layout_AUDependentParameter() {
    assert_eq!(
        ::std::mem::size_of::<AUDependentParameter>(),
        8usize,
        concat!("Size of: ", stringify!(AUDependentParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<AUDependentParameter>(),
        4usize,
        concat!("Alignment of ", stringify!(AUDependentParameter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUDependentParameter>())).mScope as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDependentParameter),
            "::",
            stringify!(mScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUDependentParameter>())).mParameterID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDependentParameter),
            "::",
            stringify!(mParameterID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitCocoaViewInfo {
    pub mCocoaAUViewBundleLocation: CFURLRef,
    pub mCocoaAUViewClass: [CFStringRef; 1usize],
}
#[test]
fn bindgen_test_layout_AudioUnitCocoaViewInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitCocoaViewInfo>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitCocoaViewInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitCocoaViewInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitCocoaViewInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitCocoaViewInfo>())).mCocoaAUViewBundleLocation
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitCocoaViewInfo),
            "::",
            stringify!(mCocoaAUViewBundleLocation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitCocoaViewInfo>())).mCocoaAUViewClass as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitCocoaViewInfo),
            "::",
            stringify!(mCocoaAUViewClass)
        )
    );
}
impl Default for AudioUnitCocoaViewInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUHostVersionIdentifier {
    pub hostName: CFStringRef,
    pub hostVersion: UInt32,
}
#[test]
fn bindgen_test_layout_AUHostVersionIdentifier() {
    assert_eq!(
        ::std::mem::size_of::<AUHostVersionIdentifier>(),
        16usize,
        concat!("Size of: ", stringify!(AUHostVersionIdentifier))
    );
    assert_eq!(
        ::std::mem::align_of::<AUHostVersionIdentifier>(),
        8usize,
        concat!("Alignment of ", stringify!(AUHostVersionIdentifier))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUHostVersionIdentifier>())).hostName as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUHostVersionIdentifier),
            "::",
            stringify!(hostName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUHostVersionIdentifier>())).hostVersion as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUHostVersionIdentifier),
            "::",
            stringify!(hostVersion)
        )
    );
}
impl Default for AUHostVersionIdentifier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AUMIDIOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        timeStamp: *const AudioTimeStamp,
        midiOutNum: UInt32,
        pktlist: *const MIDIPacketList,
    ) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUMIDIOutputCallbackStruct {
    pub midiOutputCallback: AUMIDIOutputCallback,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AUMIDIOutputCallbackStruct() {
    assert_eq!(
        ::std::mem::size_of::<AUMIDIOutputCallbackStruct>(),
        16usize,
        concat!("Size of: ", stringify!(AUMIDIOutputCallbackStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<AUMIDIOutputCallbackStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(AUMIDIOutputCallbackStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUMIDIOutputCallbackStruct>())).midiOutputCallback as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUMIDIOutputCallbackStruct),
            "::",
            stringify!(midiOutputCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUMIDIOutputCallbackStruct>())).userData as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUMIDIOutputCallbackStruct),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for AUMIDIOutputCallbackStruct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUInputSamplesInOutputCallbackStruct {
    pub inputToOutputCallback: AUInputSamplesInOutputCallback,
    pub userData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_AUInputSamplesInOutputCallbackStruct() {
    assert_eq!(
        ::std::mem::size_of::<AUInputSamplesInOutputCallbackStruct>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(AUInputSamplesInOutputCallbackStruct)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AUInputSamplesInOutputCallbackStruct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AUInputSamplesInOutputCallbackStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUInputSamplesInOutputCallbackStruct>())).inputToOutputCallback
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUInputSamplesInOutputCallbackStruct),
            "::",
            stringify!(inputToOutputCallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUInputSamplesInOutputCallbackStruct>())).userData as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUInputSamplesInOutputCallbackStruct),
            "::",
            stringify!(userData)
        )
    );
}
impl Default for AUInputSamplesInOutputCallbackStruct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitParameterHistoryInfo {
    pub updatesPerSecond: Float32,
    pub historyDurationInSeconds: Float32,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterHistoryInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterHistoryInfo>(),
        8usize,
        concat!("Size of: ", stringify!(AudioUnitParameterHistoryInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterHistoryInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitParameterHistoryInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterHistoryInfo>())).updatesPerSecond as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterHistoryInfo),
            "::",
            stringify!(updatesPerSecond)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterHistoryInfo>())).historyDurationInSeconds
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterHistoryInfo),
            "::",
            stringify!(historyDurationInSeconds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitRenderContext {
    pub workgroup: os_workgroup_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_AudioUnitRenderContext() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitRenderContext>(),
        32usize,
        concat!("Size of: ", stringify!(AudioUnitRenderContext))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitRenderContext>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitRenderContext))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitRenderContext>())).workgroup as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitRenderContext),
            "::",
            stringify!(workgroup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitRenderContext>())).reserved as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitRenderContext),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for AudioUnitRenderContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AURenderContextObserver = *mut ::std::os::raw::c_void;
pub type AudioUnitParameterUnit = UInt32;
pub const kAudioUnitParameterUnit_Generic: ::std::os::raw::c_uint = 0;
pub const kAudioUnitParameterUnit_Indexed: ::std::os::raw::c_uint = 1;
pub const kAudioUnitParameterUnit_Boolean: ::std::os::raw::c_uint = 2;
pub const kAudioUnitParameterUnit_Percent: ::std::os::raw::c_uint = 3;
pub const kAudioUnitParameterUnit_Seconds: ::std::os::raw::c_uint = 4;
pub const kAudioUnitParameterUnit_SampleFrames: ::std::os::raw::c_uint = 5;
pub const kAudioUnitParameterUnit_Phase: ::std::os::raw::c_uint = 6;
pub const kAudioUnitParameterUnit_Rate: ::std::os::raw::c_uint = 7;
pub const kAudioUnitParameterUnit_Hertz: ::std::os::raw::c_uint = 8;
pub const kAudioUnitParameterUnit_Cents: ::std::os::raw::c_uint = 9;
pub const kAudioUnitParameterUnit_RelativeSemiTones: ::std::os::raw::c_uint = 10;
pub const kAudioUnitParameterUnit_MIDINoteNumber: ::std::os::raw::c_uint = 11;
pub const kAudioUnitParameterUnit_MIDIController: ::std::os::raw::c_uint = 12;
pub const kAudioUnitParameterUnit_Decibels: ::std::os::raw::c_uint = 13;
pub const kAudioUnitParameterUnit_LinearGain: ::std::os::raw::c_uint = 14;
pub const kAudioUnitParameterUnit_Degrees: ::std::os::raw::c_uint = 15;
pub const kAudioUnitParameterUnit_EqualPowerCrossfade: ::std::os::raw::c_uint = 16;
pub const kAudioUnitParameterUnit_MixerFaderCurve1: ::std::os::raw::c_uint = 17;
pub const kAudioUnitParameterUnit_Pan: ::std::os::raw::c_uint = 18;
pub const kAudioUnitParameterUnit_Meters: ::std::os::raw::c_uint = 19;
pub const kAudioUnitParameterUnit_AbsoluteCents: ::std::os::raw::c_uint = 20;
pub const kAudioUnitParameterUnit_Octaves: ::std::os::raw::c_uint = 21;
pub const kAudioUnitParameterUnit_BPM: ::std::os::raw::c_uint = 22;
pub const kAudioUnitParameterUnit_Beats: ::std::os::raw::c_uint = 23;
pub const kAudioUnitParameterUnit_Milliseconds: ::std::os::raw::c_uint = 24;
pub const kAudioUnitParameterUnit_Ratio: ::std::os::raw::c_uint = 25;
pub const kAudioUnitParameterUnit_CustomUnit: ::std::os::raw::c_uint = 26;
pub type _bindgen_ty_164 = ::std::os::raw::c_uint;
pub type AudioUnitParameterOptions = UInt32;
pub const kAudioUnitParameterFlag_CFNameRelease: ::std::os::raw::c_uint = 16;
pub const kAudioUnitParameterFlag_OmitFromPresets: ::std::os::raw::c_uint = 8192;
pub const kAudioUnitParameterFlag_PlotHistory: ::std::os::raw::c_uint = 16384;
pub const kAudioUnitParameterFlag_MeterReadOnly: ::std::os::raw::c_uint = 32768;
pub const kAudioUnitParameterFlag_DisplayMask: ::std::os::raw::c_uint = 4653056;
pub const kAudioUnitParameterFlag_DisplaySquareRoot: ::std::os::raw::c_uint = 65536;
pub const kAudioUnitParameterFlag_DisplaySquared: ::std::os::raw::c_uint = 131072;
pub const kAudioUnitParameterFlag_DisplayCubed: ::std::os::raw::c_uint = 196608;
pub const kAudioUnitParameterFlag_DisplayCubeRoot: ::std::os::raw::c_uint = 262144;
pub const kAudioUnitParameterFlag_DisplayExponential: ::std::os::raw::c_uint = 327680;
pub const kAudioUnitParameterFlag_HasClump: ::std::os::raw::c_uint = 1048576;
pub const kAudioUnitParameterFlag_ValuesHaveStrings: ::std::os::raw::c_uint = 2097152;
pub const kAudioUnitParameterFlag_DisplayLogarithmic: ::std::os::raw::c_uint = 4194304;
pub const kAudioUnitParameterFlag_IsHighResolution: ::std::os::raw::c_uint = 8388608;
pub const kAudioUnitParameterFlag_NonRealTime: ::std::os::raw::c_uint = 16777216;
pub const kAudioUnitParameterFlag_CanRamp: ::std::os::raw::c_uint = 33554432;
pub const kAudioUnitParameterFlag_ExpertMode: ::std::os::raw::c_uint = 67108864;
pub const kAudioUnitParameterFlag_HasCFNameString: ::std::os::raw::c_uint = 134217728;
pub const kAudioUnitParameterFlag_IsGlobalMeta: ::std::os::raw::c_uint = 268435456;
pub const kAudioUnitParameterFlag_IsElementMeta: ::std::os::raw::c_uint = 536870912;
pub const kAudioUnitParameterFlag_IsReadable: ::std::os::raw::c_uint = 1073741824;
pub const kAudioUnitParameterFlag_IsWritable: ::std::os::raw::c_uint = 2147483648;
pub type _bindgen_ty_165 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AudioUnitParameterInfo {
    pub name: [::std::os::raw::c_char; 52usize],
    pub unitName: CFStringRef,
    pub clumpID: UInt32,
    pub cfNameString: CFStringRef,
    pub unit: AudioUnitParameterUnit,
    pub minValue: AudioUnitParameterValue,
    pub maxValue: AudioUnitParameterValue,
    pub defaultValue: AudioUnitParameterValue,
    pub flags: AudioUnitParameterOptions,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterInfo>(),
        104usize,
        concat!("Size of: ", stringify!(AudioUnitParameterInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitParameterInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).unitName as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(unitName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).clumpID as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(clumpID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterInfo>())).cfNameString as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(cfNameString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).unit as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).minValue as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(minValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).maxValue as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(maxValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterInfo>())).defaultValue as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(defaultValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterInfo>())).flags as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterInfo),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for AudioUnitParameterInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAudioUnitClumpID_System: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_166 = ::std::os::raw::c_uint;
pub const kAudioUnitParameterName_Full: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_167 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterNameInfo {
    pub inID: AudioUnitParameterID,
    pub inDesiredLength: SInt32,
    pub outName: CFStringRef,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterNameInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterNameInfo>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitParameterNameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterNameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitParameterNameInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitParameterNameInfo>())).inID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterNameInfo),
            "::",
            stringify!(inID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterNameInfo>())).inDesiredLength as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterNameInfo),
            "::",
            stringify!(inDesiredLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterNameInfo>())).outName as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterNameInfo),
            "::",
            stringify!(outName)
        )
    );
}
impl Default for AudioUnitParameterNameInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioUnitParameterIDName = AudioUnitParameterNameInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterStringFromValue {
    pub inParamID: AudioUnitParameterID,
    pub inValue: *const AudioUnitParameterValue,
    pub outString: CFStringRef,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterStringFromValue() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterStringFromValue>(),
        24usize,
        concat!("Size of: ", stringify!(AudioUnitParameterStringFromValue))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterStringFromValue>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioUnitParameterStringFromValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterStringFromValue>())).inParamID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterStringFromValue),
            "::",
            stringify!(inParamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterStringFromValue>())).inValue as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterStringFromValue),
            "::",
            stringify!(inValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterStringFromValue>())).outString as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterStringFromValue),
            "::",
            stringify!(outString)
        )
    );
}
impl Default for AudioUnitParameterStringFromValue {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterValueFromString {
    pub inParamID: AudioUnitParameterID,
    pub inString: CFStringRef,
    pub outValue: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterValueFromString() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterValueFromString>(),
        24usize,
        concat!("Size of: ", stringify!(AudioUnitParameterValueFromString))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterValueFromString>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioUnitParameterValueFromString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueFromString>())).inParamID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueFromString),
            "::",
            stringify!(inParamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueFromString>())).inString as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueFromString),
            "::",
            stringify!(inString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueFromString>())).outValue as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueFromString),
            "::",
            stringify!(outValue)
        )
    );
}
impl Default for AudioUnitParameterValueFromString {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioUnitRemoteControlEvent = UInt32;
pub const kAudioUnitRemoteControlEvent_TogglePlayPause: ::std::os::raw::c_uint = 1;
pub const kAudioUnitRemoteControlEvent_ToggleRecord: ::std::os::raw::c_uint = 2;
pub const kAudioUnitRemoteControlEvent_Rewind: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_168 = ::std::os::raw::c_uint;
pub type AudioUnitRemoteControlEventListener = *mut ::std::os::raw::c_void;
pub const kAudioUnitProperty_AllParameterMIDIMappings: ::std::os::raw::c_uint = 41;
pub const kAudioUnitProperty_AddParameterMIDIMapping: ::std::os::raw::c_uint = 42;
pub const kAudioUnitProperty_RemoveParameterMIDIMapping: ::std::os::raw::c_uint = 43;
pub const kAudioUnitProperty_HotMapParameterMIDIMapping: ::std::os::raw::c_uint = 44;
pub type _bindgen_ty_169 = ::std::os::raw::c_uint;
pub type AUParameterMIDIMappingFlags = UInt32;
pub const kAUParameterMIDIMapping_AnyChannelFlag: ::std::os::raw::c_uint = 1;
pub const kAUParameterMIDIMapping_AnyNoteFlag: ::std::os::raw::c_uint = 2;
pub const kAUParameterMIDIMapping_SubRange: ::std::os::raw::c_uint = 4;
pub const kAUParameterMIDIMapping_Toggle: ::std::os::raw::c_uint = 8;
pub const kAUParameterMIDIMapping_Bipolar: ::std::os::raw::c_uint = 16;
pub const kAUParameterMIDIMapping_Bipolar_On: ::std::os::raw::c_uint = 32;
pub type _bindgen_ty_170 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AUParameterMIDIMapping {
    pub mScope: AudioUnitScope,
    pub mElement: AudioUnitElement,
    pub mParameterID: AudioUnitParameterID,
    pub mFlags: AUParameterMIDIMappingFlags,
    pub mSubRangeMin: AudioUnitParameterValue,
    pub mSubRangeMax: AudioUnitParameterValue,
    pub mStatus: UInt8,
    pub mData1: UInt8,
    pub reserved1: UInt8,
    pub reserved2: UInt8,
    pub reserved3: UInt32,
}
#[test]
fn bindgen_test_layout_AUParameterMIDIMapping() {
    assert_eq!(
        ::std::mem::size_of::<AUParameterMIDIMapping>(),
        32usize,
        concat!("Size of: ", stringify!(AUParameterMIDIMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<AUParameterMIDIMapping>(),
        4usize,
        concat!("Alignment of ", stringify!(AUParameterMIDIMapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mScope as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mScope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mElement as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mParameterID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mParameterID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mSubRangeMin as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mSubRangeMin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mSubRangeMax as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mSubRangeMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mStatus as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUParameterMIDIMapping>())).mData1 as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(mData1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUParameterMIDIMapping>())).reserved1 as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUParameterMIDIMapping>())).reserved2 as *const _ as usize
        },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUParameterMIDIMapping>())).reserved3 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AUParameterMIDIMapping),
            "::",
            stringify!(reserved3)
        )
    );
}
pub const kMusicDeviceProperty_MIDIXMLNames: ::std::os::raw::c_uint = 1006;
pub const kMusicDeviceProperty_PartGroup: ::std::os::raw::c_uint = 1010;
pub const kMusicDeviceProperty_DualSchedulingMode: ::std::os::raw::c_uint = 1013;
pub const kMusicDeviceProperty_SupportsStartStopNote: ::std::os::raw::c_uint = 1014;
pub type _bindgen_ty_171 = ::std::os::raw::c_uint;
pub const kMusicDeviceSampleFrameMask_SampleOffset: ::std::os::raw::c_uint = 16777215;
pub const kMusicDeviceSampleFrameMask_IsScheduled: ::std::os::raw::c_uint = 16777216;
pub type _bindgen_ty_172 = ::std::os::raw::c_uint;
pub const kAudioUnitOfflineProperty_InputSize: ::std::os::raw::c_uint = 3020;
pub const kAudioUnitOfflineProperty_OutputSize: ::std::os::raw::c_uint = 3021;
pub const kAudioUnitOfflineProperty_StartOffset: ::std::os::raw::c_uint = 3022;
pub const kAudioUnitOfflineProperty_PreflightRequirements: ::std::os::raw::c_uint = 3023;
pub const kAudioUnitOfflineProperty_PreflightName: ::std::os::raw::c_uint = 3024;
pub type _bindgen_ty_173 = ::std::os::raw::c_uint;
pub const kOfflinePreflight_NotRequired: ::std::os::raw::c_uint = 0;
pub const kOfflinePreflight_Optional: ::std::os::raw::c_uint = 1;
pub const kOfflinePreflight_Required: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_174 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_DistanceAttenuationData: ::std::os::raw::c_uint = 3600;
pub type _bindgen_ty_175 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AUDistanceAttenuationData {
    pub inNumberOfPairs: UInt32,
    pub pairs: [AUDistanceAttenuationData__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AUDistanceAttenuationData__bindgen_ty_1 {
    pub inDistance: Float32,
    pub outGain: Float32,
}
#[test]
fn bindgen_test_layout_AUDistanceAttenuationData__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<AUDistanceAttenuationData__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(AUDistanceAttenuationData__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AUDistanceAttenuationData__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(AUDistanceAttenuationData__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUDistanceAttenuationData__bindgen_ty_1>())).inDistance
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDistanceAttenuationData__bindgen_ty_1),
            "::",
            stringify!(inDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUDistanceAttenuationData__bindgen_ty_1>())).outGain as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDistanceAttenuationData__bindgen_ty_1),
            "::",
            stringify!(outGain)
        )
    );
}
#[test]
fn bindgen_test_layout_AUDistanceAttenuationData() {
    assert_eq!(
        ::std::mem::size_of::<AUDistanceAttenuationData>(),
        12usize,
        concat!("Size of: ", stringify!(AUDistanceAttenuationData))
    );
    assert_eq!(
        ::std::mem::align_of::<AUDistanceAttenuationData>(),
        4usize,
        concat!("Alignment of ", stringify!(AUDistanceAttenuationData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUDistanceAttenuationData>())).inNumberOfPairs as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDistanceAttenuationData),
            "::",
            stringify!(inNumberOfPairs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUDistanceAttenuationData>())).pairs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AUDistanceAttenuationData),
            "::",
            stringify!(pairs)
        )
    );
}
pub const kAudioUnitMigrateProperty_FromPlugin: ::std::os::raw::c_uint = 4000;
pub const kAudioUnitMigrateProperty_OldAutomation: ::std::os::raw::c_uint = 4001;
pub type _bindgen_ty_176 = ::std::os::raw::c_uint;
pub const kOtherPluginFormat_Undefined: ::std::os::raw::c_uint = 0;
pub const kOtherPluginFormat_kMAS: ::std::os::raw::c_uint = 1;
pub const kOtherPluginFormat_kVST: ::std::os::raw::c_uint = 2;
pub const kOtherPluginFormat_AU: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_177 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitOtherPluginDesc {
    pub format: UInt32,
    pub plugin: AudioClassDescription,
}
#[test]
fn bindgen_test_layout_AudioUnitOtherPluginDesc() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitOtherPluginDesc>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitOtherPluginDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitOtherPluginDesc>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitOtherPluginDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitOtherPluginDesc>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitOtherPluginDesc),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitOtherPluginDesc>())).plugin as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitOtherPluginDesc),
            "::",
            stringify!(plugin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitParameterValueTranslation {
    pub otherDesc: AudioUnitOtherPluginDesc,
    pub otherParamID: UInt32,
    pub otherValue: Float32,
    pub auParamID: AudioUnitParameterID,
    pub auValue: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterValueTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterValueTranslation>(),
        32usize,
        concat!("Size of: ", stringify!(AudioUnitParameterValueTranslation))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterValueTranslation>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(AudioUnitParameterValueTranslation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueTranslation>())).otherDesc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueTranslation),
            "::",
            stringify!(otherDesc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueTranslation>())).otherParamID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueTranslation),
            "::",
            stringify!(otherParamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueTranslation>())).otherValue as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueTranslation),
            "::",
            stringify!(otherValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueTranslation>())).auParamID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueTranslation),
            "::",
            stringify!(auParamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueTranslation>())).auValue as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueTranslation),
            "::",
            stringify!(auValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitPresetMAS_SettingData {
    pub isStockSetting: UInt32,
    pub settingID: UInt32,
    pub dataLen: UInt32,
    pub data: [UInt8; 1usize],
}
#[test]
fn bindgen_test_layout_AudioUnitPresetMAS_SettingData() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitPresetMAS_SettingData>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitPresetMAS_SettingData))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitPresetMAS_SettingData>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitPresetMAS_SettingData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_SettingData>())).isStockSetting as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_SettingData),
            "::",
            stringify!(isStockSetting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_SettingData>())).settingID as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_SettingData),
            "::",
            stringify!(settingID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_SettingData>())).dataLen as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_SettingData),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_SettingData>())).data as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_SettingData),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitPresetMAS_Settings {
    pub manufacturerID: UInt32,
    pub effectID: UInt32,
    pub variantID: UInt32,
    pub settingsVersion: UInt32,
    pub numberOfSettings: UInt32,
    pub settings: [AudioUnitPresetMAS_SettingData; 1usize],
}
#[test]
fn bindgen_test_layout_AudioUnitPresetMAS_Settings() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitPresetMAS_Settings>(),
        36usize,
        concat!("Size of: ", stringify!(AudioUnitPresetMAS_Settings))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitPresetMAS_Settings>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitPresetMAS_Settings))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_Settings>())).manufacturerID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_Settings),
            "::",
            stringify!(manufacturerID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_Settings>())).effectID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_Settings),
            "::",
            stringify!(effectID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_Settings>())).variantID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_Settings),
            "::",
            stringify!(variantID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_Settings>())).settingsVersion as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_Settings),
            "::",
            stringify!(settingsVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_Settings>())).numberOfSettings as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_Settings),
            "::",
            stringify!(numberOfSettings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitPresetMAS_Settings>())).settings as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitPresetMAS_Settings),
            "::",
            stringify!(settings)
        )
    );
}
pub const kAudioUnitProperty_SampleRateConverterComplexity: ::std::os::raw::c_uint = 3014;
pub type _bindgen_ty_178 = ::std::os::raw::c_uint;
pub const kAudioUnitSampleRateConverterComplexity_Linear: ::std::os::raw::c_uint = 1818848869;
pub const kAudioUnitSampleRateConverterComplexity_Normal: ::std::os::raw::c_uint = 1852797549;
pub const kAudioUnitSampleRateConverterComplexity_Mastering: ::std::os::raw::c_uint = 1650553971;
pub type _bindgen_ty_179 = ::std::os::raw::c_uint;
pub const kAudioOutputUnitProperty_CurrentDevice: ::std::os::raw::c_uint = 2000;
pub const kAudioOutputUnitProperty_IsRunning: ::std::os::raw::c_uint = 2001;
pub const kAudioOutputUnitProperty_ChannelMap: ::std::os::raw::c_uint = 2002;
pub const kAudioOutputUnitProperty_EnableIO: ::std::os::raw::c_uint = 2003;
pub const kAudioOutputUnitProperty_StartTime: ::std::os::raw::c_uint = 2004;
pub const kAudioOutputUnitProperty_SetInputCallback: ::std::os::raw::c_uint = 2005;
pub const kAudioOutputUnitProperty_HasIO: ::std::os::raw::c_uint = 2006;
pub const kAudioOutputUnitProperty_StartTimestampsAtZero: ::std::os::raw::c_uint = 2007;
pub const kAudioOutputUnitProperty_OSWorkgroup: ::std::os::raw::c_uint = 2015;
pub type _bindgen_ty_180 = ::std::os::raw::c_uint;
pub const kAudioOutputUnitProperty_MIDICallbacks: ::std::os::raw::c_uint = 2010;
pub const kAudioOutputUnitProperty_HostReceivesRemoteControlEvents: ::std::os::raw::c_uint = 2011;
pub const kAudioOutputUnitProperty_RemoteControlToHost: ::std::os::raw::c_uint = 2012;
pub const kAudioOutputUnitProperty_HostTransportState: ::std::os::raw::c_uint = 2013;
pub const kAudioOutputUnitProperty_NodeComponentDescription: ::std::os::raw::c_uint = 2014;
pub type _bindgen_ty_181 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioOutputUnitMIDICallbacks {
    pub userData: *mut ::std::os::raw::c_void,
    pub MIDIEventProc: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            inStatus: UInt32,
            inData1: UInt32,
            inData2: UInt32,
            inOffsetSampleFrame: UInt32,
        ),
    >,
    pub MIDISysExProc: ::std::option::Option<
        unsafe extern "C" fn(
            userData: *mut ::std::os::raw::c_void,
            inData: *const UInt8,
            inLength: UInt32,
        ),
    >,
}
#[test]
fn bindgen_test_layout_AudioOutputUnitMIDICallbacks() {
    assert_eq!(
        ::std::mem::size_of::<AudioOutputUnitMIDICallbacks>(),
        24usize,
        concat!("Size of: ", stringify!(AudioOutputUnitMIDICallbacks))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioOutputUnitMIDICallbacks>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioOutputUnitMIDICallbacks))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioOutputUnitMIDICallbacks>())).userData as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioOutputUnitMIDICallbacks),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioOutputUnitMIDICallbacks>())).MIDIEventProc as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioOutputUnitMIDICallbacks),
            "::",
            stringify!(MIDIEventProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioOutputUnitMIDICallbacks>())).MIDISysExProc as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioOutputUnitMIDICallbacks),
            "::",
            stringify!(MIDISysExProc)
        )
    );
}
impl Default for AudioOutputUnitMIDICallbacks {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioOutputUnitStartAtTimeParams {
    pub mTimestamp: AudioTimeStamp,
    pub mFlags: UInt32,
}
#[test]
fn bindgen_test_layout_AudioOutputUnitStartAtTimeParams() {
    assert_eq!(
        ::std::mem::size_of::<AudioOutputUnitStartAtTimeParams>(),
        72usize,
        concat!("Size of: ", stringify!(AudioOutputUnitStartAtTimeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioOutputUnitStartAtTimeParams>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioOutputUnitStartAtTimeParams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioOutputUnitStartAtTimeParams>())).mTimestamp as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioOutputUnitStartAtTimeParams),
            "::",
            stringify!(mTimestamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioOutputUnitStartAtTimeParams>())).mFlags as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioOutputUnitStartAtTimeParams),
            "::",
            stringify!(mFlags)
        )
    );
}
pub const kAUVoiceIOProperty_BypassVoiceProcessing: ::std::os::raw::c_uint = 2100;
pub const kAUVoiceIOProperty_VoiceProcessingEnableAGC: ::std::os::raw::c_uint = 2101;
pub const kAUVoiceIOProperty_MuteOutput: ::std::os::raw::c_uint = 2104;
pub type _bindgen_ty_182 = ::std::os::raw::c_uint;
pub const kAUVoiceIOProperty_VoiceProcessingQuality: ::std::os::raw::c_uint = 2103;
pub type _bindgen_ty_183 = ::std::os::raw::c_uint;
pub const kAUNBandEQProperty_NumberOfBands: ::std::os::raw::c_uint = 2200;
pub const kAUNBandEQProperty_MaxNumberOfBands: ::std::os::raw::c_uint = 2201;
pub const kAUNBandEQProperty_BiquadCoefficients: ::std::os::raw::c_uint = 2203;
pub type _bindgen_ty_184 = ::std::os::raw::c_uint;
pub const kAUVoiceIOErr_UnexpectedNumberOfInputChannels: ::std::os::raw::c_int = -66784;
pub type _bindgen_ty_185 = ::std::os::raw::c_int;
pub const kAudioUnitProperty_MeteringMode: ::std::os::raw::c_uint = 3007;
pub const kAudioUnitProperty_MatrixLevels: ::std::os::raw::c_uint = 3006;
pub const kAudioUnitProperty_MatrixDimensions: ::std::os::raw::c_uint = 3009;
pub const kAudioUnitProperty_MeterClipping: ::std::os::raw::c_uint = 3011;
pub const kAudioUnitProperty_InputAnchorTimeStamp: ::std::os::raw::c_uint = 3016;
pub type _bindgen_ty_186 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitMeterClipping {
    pub peakValueSinceLastCall: Float32,
    pub sawInfinity: Boolean,
    pub sawNotANumber: Boolean,
}
#[test]
fn bindgen_test_layout_AudioUnitMeterClipping() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitMeterClipping>(),
        8usize,
        concat!("Size of: ", stringify!(AudioUnitMeterClipping))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitMeterClipping>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitMeterClipping))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMeterClipping>())).peakValueSinceLastCall as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMeterClipping),
            "::",
            stringify!(peakValueSinceLastCall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMeterClipping>())).sawInfinity as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMeterClipping),
            "::",
            stringify!(sawInfinity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMeterClipping>())).sawNotANumber as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMeterClipping),
            "::",
            stringify!(sawNotANumber)
        )
    );
}
pub const kAudioUnitProperty_ReverbRoomType: ::std::os::raw::c_uint = 10;
pub const kAudioUnitProperty_UsesInternalReverb: ::std::os::raw::c_uint = 1005;
pub const kAudioUnitProperty_SpatializationAlgorithm: ::std::os::raw::c_uint = 3000;
pub const kAudioUnitProperty_SpatialMixerRenderingFlags: ::std::os::raw::c_uint = 3003;
pub const kAudioUnitProperty_SpatialMixerSourceMode: ::std::os::raw::c_uint = 3005;
pub const kAudioUnitProperty_SpatialMixerDistanceParams: ::std::os::raw::c_uint = 3010;
pub const kAudioUnitProperty_SpatialMixerAttenuationCurve: ::std::os::raw::c_uint = 3013;
pub const kAudioUnitProperty_SpatialMixerOutputType: ::std::os::raw::c_uint = 3100;
pub const kAudioUnitProperty_SpatialMixerPointSourceInHeadMode: ::std::os::raw::c_uint = 3103;
pub type _bindgen_ty_187 = ::std::os::raw::c_uint;
pub type AUSpatializationAlgorithm = UInt32;
pub const kSpatializationAlgorithm_EqualPowerPanning: ::std::os::raw::c_uint = 0;
pub const kSpatializationAlgorithm_SphericalHead: ::std::os::raw::c_uint = 1;
pub const kSpatializationAlgorithm_HRTF: ::std::os::raw::c_uint = 2;
pub const kSpatializationAlgorithm_SoundField: ::std::os::raw::c_uint = 3;
pub const kSpatializationAlgorithm_VectorBasedPanning: ::std::os::raw::c_uint = 4;
pub const kSpatializationAlgorithm_StereoPassThrough: ::std::os::raw::c_uint = 5;
pub const kSpatializationAlgorithm_HRTFHQ: ::std::os::raw::c_uint = 6;
pub const kSpatializationAlgorithm_UseOutputType: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_188 = ::std::os::raw::c_uint;
pub type AUSpatialMixerSourceMode = UInt32;
pub const kSpatialMixerSourceMode_SpatializeIfMono: ::std::os::raw::c_uint = 0;
pub const kSpatialMixerSourceMode_Bypass: ::std::os::raw::c_uint = 1;
pub const kSpatialMixerSourceMode_PointSource: ::std::os::raw::c_uint = 2;
pub const kSpatialMixerSourceMode_AmbienceBed: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_189 = ::std::os::raw::c_uint;
pub type AUReverbRoomType = UInt32;
pub const kReverbRoomType_SmallRoom: ::std::os::raw::c_uint = 0;
pub const kReverbRoomType_MediumRoom: ::std::os::raw::c_uint = 1;
pub const kReverbRoomType_LargeRoom: ::std::os::raw::c_uint = 2;
pub const kReverbRoomType_MediumHall: ::std::os::raw::c_uint = 3;
pub const kReverbRoomType_LargeHall: ::std::os::raw::c_uint = 4;
pub const kReverbRoomType_Plate: ::std::os::raw::c_uint = 5;
pub const kReverbRoomType_MediumChamber: ::std::os::raw::c_uint = 6;
pub const kReverbRoomType_LargeChamber: ::std::os::raw::c_uint = 7;
pub const kReverbRoomType_Cathedral: ::std::os::raw::c_uint = 8;
pub const kReverbRoomType_LargeRoom2: ::std::os::raw::c_uint = 9;
pub const kReverbRoomType_MediumHall2: ::std::os::raw::c_uint = 10;
pub const kReverbRoomType_MediumHall3: ::std::os::raw::c_uint = 11;
pub const kReverbRoomType_LargeHall2: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_190 = ::std::os::raw::c_uint;
pub type AUSpatialMixerAttenuationCurve = UInt32;
pub const kSpatialMixerAttenuationCurve_Power: ::std::os::raw::c_uint = 0;
pub const kSpatialMixerAttenuationCurve_Exponential: ::std::os::raw::c_uint = 1;
pub const kSpatialMixerAttenuationCurve_Inverse: ::std::os::raw::c_uint = 2;
pub const kSpatialMixerAttenuationCurve_Linear: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_191 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MixerDistanceParams {
    pub mReferenceDistance: Float32,
    pub mMaxDistance: Float32,
    pub mMaxAttenuation: Float32,
}
#[test]
fn bindgen_test_layout_MixerDistanceParams() {
    assert_eq!(
        ::std::mem::size_of::<MixerDistanceParams>(),
        12usize,
        concat!("Size of: ", stringify!(MixerDistanceParams))
    );
    assert_eq!(
        ::std::mem::align_of::<MixerDistanceParams>(),
        4usize,
        concat!("Alignment of ", stringify!(MixerDistanceParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MixerDistanceParams>())).mReferenceDistance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MixerDistanceParams),
            "::",
            stringify!(mReferenceDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MixerDistanceParams>())).mMaxDistance as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MixerDistanceParams),
            "::",
            stringify!(mMaxDistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MixerDistanceParams>())).mMaxAttenuation as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MixerDistanceParams),
            "::",
            stringify!(mMaxAttenuation)
        )
    );
}
pub type AUSpatialMixerRenderingFlags = UInt32;
pub const kSpatialMixerRenderingFlags_InterAuralDelay: ::std::os::raw::c_uint = 1;
pub const kSpatialMixerRenderingFlags_DistanceAttenuation: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_192 = ::std::os::raw::c_uint;
pub type AUSpatialMixerOutputType = UInt32;
pub const kSpatialMixerOutputType_Headphones: ::std::os::raw::c_uint = 1;
pub const kSpatialMixerOutputType_BuiltInSpeakers: ::std::os::raw::c_uint = 2;
pub const kSpatialMixerOutputType_ExternalSpeakers: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_193 = ::std::os::raw::c_uint;
pub type AUSpatialMixerPointSourceInHeadMode = UInt32;
pub const kSpatialMixerPointSourceInHeadMode_Mono: ::std::os::raw::c_uint = 0;
pub const kSpatialMixerPointSourceInHeadMode_Bypass: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_194 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_3DMixerDistanceParams: ::std::os::raw::c_uint = 3010;
pub const kAudioUnitProperty_3DMixerAttenuationCurve: ::std::os::raw::c_uint = 3013;
pub const kAudioUnitProperty_DopplerShift: ::std::os::raw::c_uint = 3002;
pub const kAudioUnitProperty_3DMixerRenderingFlags: ::std::os::raw::c_uint = 3003;
pub const kAudioUnitProperty_3DMixerDistanceAtten: ::std::os::raw::c_uint = 3004;
pub const kAudioUnitProperty_ReverbPreset: ::std::os::raw::c_uint = 3012;
pub type _bindgen_ty_195 = ::std::os::raw::c_uint;
pub type AU3DMixerRenderingFlags = UInt32;
pub const k3DMixerRenderingFlags_InterAuralDelay: ::std::os::raw::c_uint = 1;
pub const k3DMixerRenderingFlags_DopplerShift: ::std::os::raw::c_uint = 2;
pub const k3DMixerRenderingFlags_DistanceAttenuation: ::std::os::raw::c_uint = 4;
pub const k3DMixerRenderingFlags_DistanceFilter: ::std::os::raw::c_uint = 8;
pub const k3DMixerRenderingFlags_DistanceDiffusion: ::std::os::raw::c_uint = 16;
pub const k3DMixerRenderingFlags_LinearDistanceAttenuation: ::std::os::raw::c_uint = 32;
pub const k3DMixerRenderingFlags_ConstantReverbBlend: ::std::os::raw::c_uint = 64;
pub type _bindgen_ty_196 = ::std::os::raw::c_uint;
pub type AU3DMixerAttenuationCurve = UInt32;
pub const k3DMixerAttenuationCurve_Power: ::std::os::raw::c_uint = 0;
pub const k3DMixerAttenuationCurve_Exponential: ::std::os::raw::c_uint = 1;
pub const k3DMixerAttenuationCurve_Inverse: ::std::os::raw::c_uint = 2;
pub const k3DMixerAttenuationCurve_Linear: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_197 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_ScheduleAudioSlice: ::std::os::raw::c_uint = 3300;
pub const kAudioUnitProperty_ScheduleStartTimeStamp: ::std::os::raw::c_uint = 3301;
pub const kAudioUnitProperty_CurrentPlayTime: ::std::os::raw::c_uint = 3302;
pub type _bindgen_ty_198 = ::std::os::raw::c_uint;
pub type AUScheduledAudioSliceFlags = UInt32;
pub const kScheduledAudioSliceFlag_Complete: ::std::os::raw::c_uint = 1;
pub const kScheduledAudioSliceFlag_BeganToRender: ::std::os::raw::c_uint = 2;
pub const kScheduledAudioSliceFlag_BeganToRenderLate: ::std::os::raw::c_uint = 4;
pub const kScheduledAudioSliceFlag_Loop: ::std::os::raw::c_uint = 8;
pub const kScheduledAudioSliceFlag_Interrupt: ::std::os::raw::c_uint = 16;
pub const kScheduledAudioSliceFlag_InterruptAtLoop: ::std::os::raw::c_uint = 32;
pub type _bindgen_ty_199 = ::std::os::raw::c_uint;
pub type ScheduledAudioSliceCompletionProc = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        bufferList: *mut ScheduledAudioSlice,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScheduledAudioSlice {
    pub mTimeStamp: AudioTimeStamp,
    pub mCompletionProc: ScheduledAudioSliceCompletionProc,
    pub mCompletionProcUserData: *mut ::std::os::raw::c_void,
    pub mFlags: AUScheduledAudioSliceFlags,
    pub mReserved: UInt32,
    pub mReserved2: *mut ::std::os::raw::c_void,
    pub mNumberFrames: UInt32,
    pub mBufferList: *mut AudioBufferList,
}
#[test]
fn bindgen_test_layout_ScheduledAudioSlice() {
    assert_eq!(
        ::std::mem::size_of::<ScheduledAudioSlice>(),
        112usize,
        concat!("Size of: ", stringify!(ScheduledAudioSlice))
    );
    assert_eq!(
        ::std::mem::align_of::<ScheduledAudioSlice>(),
        8usize,
        concat!("Alignment of ", stringify!(ScheduledAudioSlice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScheduledAudioSlice>())).mTimeStamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mTimeStamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioSlice>())).mCompletionProc as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mCompletionProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioSlice>())).mCompletionProcUserData as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mCompletionProcUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScheduledAudioSlice>())).mFlags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScheduledAudioSlice>())).mReserved as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mReserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScheduledAudioSlice>())).mReserved2 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mReserved2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioSlice>())).mNumberFrames as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mNumberFrames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScheduledAudioSlice>())).mBufferList as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioSlice),
            "::",
            stringify!(mBufferList)
        )
    );
}
impl Default for ScheduledAudioSlice {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAudioUnitProperty_ScheduledFileIDs: ::std::os::raw::c_uint = 3310;
pub const kAudioUnitProperty_ScheduledFileRegion: ::std::os::raw::c_uint = 3311;
pub const kAudioUnitProperty_ScheduledFilePrime: ::std::os::raw::c_uint = 3312;
pub const kAudioUnitProperty_ScheduledFileBufferSizeFrames: ::std::os::raw::c_uint = 3313;
pub const kAudioUnitProperty_ScheduledFileNumberBuffers: ::std::os::raw::c_uint = 3314;
pub type _bindgen_ty_200 = ::std::os::raw::c_uint;
pub type ScheduledAudioFileRegionCompletionProc = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        fileRegion: *mut ScheduledAudioFileRegion,
        result: OSStatus,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScheduledAudioFileRegion {
    pub mTimeStamp: AudioTimeStamp,
    pub mCompletionProc: ScheduledAudioFileRegionCompletionProc,
    pub mCompletionProcUserData: *mut ::std::os::raw::c_void,
    pub mAudioFile: *mut OpaqueAudioFileID,
    pub mLoopCount: UInt32,
    pub mStartFrame: SInt64,
    pub mFramesToPlay: UInt32,
}
#[test]
fn bindgen_test_layout_ScheduledAudioFileRegion() {
    assert_eq!(
        ::std::mem::size_of::<ScheduledAudioFileRegion>(),
        112usize,
        concat!("Size of: ", stringify!(ScheduledAudioFileRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<ScheduledAudioFileRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(ScheduledAudioFileRegion))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mTimeStamp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mTimeStamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mCompletionProc as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mCompletionProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mCompletionProcUserData as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mCompletionProcUserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mAudioFile as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mAudioFile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mLoopCount as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mLoopCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mStartFrame as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mStartFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ScheduledAudioFileRegion>())).mFramesToPlay as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ScheduledAudioFileRegion),
            "::",
            stringify!(mFramesToPlay)
        )
    );
}
impl Default for ScheduledAudioFileRegion {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kMusicDeviceProperty_UsesInternalReverb: ::std::os::raw::c_uint = 1005;
pub const kMusicDeviceProperty_SoundBankData: ::std::os::raw::c_uint = 1008;
pub const kMusicDeviceProperty_StreamFromDisk: ::std::os::raw::c_uint = 1011;
pub const kMusicDeviceProperty_SoundBankFSRef: ::std::os::raw::c_uint = 1012;
pub type _bindgen_ty_201 = ::std::os::raw::c_uint;
pub const kMusicDeviceProperty_InstrumentName: ::std::os::raw::c_uint = 1001;
pub const kMusicDeviceProperty_InstrumentNumber: ::std::os::raw::c_uint = 1004;
pub type _bindgen_ty_202 = ::std::os::raw::c_uint;
pub const kMusicDeviceProperty_InstrumentCount: ::std::os::raw::c_uint = 1000;
pub const kMusicDeviceProperty_BankName: ::std::os::raw::c_uint = 1007;
pub const kMusicDeviceProperty_SoundBankURL: ::std::os::raw::c_uint = 1100;
pub type _bindgen_ty_203 = ::std::os::raw::c_uint;
pub const kAUMIDISynthProperty_EnablePreload: ::std::os::raw::c_uint = 4119;
pub type _bindgen_ty_204 = ::std::os::raw::c_uint;
pub const kAUSamplerProperty_LoadInstrument: ::std::os::raw::c_uint = 4102;
pub const kAUSamplerProperty_LoadAudioFiles: ::std::os::raw::c_uint = 4101;
pub type _bindgen_ty_205 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUSamplerInstrumentData {
    pub fileURL: CFURLRef,
    pub instrumentType: UInt8,
    pub bankMSB: UInt8,
    pub bankLSB: UInt8,
    pub presetID: UInt8,
}
#[test]
fn bindgen_test_layout_AUSamplerInstrumentData() {
    assert_eq!(
        ::std::mem::size_of::<AUSamplerInstrumentData>(),
        16usize,
        concat!("Size of: ", stringify!(AUSamplerInstrumentData))
    );
    assert_eq!(
        ::std::mem::align_of::<AUSamplerInstrumentData>(),
        8usize,
        concat!("Alignment of ", stringify!(AUSamplerInstrumentData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUSamplerInstrumentData>())).fileURL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerInstrumentData),
            "::",
            stringify!(fileURL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUSamplerInstrumentData>())).instrumentType as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerInstrumentData),
            "::",
            stringify!(instrumentType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUSamplerInstrumentData>())).bankMSB as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerInstrumentData),
            "::",
            stringify!(bankMSB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUSamplerInstrumentData>())).bankLSB as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerInstrumentData),
            "::",
            stringify!(bankLSB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUSamplerInstrumentData>())).presetID as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerInstrumentData),
            "::",
            stringify!(presetID)
        )
    );
}
impl Default for AUSamplerInstrumentData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kInstrumentType_DLSPreset: ::std::os::raw::c_uint = 1;
pub const kInstrumentType_SF2Preset: ::std::os::raw::c_uint = 1;
pub const kInstrumentType_AUPreset: ::std::os::raw::c_uint = 2;
pub const kInstrumentType_Audiofile: ::std::os::raw::c_uint = 3;
pub const kInstrumentType_EXS24: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_206 = ::std::os::raw::c_uint;
pub const kAUSampler_DefaultPercussionBankMSB: ::std::os::raw::c_uint = 120;
pub const kAUSampler_DefaultMelodicBankMSB: ::std::os::raw::c_uint = 121;
pub const kAUSampler_DefaultBankLSB: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_207 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_DeferredRendererPullSize: ::std::os::raw::c_uint = 3320;
pub const kAudioUnitProperty_DeferredRendererExtraLatency: ::std::os::raw::c_uint = 3321;
pub const kAudioUnitProperty_DeferredRendererWaitFrames: ::std::os::raw::c_uint = 3322;
pub type _bindgen_ty_208 = ::std::os::raw::c_uint;
pub const kAUNetReceiveProperty_Hostname: ::std::os::raw::c_uint = 3511;
pub const kAUNetReceiveProperty_Password: ::std::os::raw::c_uint = 3512;
pub type _bindgen_ty_209 = ::std::os::raw::c_uint;
pub const kAUNetSendProperty_PortNum: ::std::os::raw::c_uint = 3513;
pub const kAUNetSendProperty_TransmissionFormat: ::std::os::raw::c_uint = 3514;
pub const kAUNetSendProperty_TransmissionFormatIndex: ::std::os::raw::c_uint = 3515;
pub const kAUNetSendProperty_ServiceName: ::std::os::raw::c_uint = 3516;
pub const kAUNetSendProperty_Disconnect: ::std::os::raw::c_uint = 3517;
pub const kAUNetSendProperty_Password: ::std::os::raw::c_uint = 3518;
pub type _bindgen_ty_210 = ::std::os::raw::c_uint;
pub const kAUNetSendPresetFormat_PCMFloat32: ::std::os::raw::c_uint = 0;
pub const kAUNetSendPresetFormat_PCMInt24: ::std::os::raw::c_uint = 1;
pub const kAUNetSendPresetFormat_PCMInt16: ::std::os::raw::c_uint = 2;
pub const kAUNetSendPresetFormat_Lossless24: ::std::os::raw::c_uint = 3;
pub const kAUNetSendPresetFormat_Lossless16: ::std::os::raw::c_uint = 4;
pub const kAUNetSendPresetFormat_ULaw: ::std::os::raw::c_uint = 5;
pub const kAUNetSendPresetFormat_IMA4: ::std::os::raw::c_uint = 6;
pub const kAUNetSendPresetFormat_AAC_128kbpspc: ::std::os::raw::c_uint = 7;
pub const kAUNetSendPresetFormat_AAC_96kbpspc: ::std::os::raw::c_uint = 8;
pub const kAUNetSendPresetFormat_AAC_80kbpspc: ::std::os::raw::c_uint = 9;
pub const kAUNetSendPresetFormat_AAC_64kbpspc: ::std::os::raw::c_uint = 10;
pub const kAUNetSendPresetFormat_AAC_48kbpspc: ::std::os::raw::c_uint = 11;
pub const kAUNetSendPresetFormat_AAC_40kbpspc: ::std::os::raw::c_uint = 12;
pub const kAUNetSendPresetFormat_AAC_32kbpspc: ::std::os::raw::c_uint = 13;
pub const kAUNetSendPresetFormat_AAC_LD_64kbpspc: ::std::os::raw::c_uint = 14;
pub const kAUNetSendPresetFormat_AAC_LD_48kbpspc: ::std::os::raw::c_uint = 15;
pub const kAUNetSendPresetFormat_AAC_LD_40kbpspc: ::std::os::raw::c_uint = 16;
pub const kAUNetSendPresetFormat_AAC_LD_32kbpspc: ::std::os::raw::c_uint = 17;
pub const kAUNetSendNumPresetFormats: ::std::os::raw::c_uint = 18;
pub type _bindgen_ty_211 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AUNumVersion {
    pub nonRelRev: UInt8,
    pub stage: UInt8,
    pub minorAndBugRev: UInt8,
    pub majorRev: UInt8,
}
#[test]
fn bindgen_test_layout_AUNumVersion() {
    assert_eq!(
        ::std::mem::size_of::<AUNumVersion>(),
        4usize,
        concat!("Size of: ", stringify!(AUNumVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<AUNumVersion>(),
        1usize,
        concat!("Alignment of ", stringify!(AUNumVersion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUNumVersion>())).nonRelRev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNumVersion),
            "::",
            stringify!(nonRelRev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUNumVersion>())).stage as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNumVersion),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUNumVersion>())).minorAndBugRev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNumVersion),
            "::",
            stringify!(minorAndBugRev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUNumVersion>())).majorRev as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNumVersion),
            "::",
            stringify!(majorRev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUHostIdentifier {
    pub hostName: CFStringRef,
    pub hostVersion: AUNumVersion,
}
#[test]
fn bindgen_test_layout_AUHostIdentifier() {
    assert_eq!(
        ::std::mem::size_of::<AUHostIdentifier>(),
        16usize,
        concat!("Size of: ", stringify!(AUHostIdentifier))
    );
    assert_eq!(
        ::std::mem::align_of::<AUHostIdentifier>(),
        8usize,
        concat!("Alignment of ", stringify!(AUHostIdentifier))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUHostIdentifier>())).hostName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUHostIdentifier),
            "::",
            stringify!(hostName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUHostIdentifier>())).hostVersion as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUHostIdentifier),
            "::",
            stringify!(hostVersion)
        )
    );
}
impl Default for AUHostIdentifier {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAudioUnitParameterFlag_Global: ::std::os::raw::c_uint = 1;
pub const kAudioUnitParameterFlag_Input: ::std::os::raw::c_uint = 2;
pub const kAudioUnitParameterFlag_Output: ::std::os::raw::c_uint = 4;
pub const kAudioUnitParameterFlag_Group: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_212 = ::std::os::raw::c_uint;
pub const kAudioUnitParameterFlag_HasName: ::std::os::raw::c_uint = 2097152;
pub type _bindgen_ty_213 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_SRCAlgorithm: ::std::os::raw::c_uint = 9;
pub const kAudioUnitProperty_MIDIControlMapping: ::std::os::raw::c_uint = 17;
pub const kAudioUnitProperty_CurrentPreset: ::std::os::raw::c_uint = 28;
pub const kAudioUnitProperty_ParameterValueName: ::std::os::raw::c_uint = 33;
pub const kAudioUnitProperty_BusCount: ::std::os::raw::c_uint = 11;
pub const kAudioOfflineUnitProperty_InputSize: ::std::os::raw::c_uint = 3020;
pub const kAudioOfflineUnitProperty_OutputSize: ::std::os::raw::c_uint = 3021;
pub type _bindgen_ty_214 = ::std::os::raw::c_uint;
pub const kAudioUnitSRCAlgorithm_Polyphase: ::std::os::raw::c_uint = 1886350457;
pub const kAudioUnitSRCAlgorithm_MediumQuality: ::std::os::raw::c_uint = 1668510307;
pub type _bindgen_ty_215 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitMIDIControlMapping {
    pub midiNRPN: UInt16,
    pub midiControl: UInt8,
    pub scope: UInt8,
    pub element: AudioUnitElement,
    pub parameter: AudioUnitParameterID,
}
#[test]
fn bindgen_test_layout_AudioUnitMIDIControlMapping() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitMIDIControlMapping>(),
        12usize,
        concat!("Size of: ", stringify!(AudioUnitMIDIControlMapping))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitMIDIControlMapping>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitMIDIControlMapping))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMIDIControlMapping>())).midiNRPN as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMIDIControlMapping),
            "::",
            stringify!(midiNRPN)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMIDIControlMapping>())).midiControl as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMIDIControlMapping),
            "::",
            stringify!(midiControl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMIDIControlMapping>())).scope as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMIDIControlMapping),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMIDIControlMapping>())).element as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMIDIControlMapping),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitMIDIControlMapping>())).parameter as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitMIDIControlMapping),
            "::",
            stringify!(parameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioUnitParameterValueName {
    pub inParamID: AudioUnitParameterID,
    pub inValue: *const Float32,
    pub outName: CFStringRef,
}
#[test]
fn bindgen_test_layout_AudioUnitParameterValueName() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitParameterValueName>(),
        24usize,
        concat!("Size of: ", stringify!(AudioUnitParameterValueName))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitParameterValueName>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitParameterValueName))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueName>())).inParamID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueName),
            "::",
            stringify!(inParamID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueName>())).inValue as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueName),
            "::",
            stringify!(inValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitParameterValueName>())).outName as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitParameterValueName),
            "::",
            stringify!(outName)
        )
    );
}
impl Default for AudioUnitParameterValueName {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kMusicDeviceProperty_GroupOutputBus: ::std::os::raw::c_uint = 1002;
pub const kMusicDeviceProperty_SoundBankFSSpec: ::std::os::raw::c_uint = 1003;
pub const kAudioUnitProperty_PannerMode: ::std::os::raw::c_uint = 3008;
pub type _bindgen_ty_216 = ::std::os::raw::c_uint;
pub const kAudioUnitProperty_SpeakerConfiguration: ::std::os::raw::c_uint = 3001;
pub type _bindgen_ty_217 = ::std::os::raw::c_uint;
pub const kSpeakerConfiguration_HeadPhones: ::std::os::raw::c_uint = 0;
pub const kSpeakerConfiguration_Stereo: ::std::os::raw::c_uint = 1;
pub const kSpeakerConfiguration_Quad: ::std::os::raw::c_uint = 2;
pub const kSpeakerConfiguration_5_0: ::std::os::raw::c_uint = 3;
pub const kSpeakerConfiguration_5_1: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_218 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUSamplerBankPresetData {
    pub bankURL: CFURLRef,
    pub bankMSB: UInt8,
    pub bankLSB: UInt8,
    pub presetID: UInt8,
    pub reserved: UInt8,
}
#[test]
fn bindgen_test_layout_AUSamplerBankPresetData() {
    assert_eq!(
        ::std::mem::size_of::<AUSamplerBankPresetData>(),
        16usize,
        concat!("Size of: ", stringify!(AUSamplerBankPresetData))
    );
    assert_eq!(
        ::std::mem::align_of::<AUSamplerBankPresetData>(),
        8usize,
        concat!("Alignment of ", stringify!(AUSamplerBankPresetData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUSamplerBankPresetData>())).bankURL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerBankPresetData),
            "::",
            stringify!(bankURL)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUSamplerBankPresetData>())).bankMSB as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerBankPresetData),
            "::",
            stringify!(bankMSB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUSamplerBankPresetData>())).bankLSB as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerBankPresetData),
            "::",
            stringify!(bankLSB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUSamplerBankPresetData>())).presetID as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerBankPresetData),
            "::",
            stringify!(presetID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUSamplerBankPresetData>())).reserved as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(AUSamplerBankPresetData),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for AUSamplerBankPresetData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAUSamplerProperty_LoadPresetFromBank: ::std::os::raw::c_uint = 4100;
pub const kAUSamplerProperty_BankAndPreset: ::std::os::raw::c_uint = 4100;
pub type _bindgen_ty_219 = ::std::os::raw::c_uint;
pub type MusicDeviceInstrumentID = UInt32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MusicDeviceStdNoteParams {
    pub argCount: UInt32,
    pub mPitch: Float32,
    pub mVelocity: Float32,
}
#[test]
fn bindgen_test_layout_MusicDeviceStdNoteParams() {
    assert_eq!(
        ::std::mem::size_of::<MusicDeviceStdNoteParams>(),
        12usize,
        concat!("Size of: ", stringify!(MusicDeviceStdNoteParams))
    );
    assert_eq!(
        ::std::mem::align_of::<MusicDeviceStdNoteParams>(),
        4usize,
        concat!("Alignment of ", stringify!(MusicDeviceStdNoteParams))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MusicDeviceStdNoteParams>())).argCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceStdNoteParams),
            "::",
            stringify!(argCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicDeviceStdNoteParams>())).mPitch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceStdNoteParams),
            "::",
            stringify!(mPitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MusicDeviceStdNoteParams>())).mVelocity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceStdNoteParams),
            "::",
            stringify!(mVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct NoteParamsControlValue {
    pub mID: AudioUnitParameterID,
    pub mValue: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_NoteParamsControlValue() {
    assert_eq!(
        ::std::mem::size_of::<NoteParamsControlValue>(),
        8usize,
        concat!("Size of: ", stringify!(NoteParamsControlValue))
    );
    assert_eq!(
        ::std::mem::align_of::<NoteParamsControlValue>(),
        4usize,
        concat!("Alignment of ", stringify!(NoteParamsControlValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NoteParamsControlValue>())).mID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NoteParamsControlValue),
            "::",
            stringify!(mID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NoteParamsControlValue>())).mValue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NoteParamsControlValue),
            "::",
            stringify!(mValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MusicDeviceNoteParams {
    pub argCount: UInt32,
    pub mPitch: Float32,
    pub mVelocity: Float32,
    pub mControls: [NoteParamsControlValue; 1usize],
}
#[test]
fn bindgen_test_layout_MusicDeviceNoteParams() {
    assert_eq!(
        ::std::mem::size_of::<MusicDeviceNoteParams>(),
        20usize,
        concat!("Size of: ", stringify!(MusicDeviceNoteParams))
    );
    assert_eq!(
        ::std::mem::align_of::<MusicDeviceNoteParams>(),
        4usize,
        concat!("Alignment of ", stringify!(MusicDeviceNoteParams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicDeviceNoteParams>())).argCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceNoteParams),
            "::",
            stringify!(argCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicDeviceNoteParams>())).mPitch as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceNoteParams),
            "::",
            stringify!(mPitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicDeviceNoteParams>())).mVelocity as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceNoteParams),
            "::",
            stringify!(mVelocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicDeviceNoteParams>())).mControls as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicDeviceNoteParams),
            "::",
            stringify!(mControls)
        )
    );
}
pub const kMusicNoteEvent_UseGroupInstrument: ::std::os::raw::c_uint = 4294967295;
pub const kMusicNoteEvent_Unused: ::std::os::raw::c_uint = 4294967295;
pub type _bindgen_ty_220 = ::std::os::raw::c_uint;
pub type MusicDeviceGroupID = UInt32;
pub type NoteInstanceID = UInt32;
pub type MusicDeviceComponent = AudioComponentInstance;
extern "C" {
    pub fn MusicDeviceMIDIEvent(
        inUnit: MusicDeviceComponent,
        inStatus: UInt32,
        inData1: UInt32,
        inData2: UInt32,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceSysEx(
        inUnit: MusicDeviceComponent,
        inData: *const UInt8,
        inLength: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceStartNote(
        inUnit: MusicDeviceComponent,
        inInstrument: MusicDeviceInstrumentID,
        inGroupID: MusicDeviceGroupID,
        outNoteInstanceID: *mut NoteInstanceID,
        inOffsetSampleFrame: UInt32,
        inParams: *const MusicDeviceNoteParams,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceStopNote(
        inUnit: MusicDeviceComponent,
        inGroupID: MusicDeviceGroupID,
        inNoteInstanceID: NoteInstanceID,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus;
}
pub const kMusicDeviceRange: ::std::os::raw::c_uint = 256;
pub const kMusicDeviceMIDIEventSelect: ::std::os::raw::c_uint = 257;
pub const kMusicDeviceSysExSelect: ::std::os::raw::c_uint = 258;
pub const kMusicDevicePrepareInstrumentSelect: ::std::os::raw::c_uint = 259;
pub const kMusicDeviceReleaseInstrumentSelect: ::std::os::raw::c_uint = 260;
pub const kMusicDeviceStartNoteSelect: ::std::os::raw::c_uint = 261;
pub const kMusicDeviceStopNoteSelect: ::std::os::raw::c_uint = 262;
pub type _bindgen_ty_221 = ::std::os::raw::c_uint;
pub type MusicDeviceMIDIEventProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inStatus: UInt32,
        inData1: UInt32,
        inData2: UInt32,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus,
>;
pub type MusicDeviceSysExProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inData: *const UInt8,
        inLength: UInt32,
    ) -> OSStatus,
>;
pub type MusicDeviceStartNoteProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inInstrument: MusicDeviceInstrumentID,
        inGroupID: MusicDeviceGroupID,
        outNoteInstanceID: *mut NoteInstanceID,
        inOffsetSampleFrame: UInt32,
        inParams: *const MusicDeviceNoteParams,
    ) -> OSStatus,
>;
pub type MusicDeviceStopNoteProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inGroupID: MusicDeviceGroupID,
        inNoteInstanceID: NoteInstanceID,
        inOffsetSampleFrame: UInt32,
    ) -> OSStatus,
>;
extern "C" {
    pub fn MusicDevicePrepareInstrument(
        inUnit: MusicDeviceComponent,
        inInstrument: MusicDeviceInstrumentID,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicDeviceReleaseInstrument(
        inUnit: MusicDeviceComponent,
        inInstrument: MusicDeviceInstrumentID,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAUGraph {
    _unused: [u8; 0],
}
pub type AUGraph = *mut OpaqueAUGraph;
pub type AUNode = SInt32;
pub const kAUGraphErr_NodeNotFound: ::std::os::raw::c_int = -10860;
pub const kAUGraphErr_InvalidConnection: ::std::os::raw::c_int = -10861;
pub const kAUGraphErr_OutputNodeErr: ::std::os::raw::c_int = -10862;
pub const kAUGraphErr_CannotDoInCurrentContext: ::std::os::raw::c_int = -10863;
pub const kAUGraphErr_InvalidAudioUnit: ::std::os::raw::c_int = -10864;
pub type _bindgen_ty_222 = ::std::os::raw::c_int;
extern "C" {
    pub fn NewAUGraph(outGraph: *mut AUGraph) -> OSStatus;
}
extern "C" {
    pub fn DisposeAUGraph(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphAddNode(
        inGraph: AUGraph,
        inDescription: *const AudioComponentDescription,
        outNode: *mut AUNode,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphRemoveNode(inGraph: AUGraph, inNode: AUNode) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeCount(inGraph: AUGraph, outNumberOfNodes: *mut UInt32) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetIndNode(inGraph: AUGraph, inIndex: UInt32, outNode: *mut AUNode) -> OSStatus;
}
extern "C" {
    pub fn AUGraphNodeInfo(
        inGraph: AUGraph,
        inNode: AUNode,
        outDescription: *mut AudioComponentDescription,
        outAudioUnit: *mut AudioUnit,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphNewNodeSubGraph(inGraph: AUGraph, outNode: *mut AUNode) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeInfoSubGraph(
        inGraph: AUGraph,
        inNode: AUNode,
        outSubGraph: *mut AUGraph,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsNodeSubGraph(
        inGraph: AUGraph,
        inNode: AUNode,
        outFlag: *mut Boolean,
    ) -> OSStatus;
}
pub const kAUNodeInteraction_Connection: ::std::os::raw::c_uint = 1;
pub const kAUNodeInteraction_InputCallback: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_223 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioUnitNodeConnection {
    pub sourceNode: AUNode,
    pub sourceOutputNumber: UInt32,
    pub destNode: AUNode,
    pub destInputNumber: UInt32,
}
#[test]
fn bindgen_test_layout_AudioUnitNodeConnection() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitNodeConnection>(),
        16usize,
        concat!("Size of: ", stringify!(AudioUnitNodeConnection))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitNodeConnection>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioUnitNodeConnection))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitNodeConnection>())).sourceNode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitNodeConnection),
            "::",
            stringify!(sourceNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitNodeConnection>())).sourceOutputNumber as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitNodeConnection),
            "::",
            stringify!(sourceOutputNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitNodeConnection>())).destNode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitNodeConnection),
            "::",
            stringify!(destNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitNodeConnection>())).destInputNumber as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitNodeConnection),
            "::",
            stringify!(destInputNumber)
        )
    );
}
pub type AUNodeConnection = AudioUnitNodeConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUNodeRenderCallback {
    pub destNode: AUNode,
    pub destInputNumber: AudioUnitElement,
    pub cback: AURenderCallbackStruct,
}
#[test]
fn bindgen_test_layout_AUNodeRenderCallback() {
    assert_eq!(
        ::std::mem::size_of::<AUNodeRenderCallback>(),
        24usize,
        concat!("Size of: ", stringify!(AUNodeRenderCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<AUNodeRenderCallback>(),
        8usize,
        concat!("Alignment of ", stringify!(AUNodeRenderCallback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUNodeRenderCallback>())).destNode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeRenderCallback),
            "::",
            stringify!(destNode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUNodeRenderCallback>())).destInputNumber as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeRenderCallback),
            "::",
            stringify!(destInputNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUNodeRenderCallback>())).cback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeRenderCallback),
            "::",
            stringify!(cback)
        )
    );
}
impl Default for AUNodeRenderCallback {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AUNodeInteraction {
    pub nodeInteractionType: UInt32,
    pub nodeInteraction: AUNodeInteraction__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AUNodeInteraction__bindgen_ty_1 {
    pub connection: AUNodeConnection,
    pub inputCallback: AUNodeRenderCallback,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_AUNodeInteraction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<AUNodeInteraction__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(AUNodeInteraction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<AUNodeInteraction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(AUNodeInteraction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUNodeInteraction__bindgen_ty_1>())).connection as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeInteraction__bindgen_ty_1),
            "::",
            stringify!(connection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUNodeInteraction__bindgen_ty_1>())).inputCallback as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeInteraction__bindgen_ty_1),
            "::",
            stringify!(inputCallback)
        )
    );
}
impl Default for AUNodeInteraction__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_AUNodeInteraction() {
    assert_eq!(
        ::std::mem::size_of::<AUNodeInteraction>(),
        32usize,
        concat!("Size of: ", stringify!(AUNodeInteraction))
    );
    assert_eq!(
        ::std::mem::align_of::<AUNodeInteraction>(),
        8usize,
        concat!("Alignment of ", stringify!(AUNodeInteraction))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUNodeInteraction>())).nodeInteractionType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeInteraction),
            "::",
            stringify!(nodeInteractionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AUNodeInteraction>())).nodeInteraction as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUNodeInteraction),
            "::",
            stringify!(nodeInteraction)
        )
    );
}
impl Default for AUNodeInteraction {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn AUGraphConnectNodeInput(
        inGraph: AUGraph,
        inSourceNode: AUNode,
        inSourceOutputNumber: UInt32,
        inDestNode: AUNode,
        inDestInputNumber: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphSetNodeInputCallback(
        inGraph: AUGraph,
        inDestNode: AUNode,
        inDestInputNumber: UInt32,
        inInputCallback: *const AURenderCallbackStruct,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphDisconnectNodeInput(
        inGraph: AUGraph,
        inDestNode: AUNode,
        inDestInputNumber: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphClearConnections(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNumberOfInteractions(
        inGraph: AUGraph,
        outNumInteractions: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetInteractionInfo(
        inGraph: AUGraph,
        inInteractionIndex: UInt32,
        outInteraction: *mut AUNodeInteraction,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphCountNodeInteractions(
        inGraph: AUGraph,
        inNode: AUNode,
        outNumInteractions: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeInteractions(
        inGraph: AUGraph,
        inNode: AUNode,
        ioNumInteractions: *mut UInt32,
        outInteractions: *mut AUNodeInteraction,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphUpdate(inGraph: AUGraph, outIsUpdated: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphOpen(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphClose(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphInitialize(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphUninitialize(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphStart(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphStop(inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsOpen(inGraph: AUGraph, outIsOpen: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsInitialized(inGraph: AUGraph, outIsInitialized: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphIsRunning(inGraph: AUGraph, outIsRunning: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetCPULoad(inGraph: AUGraph, outAverageCPULoad: *mut Float32) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetMaxCPULoad(inGraph: AUGraph, outMaxLoad: *mut Float32) -> OSStatus;
}
extern "C" {
    pub fn AUGraphAddRenderNotify(
        inGraph: AUGraph,
        inCallback: AURenderCallback,
        inRefCon: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphRemoveRenderNotify(
        inGraph: AUGraph,
        inCallback: AURenderCallback,
        inRefCon: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComponentDescription {
    _unused: [u8; 0],
}
extern "C" {
    pub fn AUGraphNewNode(
        inGraph: AUGraph,
        inDescription: *const ComponentDescription,
        inClassDataSize: UInt32,
        inClassData: *const ::std::os::raw::c_void,
        outNode: *mut AUNode,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeInfo(
        inGraph: AUGraph,
        inNode: AUNode,
        outDescription: *mut ComponentDescription,
        outClassDataSize: *mut UInt32,
        outClassData: *mut *mut ::std::os::raw::c_void,
        outAudioUnit: *mut AudioUnit,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNumberOfConnections(
        inGraph: AUGraph,
        outNumConnections: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetConnectionInfo(
        inGraph: AUGraph,
        inConnectionIndex: UInt32,
        outSourceNode: *mut AUNode,
        outSourceOutputNumber: *mut UInt32,
        outDestNode: *mut AUNode,
        outDestInputNumber: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphCountNodeConnections(
        inGraph: AUGraph,
        inNode: AUNode,
        outNumConnections: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUGraphGetNodeConnections(
        inGraph: AUGraph,
        inNode: AUNode,
        outConnections: *mut AudioUnitNodeConnection,
        ioNumConnections: *mut UInt32,
    ) -> OSStatus;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioConverter {
    _unused: [u8; 0],
}
pub type AudioConverterRef = *mut OpaqueAudioConverter;
pub type AudioConverterPropertyID = UInt32;
pub const kAudioConverterPropertyMinimumInputBufferSize: ::std::os::raw::c_uint = 1835623027;
pub const kAudioConverterPropertyMinimumOutputBufferSize: ::std::os::raw::c_uint = 1836016243;
pub const kAudioConverterPropertyMaximumInputPacketSize: ::std::os::raw::c_uint = 2020175987;
pub const kAudioConverterPropertyMaximumOutputPacketSize: ::std::os::raw::c_uint = 2020569203;
pub const kAudioConverterPropertyCalculateInputBufferSize: ::std::os::raw::c_uint = 1667850867;
pub const kAudioConverterPropertyCalculateOutputBufferSize: ::std::os::raw::c_uint = 1668244083;
pub const kAudioConverterPropertyInputCodecParameters: ::std::os::raw::c_uint = 1768121456;
pub const kAudioConverterPropertyOutputCodecParameters: ::std::os::raw::c_uint = 1868784752;
pub const kAudioConverterSampleRateConverterComplexity: ::std::os::raw::c_uint = 1936876385;
pub const kAudioConverterSampleRateConverterQuality: ::std::os::raw::c_uint = 1936876401;
pub const kAudioConverterSampleRateConverterInitialPhase: ::std::os::raw::c_uint = 1936876400;
pub const kAudioConverterCodecQuality: ::std::os::raw::c_uint = 1667527029;
pub const kAudioConverterPrimeMethod: ::std::os::raw::c_uint = 1886547309;
pub const kAudioConverterPrimeInfo: ::std::os::raw::c_uint = 1886546285;
pub const kAudioConverterChannelMap: ::std::os::raw::c_uint = 1667788144;
pub const kAudioConverterDecompressionMagicCookie: ::std::os::raw::c_uint = 1684891491;
pub const kAudioConverterCompressionMagicCookie: ::std::os::raw::c_uint = 1668114275;
pub const kAudioConverterEncodeBitRate: ::std::os::raw::c_uint = 1651663220;
pub const kAudioConverterEncodeAdjustableSampleRate: ::std::os::raw::c_uint = 1634366322;
pub const kAudioConverterInputChannelLayout: ::std::os::raw::c_uint = 1768123424;
pub const kAudioConverterOutputChannelLayout: ::std::os::raw::c_uint = 1868786720;
pub const kAudioConverterApplicableEncodeBitRates: ::std::os::raw::c_uint = 1634034290;
pub const kAudioConverterAvailableEncodeBitRates: ::std::os::raw::c_uint = 1986355826;
pub const kAudioConverterApplicableEncodeSampleRates: ::std::os::raw::c_uint = 1634038642;
pub const kAudioConverterAvailableEncodeSampleRates: ::std::os::raw::c_uint = 1986360178;
pub const kAudioConverterAvailableEncodeChannelLayoutTags: ::std::os::raw::c_uint = 1634034540;
pub const kAudioConverterCurrentOutputStreamDescription: ::std::os::raw::c_uint = 1633906532;
pub const kAudioConverterCurrentInputStreamDescription: ::std::os::raw::c_uint = 1633904996;
pub const kAudioConverterPropertySettings: ::std::os::raw::c_uint = 1633906803;
pub const kAudioConverterPropertyBitDepthHint: ::std::os::raw::c_uint = 1633903204;
pub const kAudioConverterPropertyFormatList: ::std::os::raw::c_uint = 1718383476;
pub type _bindgen_ty_224 = ::std::os::raw::c_uint;
pub const kAudioConverterPropertyDithering: ::std::os::raw::c_uint = 1684632680;
pub const kAudioConverterPropertyDitherBitDepth: ::std::os::raw::c_uint = 1684171124;
pub type _bindgen_ty_225 = ::std::os::raw::c_uint;
pub const kDitherAlgorithm_TPDF: ::std::os::raw::c_uint = 1;
pub const kDitherAlgorithm_NoiseShaping: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_226 = ::std::os::raw::c_uint;
pub const kAudioConverterQuality_Max: ::std::os::raw::c_uint = 127;
pub const kAudioConverterQuality_High: ::std::os::raw::c_uint = 96;
pub const kAudioConverterQuality_Medium: ::std::os::raw::c_uint = 64;
pub const kAudioConverterQuality_Low: ::std::os::raw::c_uint = 32;
pub const kAudioConverterQuality_Min: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_227 = ::std::os::raw::c_uint;
pub const kAudioConverterSampleRateConverterComplexity_Linear: ::std::os::raw::c_uint = 1818848869;
pub const kAudioConverterSampleRateConverterComplexity_Normal: ::std::os::raw::c_uint = 1852797549;
pub const kAudioConverterSampleRateConverterComplexity_Mastering: ::std::os::raw::c_uint =
    1650553971;
pub const kAudioConverterSampleRateConverterComplexity_MinimumPhase: ::std::os::raw::c_uint =
    1835626096;
pub type _bindgen_ty_228 = ::std::os::raw::c_uint;
pub const kConverterPrimeMethod_Pre: ::std::os::raw::c_uint = 0;
pub const kConverterPrimeMethod_Normal: ::std::os::raw::c_uint = 1;
pub const kConverterPrimeMethod_None: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_229 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioConverterPrimeInfo {
    pub leadingFrames: UInt32,
    pub trailingFrames: UInt32,
}
#[test]
fn bindgen_test_layout_AudioConverterPrimeInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioConverterPrimeInfo>(),
        8usize,
        concat!("Size of: ", stringify!(AudioConverterPrimeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioConverterPrimeInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioConverterPrimeInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioConverterPrimeInfo>())).leadingFrames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioConverterPrimeInfo),
            "::",
            stringify!(leadingFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioConverterPrimeInfo>())).trailingFrames as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioConverterPrimeInfo),
            "::",
            stringify!(trailingFrames)
        )
    );
}
pub const kAudioConverterErr_FormatNotSupported: ::std::os::raw::c_uint = 1718449215;
pub const kAudioConverterErr_OperationNotSupported: ::std::os::raw::c_uint = 1869627199;
pub const kAudioConverterErr_PropertyNotSupported: ::std::os::raw::c_uint = 1886547824;
pub const kAudioConverterErr_InvalidInputSize: ::std::os::raw::c_uint = 1768846202;
pub const kAudioConverterErr_InvalidOutputSize: ::std::os::raw::c_uint = 1869902714;
pub const kAudioConverterErr_UnspecifiedError: ::std::os::raw::c_uint = 2003329396;
pub const kAudioConverterErr_BadPropertySizeError: ::std::os::raw::c_uint = 561211770;
pub const kAudioConverterErr_RequiresPacketDescriptionsError: ::std::os::raw::c_uint = 561015652;
pub const kAudioConverterErr_InputSampleRateOutOfRange: ::std::os::raw::c_uint = 560558962;
pub const kAudioConverterErr_OutputSampleRateOutOfRange: ::std::os::raw::c_uint = 560952178;
pub type _bindgen_ty_230 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioConverterNew(
        inSourceFormat: *const AudioStreamBasicDescription,
        inDestinationFormat: *const AudioStreamBasicDescription,
        outAudioConverter: *mut AudioConverterRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterNewSpecific(
        inSourceFormat: *const AudioStreamBasicDescription,
        inDestinationFormat: *const AudioStreamBasicDescription,
        inNumberClassDescriptions: UInt32,
        inClassDescriptions: *const AudioClassDescription,
        outAudioConverter: *mut AudioConverterRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterDispose(inAudioConverter: AudioConverterRef) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterReset(inAudioConverter: AudioConverterRef) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterGetPropertyInfo(
        inAudioConverter: AudioConverterRef,
        inPropertyID: AudioConverterPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterGetProperty(
        inAudioConverter: AudioConverterRef,
        inPropertyID: AudioConverterPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterSetProperty(
        inAudioConverter: AudioConverterRef,
        inPropertyID: AudioConverterPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterConvertBuffer(
        inAudioConverter: AudioConverterRef,
        inInputDataSize: UInt32,
        inInputData: *const ::std::os::raw::c_void,
        ioOutputDataSize: *mut UInt32,
        outOutputData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub type AudioConverterComplexInputDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        inAudioConverter: AudioConverterRef,
        ioNumberDataPackets: *mut UInt32,
        ioData: *mut AudioBufferList,
        outDataPacketDescription: *mut *mut AudioStreamPacketDescription,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
extern "C" {
    pub fn AudioConverterFillComplexBuffer(
        inAudioConverter: AudioConverterRef,
        inInputDataProc: AudioConverterComplexInputDataProc,
        inInputDataProcUserData: *mut ::std::os::raw::c_void,
        ioOutputDataPacketSize: *mut UInt32,
        outOutputData: *mut AudioBufferList,
        outPacketDescription: *mut AudioStreamPacketDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioConverterConvertComplexBuffer(
        inAudioConverter: AudioConverterRef,
        inNumberPCMFrames: UInt32,
        inInputData: *const AudioBufferList,
        outOutputData: *mut AudioBufferList,
    ) -> OSStatus;
}
pub const kAudioConverterPropertyMaximumInputBufferSize: ::std::os::raw::c_uint = 2020172403;
pub const kAudioConverterSampleRateConverterAlgorithm: ::std::os::raw::c_uint = 1936876393;
pub type _bindgen_ty_231 = ::std::os::raw::c_uint;
pub type AudioConverterInputDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        inAudioConverter: AudioConverterRef,
        ioDataSize: *mut UInt32,
        outData: *mut *mut ::std::os::raw::c_void,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
extern "C" {
    pub fn AudioConverterFillBuffer(
        inAudioConverter: AudioConverterRef,
        inInputDataProc: AudioConverterInputDataProc,
        inInputDataProcUserData: *mut ::std::os::raw::c_void,
        ioOutputDataSize: *mut UInt32,
        outOutputData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub type AudioFileTypeID = UInt32;
pub const kAudioFileAIFFType: ::std::os::raw::c_uint = 1095321158;
pub const kAudioFileAIFCType: ::std::os::raw::c_uint = 1095321155;
pub const kAudioFileWAVEType: ::std::os::raw::c_uint = 1463899717;
pub const kAudioFileRF64Type: ::std::os::raw::c_uint = 1380333108;
pub const kAudioFileBW64Type: ::std::os::raw::c_uint = 1113011764;
pub const kAudioFileWave64Type: ::std::os::raw::c_uint = 1463170150;
pub const kAudioFileSoundDesigner2Type: ::std::os::raw::c_uint = 1399075430;
pub const kAudioFileNextType: ::std::os::raw::c_uint = 1315264596;
pub const kAudioFileMP3Type: ::std::os::raw::c_uint = 1297106739;
pub const kAudioFileMP2Type: ::std::os::raw::c_uint = 1297106738;
pub const kAudioFileMP1Type: ::std::os::raw::c_uint = 1297106737;
pub const kAudioFileAC3Type: ::std::os::raw::c_uint = 1633889587;
pub const kAudioFileAAC_ADTSType: ::std::os::raw::c_uint = 1633973363;
pub const kAudioFileMPEG4Type: ::std::os::raw::c_uint = 1836069990;
pub const kAudioFileM4AType: ::std::os::raw::c_uint = 1832149350;
pub const kAudioFileM4BType: ::std::os::raw::c_uint = 1832149606;
pub const kAudioFileCAFType: ::std::os::raw::c_uint = 1667327590;
pub const kAudioFile3GPType: ::std::os::raw::c_uint = 862417008;
pub const kAudioFile3GP2Type: ::std::os::raw::c_uint = 862416946;
pub const kAudioFileAMRType: ::std::os::raw::c_uint = 1634562662;
pub const kAudioFileFLACType: ::std::os::raw::c_uint = 1718378851;
pub const kAudioFileLATMInLOASType: ::std::os::raw::c_uint = 1819238771;
pub type _bindgen_ty_232 = ::std::os::raw::c_uint;
pub const kAudioFileUnspecifiedError: ::std::os::raw::c_int = 2003334207;
pub const kAudioFileUnsupportedFileTypeError: ::std::os::raw::c_int = 1954115647;
pub const kAudioFileUnsupportedDataFormatError: ::std::os::raw::c_int = 1718449215;
pub const kAudioFileUnsupportedPropertyError: ::std::os::raw::c_int = 1886681407;
pub const kAudioFileBadPropertySizeError: ::std::os::raw::c_int = 561211770;
pub const kAudioFilePermissionsError: ::std::os::raw::c_int = 1886547263;
pub const kAudioFileNotOptimizedError: ::std::os::raw::c_int = 1869640813;
pub const kAudioFileInvalidChunkError: ::std::os::raw::c_int = 1667787583;
pub const kAudioFileDoesNotAllow64BitDataSizeError: ::std::os::raw::c_int = 1868981823;
pub const kAudioFileInvalidPacketOffsetError: ::std::os::raw::c_int = 1885563711;
pub const kAudioFileInvalidPacketDependencyError: ::std::os::raw::c_int = 1684369471;
pub const kAudioFileInvalidFileError: ::std::os::raw::c_int = 1685348671;
pub const kAudioFileOperationNotSupportedError: ::std::os::raw::c_int = 1869627199;
pub const kAudioFileNotOpenError: ::std::os::raw::c_int = -38;
pub const kAudioFileEndOfFileError: ::std::os::raw::c_int = -39;
pub const kAudioFilePositionError: ::std::os::raw::c_int = -40;
pub const kAudioFileFileNotFoundError: ::std::os::raw::c_int = -43;
pub type _bindgen_ty_233 = ::std::os::raw::c_int;
pub type AudioFileFlags = UInt32;
pub const kAudioFileFlags_EraseFile: ::std::os::raw::c_uint = 1;
pub const kAudioFileFlags_DontPageAlignAudioData: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_234 = ::std::os::raw::c_uint;
pub type AudioFilePermissions = SInt8;
pub const kAudioFileReadPermission: ::std::os::raw::c_uint = 1;
pub const kAudioFileWritePermission: ::std::os::raw::c_uint = 2;
pub const kAudioFileReadWritePermission: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_235 = ::std::os::raw::c_uint;
pub type AudioFileID = *mut OpaqueAudioFileID;
pub type AudioFilePropertyID = UInt32;
pub const kAudioFileLoopDirection_NoLooping: ::std::os::raw::c_uint = 0;
pub const kAudioFileLoopDirection_Forward: ::std::os::raw::c_uint = 1;
pub const kAudioFileLoopDirection_ForwardAndBackward: ::std::os::raw::c_uint = 2;
pub const kAudioFileLoopDirection_Backward: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_236 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioFile_SMPTE_Time {
    pub mHours: SInt8,
    pub mMinutes: UInt8,
    pub mSeconds: UInt8,
    pub mFrames: UInt8,
    pub mSubFrameSampleOffset: UInt32,
}
#[test]
fn bindgen_test_layout_AudioFile_SMPTE_Time() {
    assert_eq!(
        ::std::mem::size_of::<AudioFile_SMPTE_Time>(),
        8usize,
        concat!("Size of: ", stringify!(AudioFile_SMPTE_Time))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFile_SMPTE_Time>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioFile_SMPTE_Time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFile_SMPTE_Time>())).mHours as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFile_SMPTE_Time),
            "::",
            stringify!(mHours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFile_SMPTE_Time>())).mMinutes as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFile_SMPTE_Time),
            "::",
            stringify!(mMinutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFile_SMPTE_Time>())).mSeconds as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFile_SMPTE_Time),
            "::",
            stringify!(mSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFile_SMPTE_Time>())).mFrames as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFile_SMPTE_Time),
            "::",
            stringify!(mFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFile_SMPTE_Time>())).mSubFrameSampleOffset as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFile_SMPTE_Time),
            "::",
            stringify!(mSubFrameSampleOffset)
        )
    );
}
pub const kAudioFileMarkerType_Generic: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_237 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileMarker {
    pub mFramePosition: Float64,
    pub mName: CFStringRef,
    pub mMarkerID: SInt32,
    pub mSMPTETime: AudioFile_SMPTE_Time,
    pub mType: UInt32,
    pub mReserved: UInt16,
    pub mChannel: UInt16,
}
#[test]
fn bindgen_test_layout_AudioFileMarker() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileMarker>(),
        40usize,
        concat!("Size of: ", stringify!(AudioFileMarker))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileMarker>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFileMarker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mFramePosition as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mFramePosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mMarkerID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mMarkerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mSMPTETime as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mSMPTETime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mType as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mReserved as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mReserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarker>())).mChannel as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarker),
            "::",
            stringify!(mChannel)
        )
    );
}
impl Default for AudioFileMarker {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileMarkerList {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [AudioFileMarker; 1usize],
}
#[test]
fn bindgen_test_layout_AudioFileMarkerList() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileMarkerList>(),
        48usize,
        concat!("Size of: ", stringify!(AudioFileMarkerList))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileMarkerList>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFileMarkerList))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileMarkerList>())).mSMPTE_TimeType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarkerList),
            "::",
            stringify!(mSMPTE_TimeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileMarkerList>())).mNumberMarkers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarkerList),
            "::",
            stringify!(mNumberMarkers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileMarkerList>())).mMarkers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileMarkerList),
            "::",
            stringify!(mMarkers)
        )
    );
}
impl Default for AudioFileMarkerList {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioFileRegionFlags = UInt32;
pub const kAudioFileRegionFlag_LoopEnable: ::std::os::raw::c_uint = 1;
pub const kAudioFileRegionFlag_PlayForward: ::std::os::raw::c_uint = 2;
pub const kAudioFileRegionFlag_PlayBackward: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_238 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileRegion {
    pub mRegionID: UInt32,
    pub mName: CFStringRef,
    pub mFlags: AudioFileRegionFlags,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [AudioFileMarker; 1usize],
}
#[test]
fn bindgen_test_layout_AudioFileRegion() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileRegion>(),
        64usize,
        concat!("Size of: ", stringify!(AudioFileRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFileRegion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileRegion>())).mRegionID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegion),
            "::",
            stringify!(mRegionID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileRegion>())).mName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegion),
            "::",
            stringify!(mName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileRegion>())).mFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegion),
            "::",
            stringify!(mFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileRegion>())).mNumberMarkers as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegion),
            "::",
            stringify!(mNumberMarkers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileRegion>())).mMarkers as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegion),
            "::",
            stringify!(mMarkers)
        )
    );
}
impl Default for AudioFileRegion {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileRegionList {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberRegions: UInt32,
    pub mRegions: [AudioFileRegion; 1usize],
}
#[test]
fn bindgen_test_layout_AudioFileRegionList() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileRegionList>(),
        72usize,
        concat!("Size of: ", stringify!(AudioFileRegionList))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileRegionList>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFileRegionList))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileRegionList>())).mSMPTE_TimeType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegionList),
            "::",
            stringify!(mSMPTE_TimeType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileRegionList>())).mNumberRegions as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegionList),
            "::",
            stringify!(mNumberRegions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileRegionList>())).mRegions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileRegionList),
            "::",
            stringify!(mRegions)
        )
    );
}
impl Default for AudioFileRegionList {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioFramePacketTranslation {
    pub mFrame: SInt64,
    pub mPacket: SInt64,
    pub mFrameOffsetInPacket: UInt32,
}
#[test]
fn bindgen_test_layout_AudioFramePacketTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioFramePacketTranslation>(),
        24usize,
        concat!("Size of: ", stringify!(AudioFramePacketTranslation))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFramePacketTranslation>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFramePacketTranslation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFramePacketTranslation>())).mFrame as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFramePacketTranslation),
            "::",
            stringify!(mFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFramePacketTranslation>())).mPacket as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFramePacketTranslation),
            "::",
            stringify!(mPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFramePacketTranslation>())).mFrameOffsetInPacket as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFramePacketTranslation),
            "::",
            stringify!(mFrameOffsetInPacket)
        )
    );
}
pub type AudioBytePacketTranslationFlags = UInt32;
pub const kBytePacketTranslationFlag_IsEstimate: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_239 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioBytePacketTranslation {
    pub mByte: SInt64,
    pub mPacket: SInt64,
    pub mByteOffsetInPacket: UInt32,
    pub mFlags: AudioBytePacketTranslationFlags,
}
#[test]
fn bindgen_test_layout_AudioBytePacketTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioBytePacketTranslation>(),
        24usize,
        concat!("Size of: ", stringify!(AudioBytePacketTranslation))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioBytePacketTranslation>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioBytePacketTranslation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioBytePacketTranslation>())).mByte as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBytePacketTranslation),
            "::",
            stringify!(mByte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioBytePacketTranslation>())).mPacket as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBytePacketTranslation),
            "::",
            stringify!(mPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioBytePacketTranslation>())).mByteOffsetInPacket as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBytePacketTranslation),
            "::",
            stringify!(mByteOffsetInPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioBytePacketTranslation>())).mFlags as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBytePacketTranslation),
            "::",
            stringify!(mFlags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioFilePacketTableInfo {
    pub mNumberValidFrames: SInt64,
    pub mPrimingFrames: SInt32,
    pub mRemainderFrames: SInt32,
}
#[test]
fn bindgen_test_layout_AudioFilePacketTableInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioFilePacketTableInfo>(),
        16usize,
        concat!("Size of: ", stringify!(AudioFilePacketTableInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFilePacketTableInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFilePacketTableInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFilePacketTableInfo>())).mNumberValidFrames as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFilePacketTableInfo),
            "::",
            stringify!(mNumberValidFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFilePacketTableInfo>())).mPrimingFrames as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFilePacketTableInfo),
            "::",
            stringify!(mPrimingFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFilePacketTableInfo>())).mRemainderFrames as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFilePacketTableInfo),
            "::",
            stringify!(mRemainderFrames)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioPacketRangeByteCountTranslation {
    pub mPacket: SInt64,
    pub mPacketCount: SInt64,
    pub mByteCountUpperBound: SInt64,
}
#[test]
fn bindgen_test_layout_AudioPacketRangeByteCountTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioPacketRangeByteCountTranslation>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(AudioPacketRangeByteCountTranslation)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioPacketRangeByteCountTranslation>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioPacketRangeByteCountTranslation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketRangeByteCountTranslation>())).mPacket as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketRangeByteCountTranslation),
            "::",
            stringify!(mPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketRangeByteCountTranslation>())).mPacketCount
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketRangeByteCountTranslation),
            "::",
            stringify!(mPacketCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketRangeByteCountTranslation>())).mByteCountUpperBound
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketRangeByteCountTranslation),
            "::",
            stringify!(mByteCountUpperBound)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioPacketRollDistanceTranslation {
    pub mPacket: SInt64,
    pub mRollDistance: SInt64,
}
#[test]
fn bindgen_test_layout_AudioPacketRollDistanceTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioPacketRollDistanceTranslation>(),
        16usize,
        concat!("Size of: ", stringify!(AudioPacketRollDistanceTranslation))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioPacketRollDistanceTranslation>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioPacketRollDistanceTranslation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketRollDistanceTranslation>())).mPacket as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketRollDistanceTranslation),
            "::",
            stringify!(mPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketRollDistanceTranslation>())).mRollDistance as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketRollDistanceTranslation),
            "::",
            stringify!(mRollDistance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioIndependentPacketTranslation {
    pub mPacket: SInt64,
    pub mIndependentlyDecodablePacket: SInt64,
}
#[test]
fn bindgen_test_layout_AudioIndependentPacketTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioIndependentPacketTranslation>(),
        16usize,
        concat!("Size of: ", stringify!(AudioIndependentPacketTranslation))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioIndependentPacketTranslation>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioIndependentPacketTranslation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioIndependentPacketTranslation>())).mPacket as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioIndependentPacketTranslation),
            "::",
            stringify!(mPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioIndependentPacketTranslation>()))
                .mIndependentlyDecodablePacket as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioIndependentPacketTranslation),
            "::",
            stringify!(mIndependentlyDecodablePacket)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioPacketDependencyInfoTranslation {
    pub mPacket: SInt64,
    pub mIsIndependentlyDecodable: UInt32,
    pub mNumberPrerollPackets: UInt32,
}
#[test]
fn bindgen_test_layout_AudioPacketDependencyInfoTranslation() {
    assert_eq!(
        ::std::mem::size_of::<AudioPacketDependencyInfoTranslation>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(AudioPacketDependencyInfoTranslation)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioPacketDependencyInfoTranslation>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(AudioPacketDependencyInfoTranslation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketDependencyInfoTranslation>())).mPacket as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketDependencyInfoTranslation),
            "::",
            stringify!(mPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketDependencyInfoTranslation>()))
                .mIsIndependentlyDecodable as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketDependencyInfoTranslation),
            "::",
            stringify!(mIsIndependentlyDecodable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPacketDependencyInfoTranslation>())).mNumberPrerollPackets
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPacketDependencyInfoTranslation),
            "::",
            stringify!(mNumberPrerollPackets)
        )
    );
}
extern "C" {
    pub fn AudioFileCreateWithURL(
        inFileRef: CFURLRef,
        inFileType: AudioFileTypeID,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: AudioFileFlags,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOpenURL(
        inFileRef: CFURLRef,
        inPermissions: AudioFilePermissions,
        inFileTypeHint: AudioFileTypeID,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
pub type AudioFile_ReadProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inPosition: SInt64,
        requestCount: UInt32,
        buffer: *mut ::std::os::raw::c_void,
        actualCount: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFile_WriteProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inPosition: SInt64,
        requestCount: UInt32,
        buffer: *const ::std::os::raw::c_void,
        actualCount: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFile_GetSizeProc = ::std::option::Option<
    unsafe extern "C" fn(inClientData: *mut ::std::os::raw::c_void) -> SInt64,
>;
pub type AudioFile_SetSizeProc = ::std::option::Option<
    unsafe extern "C" fn(inClientData: *mut ::std::os::raw::c_void, inSize: SInt64) -> OSStatus,
>;
extern "C" {
    pub fn AudioFileInitializeWithCallbacks(
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        inFileType: AudioFileTypeID,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: AudioFileFlags,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOpenWithCallbacks(
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        inFileTypeHint: AudioFileTypeID,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileClose(inAudioFile: AudioFileID) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOptimize(inAudioFile: AudioFileID) -> OSStatus;
}
extern "C" {
    pub fn AudioFileReadBytes(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileWriteBytes(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileReadPacketData(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        ioNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileReadPackets(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        outNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileWritePackets(
        inAudioFile: AudioFileID,
        inUseCache: Boolean,
        inNumBytes: UInt32,
        inPacketDescriptions: *const AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileCountUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        outNumberItems: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetUserDataSize(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
        outUserDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
        ioUserDataSize: *mut UInt32,
        outUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileSetUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
        inUserDataSize: UInt32,
        inUserData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileRemoveUserData(
        inAudioFile: AudioFileID,
        inUserDataID: UInt32,
        inIndex: UInt32,
    ) -> OSStatus;
}
pub const kAudioFilePropertyFileFormat: ::std::os::raw::c_uint = 1717988724;
pub const kAudioFilePropertyDataFormat: ::std::os::raw::c_uint = 1684434292;
pub const kAudioFilePropertyIsOptimized: ::std::os::raw::c_uint = 1869640813;
pub const kAudioFilePropertyMagicCookieData: ::std::os::raw::c_uint = 1835493731;
pub const kAudioFilePropertyAudioDataByteCount: ::std::os::raw::c_uint = 1650683508;
pub const kAudioFilePropertyAudioDataPacketCount: ::std::os::raw::c_uint = 1885564532;
pub const kAudioFilePropertyMaximumPacketSize: ::std::os::raw::c_uint = 1886616165;
pub const kAudioFilePropertyDataOffset: ::std::os::raw::c_uint = 1685022310;
pub const kAudioFilePropertyChannelLayout: ::std::os::raw::c_uint = 1668112752;
pub const kAudioFilePropertyDeferSizeUpdates: ::std::os::raw::c_uint = 1685289589;
pub const kAudioFilePropertyDataFormatName: ::std::os::raw::c_uint = 1718512997;
pub const kAudioFilePropertyMarkerList: ::std::os::raw::c_uint = 1835756659;
pub const kAudioFilePropertyRegionList: ::std::os::raw::c_uint = 1919380595;
pub const kAudioFilePropertyPacketToFrame: ::std::os::raw::c_uint = 1886086770;
pub const kAudioFilePropertyFrameToPacket: ::std::os::raw::c_uint = 1718775915;
pub const kAudioFilePropertyRestrictsRandomAccess: ::std::os::raw::c_uint = 1920098672;
pub const kAudioFilePropertyPacketToRollDistance: ::std::os::raw::c_uint = 1886089836;
pub const kAudioFilePropertyPreviousIndependentPacket: ::std::os::raw::c_uint = 1885957732;
pub const kAudioFilePropertyNextIndependentPacket: ::std::os::raw::c_uint = 1852403300;
pub const kAudioFilePropertyPacketToDependencyInfo: ::std::os::raw::c_uint = 1886086256;
pub const kAudioFilePropertyPacketToByte: ::std::os::raw::c_uint = 1886085753;
pub const kAudioFilePropertyByteToPacket: ::std::os::raw::c_uint = 1652125803;
pub const kAudioFilePropertyChunkIDs: ::std::os::raw::c_uint = 1667787108;
pub const kAudioFilePropertyInfoDictionary: ::std::os::raw::c_uint = 1768842863;
pub const kAudioFilePropertyPacketTableInfo: ::std::os::raw::c_uint = 1886283375;
pub const kAudioFilePropertyFormatList: ::std::os::raw::c_uint = 1718383476;
pub const kAudioFilePropertyPacketSizeUpperBound: ::std::os::raw::c_uint = 1886090594;
pub const kAudioFilePropertyPacketRangeByteCountUpperBound: ::std::os::raw::c_uint = 1886549346;
pub const kAudioFilePropertyReserveDuration: ::std::os::raw::c_uint = 1920168566;
pub const kAudioFilePropertyEstimatedDuration: ::std::os::raw::c_uint = 1701082482;
pub const kAudioFilePropertyBitRate: ::std::os::raw::c_uint = 1651663220;
pub const kAudioFilePropertyID3Tag: ::std::os::raw::c_uint = 1768174452;
pub const kAudioFilePropertyID3TagOffset: ::std::os::raw::c_uint = 1768174447;
pub const kAudioFilePropertySourceBitDepth: ::std::os::raw::c_uint = 1935832164;
pub const kAudioFilePropertyAlbumArtwork: ::std::os::raw::c_uint = 1633776244;
pub const kAudioFilePropertyAudioTrackCount: ::std::os::raw::c_uint = 1635017588;
pub const kAudioFilePropertyUseAudioTrack: ::std::os::raw::c_uint = 1969321067;
pub type _bindgen_ty_240 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioFileGetPropertyInfo(
        inAudioFile: AudioFileID,
        inPropertyID: AudioFilePropertyID,
        outDataSize: *mut UInt32,
        isWritable: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetProperty(
        inAudioFile: AudioFileID,
        inPropertyID: AudioFilePropertyID,
        ioDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileSetProperty(
        inAudioFile: AudioFileID,
        inPropertyID: AudioFilePropertyID,
        inDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioFileGlobalInfo_ReadableTypes: ::std::os::raw::c_uint = 1634103910;
pub const kAudioFileGlobalInfo_WritableTypes: ::std::os::raw::c_uint = 1634105190;
pub const kAudioFileGlobalInfo_FileTypeName: ::std::os::raw::c_uint = 1718906477;
pub const kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat: ::std::os::raw::c_uint =
    1935960420;
pub const kAudioFileGlobalInfo_AvailableFormatIDs: ::std::os::raw::c_uint = 1718446436;
pub const kAudioFileGlobalInfo_AllExtensions: ::std::os::raw::c_uint = 1634498676;
pub const kAudioFileGlobalInfo_AllHFSTypeCodes: ::std::os::raw::c_uint = 1634231923;
pub const kAudioFileGlobalInfo_AllUTIs: ::std::os::raw::c_uint = 1635087465;
pub const kAudioFileGlobalInfo_AllMIMETypes: ::std::os::raw::c_uint = 1634560365;
pub const kAudioFileGlobalInfo_ExtensionsForType: ::std::os::raw::c_uint = 1717926004;
pub const kAudioFileGlobalInfo_HFSTypeCodesForType: ::std::os::raw::c_uint = 1718118003;
pub const kAudioFileGlobalInfo_UTIsForType: ::std::os::raw::c_uint = 1718973545;
pub const kAudioFileGlobalInfo_MIMETypesForType: ::std::os::raw::c_uint = 1718446445;
pub const kAudioFileGlobalInfo_TypesForMIMEType: ::std::os::raw::c_uint = 1953327469;
pub const kAudioFileGlobalInfo_TypesForUTI: ::std::os::raw::c_uint = 1953854569;
pub const kAudioFileGlobalInfo_TypesForHFSTypeCode: ::std::os::raw::c_uint = 1952999027;
pub const kAudioFileGlobalInfo_TypesForExtension: ::std::os::raw::c_uint = 1952807028;
pub type _bindgen_ty_241 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioFileTypeAndFormatID {
    pub mFileType: AudioFileTypeID,
    pub mFormatID: UInt32,
}
#[test]
fn bindgen_test_layout_AudioFileTypeAndFormatID() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileTypeAndFormatID>(),
        8usize,
        concat!("Size of: ", stringify!(AudioFileTypeAndFormatID))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileTypeAndFormatID>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioFileTypeAndFormatID))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileTypeAndFormatID>())).mFileType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileTypeAndFormatID),
            "::",
            stringify!(mFileType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileTypeAndFormatID>())).mFormatID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileTypeAndFormatID),
            "::",
            stringify!(mFormatID)
        )
    );
}
extern "C" {
    pub fn AudioFileGetGlobalInfoSize(
        inPropertyID: AudioFilePropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *mut ::std::os::raw::c_void,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileGetGlobalInfo(
        inPropertyID: AudioFilePropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileCreate(
        inParentRef: *const FSRef,
        inFileName: CFStringRef,
        inFileType: AudioFileTypeID,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: AudioFileFlags,
        outNewFileRef: *mut FSRef,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileInitialize(
        inFileRef: *const FSRef,
        inFileType: AudioFileTypeID,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: AudioFileFlags,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileOpen(
        inFileRef: *const FSRef,
        inPermissions: AudioFilePermissions,
        inFileTypeHint: AudioFileTypeID,
        outAudioFile: *mut AudioFileID,
    ) -> OSStatus;
}
pub type AudioFileStreamPropertyFlags = UInt32;
pub const kAudioFileStreamPropertyFlag_PropertyIsCached: ::std::os::raw::c_uint = 1;
pub const kAudioFileStreamPropertyFlag_CacheProperty: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_242 = ::std::os::raw::c_uint;
pub type AudioFileStreamParseFlags = UInt32;
pub const kAudioFileStreamParseFlag_Discontinuity: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_243 = ::std::os::raw::c_uint;
pub type AudioFileStreamSeekFlags = UInt32;
pub const kAudioFileStreamSeekFlag_OffsetIsEstimated: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_244 = ::std::os::raw::c_uint;
pub type AudioFileStreamPropertyID = UInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioFileStreamID {
    _unused: [u8; 0],
}
pub type AudioFileStreamID = *mut OpaqueAudioFileStreamID;
pub type AudioFileStream_PropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        ioFlags: *mut AudioFileStreamPropertyFlags,
    ),
>;
pub type AudioFileStream_PacketsProc = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inNumberBytes: UInt32,
        inNumberPackets: UInt32,
        inInputData: *const ::std::os::raw::c_void,
        inPacketDescriptions: *mut AudioStreamPacketDescription,
    ),
>;
pub const kAudioFileStreamError_UnsupportedFileType: ::std::os::raw::c_uint = 1954115647;
pub const kAudioFileStreamError_UnsupportedDataFormat: ::std::os::raw::c_uint = 1718449215;
pub const kAudioFileStreamError_UnsupportedProperty: ::std::os::raw::c_uint = 1886681407;
pub const kAudioFileStreamError_BadPropertySize: ::std::os::raw::c_uint = 561211770;
pub const kAudioFileStreamError_NotOptimized: ::std::os::raw::c_uint = 1869640813;
pub const kAudioFileStreamError_InvalidPacketOffset: ::std::os::raw::c_uint = 1885563711;
pub const kAudioFileStreamError_InvalidFile: ::std::os::raw::c_uint = 1685348671;
pub const kAudioFileStreamError_ValueUnknown: ::std::os::raw::c_uint = 1970170687;
pub const kAudioFileStreamError_DataUnavailable: ::std::os::raw::c_uint = 1836020325;
pub const kAudioFileStreamError_IllegalOperation: ::std::os::raw::c_uint = 1852797029;
pub const kAudioFileStreamError_UnspecifiedError: ::std::os::raw::c_uint = 2003334207;
pub const kAudioFileStreamError_DiscontinuityCantRecover: ::std::os::raw::c_uint = 1685283617;
pub type _bindgen_ty_245 = ::std::os::raw::c_uint;
pub const kAudioFileStreamProperty_ReadyToProducePackets: ::std::os::raw::c_uint = 1919247481;
pub const kAudioFileStreamProperty_FileFormat: ::std::os::raw::c_uint = 1717988724;
pub const kAudioFileStreamProperty_DataFormat: ::std::os::raw::c_uint = 1684434292;
pub const kAudioFileStreamProperty_FormatList: ::std::os::raw::c_uint = 1718383476;
pub const kAudioFileStreamProperty_MagicCookieData: ::std::os::raw::c_uint = 1835493731;
pub const kAudioFileStreamProperty_AudioDataByteCount: ::std::os::raw::c_uint = 1650683508;
pub const kAudioFileStreamProperty_AudioDataPacketCount: ::std::os::raw::c_uint = 1885564532;
pub const kAudioFileStreamProperty_MaximumPacketSize: ::std::os::raw::c_uint = 1886616165;
pub const kAudioFileStreamProperty_DataOffset: ::std::os::raw::c_uint = 1685022310;
pub const kAudioFileStreamProperty_ChannelLayout: ::std::os::raw::c_uint = 1668112752;
pub const kAudioFileStreamProperty_PacketToFrame: ::std::os::raw::c_uint = 1886086770;
pub const kAudioFileStreamProperty_FrameToPacket: ::std::os::raw::c_uint = 1718775915;
pub const kAudioFileStreamProperty_RestrictsRandomAccess: ::std::os::raw::c_uint = 1920098672;
pub const kAudioFileStreamProperty_PacketToRollDistance: ::std::os::raw::c_uint = 1886089836;
pub const kAudioFileStreamProperty_PreviousIndependentPacket: ::std::os::raw::c_uint = 1885957732;
pub const kAudioFileStreamProperty_NextIndependentPacket: ::std::os::raw::c_uint = 1852403300;
pub const kAudioFileStreamProperty_PacketToDependencyInfo: ::std::os::raw::c_uint = 1886086256;
pub const kAudioFileStreamProperty_PacketToByte: ::std::os::raw::c_uint = 1886085753;
pub const kAudioFileStreamProperty_ByteToPacket: ::std::os::raw::c_uint = 1652125803;
pub const kAudioFileStreamProperty_PacketTableInfo: ::std::os::raw::c_uint = 1886283375;
pub const kAudioFileStreamProperty_PacketSizeUpperBound: ::std::os::raw::c_uint = 1886090594;
pub const kAudioFileStreamProperty_AverageBytesPerPacket: ::std::os::raw::c_uint = 1633841264;
pub const kAudioFileStreamProperty_BitRate: ::std::os::raw::c_uint = 1651663220;
pub const kAudioFileStreamProperty_InfoDictionary: ::std::os::raw::c_uint = 1768842863;
pub type _bindgen_ty_246 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioFileStreamOpen(
        inClientData: *mut ::std::os::raw::c_void,
        inPropertyListenerProc: AudioFileStream_PropertyListenerProc,
        inPacketsProc: AudioFileStream_PacketsProc,
        inFileTypeHint: AudioFileTypeID,
        outAudioFileStream: *mut AudioFileStreamID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamParseBytes(
        inAudioFileStream: AudioFileStreamID,
        inDataByteSize: UInt32,
        inData: *const ::std::os::raw::c_void,
        inFlags: AudioFileStreamParseFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamSeek(
        inAudioFileStream: AudioFileStreamID,
        inPacketOffset: SInt64,
        outDataByteOffset: *mut SInt64,
        ioFlags: *mut AudioFileStreamSeekFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamGetPropertyInfo(
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        outPropertyDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamGetProperty(
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamSetProperty(
        inAudioFileStream: AudioFileStreamID,
        inPropertyID: AudioFileStreamPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileStreamClose(inAudioFileStream: AudioFileStreamID) -> OSStatus;
}
pub type AudioFormatPropertyID = UInt32;
pub type AudioPanningMode = UInt32;
pub const kPanningMode_SoundField: ::std::os::raw::c_uint = 3;
pub const kPanningMode_VectorBasedPanning: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_247 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioPanningInfo {
    pub mPanningMode: AudioPanningMode,
    pub mCoordinateFlags: UInt32,
    pub mCoordinates: [Float32; 3usize],
    pub mGainScale: Float32,
    pub mOutputChannelMap: *const AudioChannelLayout,
}
#[test]
fn bindgen_test_layout_AudioPanningInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioPanningInfo>(),
        32usize,
        concat!("Size of: ", stringify!(AudioPanningInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioPanningInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioPanningInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioPanningInfo>())).mPanningMode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPanningInfo),
            "::",
            stringify!(mPanningMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPanningInfo>())).mCoordinateFlags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPanningInfo),
            "::",
            stringify!(mCoordinateFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioPanningInfo>())).mCoordinates as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPanningInfo),
            "::",
            stringify!(mCoordinates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioPanningInfo>())).mGainScale as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPanningInfo),
            "::",
            stringify!(mGainScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioPanningInfo>())).mOutputChannelMap as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioPanningInfo),
            "::",
            stringify!(mOutputChannelMap)
        )
    );
}
impl Default for AudioPanningInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioBalanceFadeType = UInt32;
pub const kAudioBalanceFadeType_MaxUnityGain: ::std::os::raw::c_uint = 0;
pub const kAudioBalanceFadeType_EqualPower: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_248 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioBalanceFade {
    pub mLeftRightBalance: Float32,
    pub mBackFrontFade: Float32,
    pub mType: AudioBalanceFadeType,
    pub mChannelLayout: *const AudioChannelLayout,
}
#[test]
fn bindgen_test_layout_AudioBalanceFade() {
    assert_eq!(
        ::std::mem::size_of::<AudioBalanceFade>(),
        24usize,
        concat!("Size of: ", stringify!(AudioBalanceFade))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioBalanceFade>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioBalanceFade))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioBalanceFade>())).mLeftRightBalance as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBalanceFade),
            "::",
            stringify!(mLeftRightBalance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBalanceFade>())).mBackFrontFade as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBalanceFade),
            "::",
            stringify!(mBackFrontFade)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBalanceFade>())).mType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBalanceFade),
            "::",
            stringify!(mType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioBalanceFade>())).mChannelLayout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioBalanceFade),
            "::",
            stringify!(mChannelLayout)
        )
    );
}
impl Default for AudioBalanceFade {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFormatInfo {
    pub mASBD: AudioStreamBasicDescription,
    pub mMagicCookie: *const ::std::os::raw::c_void,
    pub mMagicCookieSize: UInt32,
}
#[test]
fn bindgen_test_layout_AudioFormatInfo() {
    assert_eq!(
        ::std::mem::size_of::<AudioFormatInfo>(),
        56usize,
        concat!("Size of: ", stringify!(AudioFormatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFormatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFormatInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFormatInfo>())).mASBD as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFormatInfo),
            "::",
            stringify!(mASBD)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFormatInfo>())).mMagicCookie as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFormatInfo),
            "::",
            stringify!(mMagicCookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFormatInfo>())).mMagicCookieSize as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFormatInfo),
            "::",
            stringify!(mMagicCookieSize)
        )
    );
}
impl Default for AudioFormatInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtendedAudioFormatInfo {
    pub mASBD: AudioStreamBasicDescription,
    pub mMagicCookie: *const ::std::os::raw::c_void,
    pub mMagicCookieSize: UInt32,
    pub mClassDescription: AudioClassDescription,
}
#[test]
fn bindgen_test_layout_ExtendedAudioFormatInfo() {
    assert_eq!(
        ::std::mem::size_of::<ExtendedAudioFormatInfo>(),
        64usize,
        concat!("Size of: ", stringify!(ExtendedAudioFormatInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ExtendedAudioFormatInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ExtendedAudioFormatInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedAudioFormatInfo>())).mASBD as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedAudioFormatInfo),
            "::",
            stringify!(mASBD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExtendedAudioFormatInfo>())).mMagicCookie as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedAudioFormatInfo),
            "::",
            stringify!(mMagicCookie)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExtendedAudioFormatInfo>())).mMagicCookieSize as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedAudioFormatInfo),
            "::",
            stringify!(mMagicCookieSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExtendedAudioFormatInfo>())).mClassDescription as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedAudioFormatInfo),
            "::",
            stringify!(mClassDescription)
        )
    );
}
impl Default for ExtendedAudioFormatInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAudioFormatProperty_FormatInfo: ::std::os::raw::c_uint = 1718449257;
pub const kAudioFormatProperty_FormatName: ::std::os::raw::c_uint = 1718509933;
pub const kAudioFormatProperty_EncodeFormatIDs: ::std::os::raw::c_uint = 1633906534;
pub const kAudioFormatProperty_DecodeFormatIDs: ::std::os::raw::c_uint = 1633904998;
pub const kAudioFormatProperty_FormatList: ::std::os::raw::c_uint = 1718383476;
pub const kAudioFormatProperty_ASBDFromESDS: ::std::os::raw::c_uint = 1702064996;
pub const kAudioFormatProperty_ChannelLayoutFromESDS: ::std::os::raw::c_uint = 1702060908;
pub const kAudioFormatProperty_OutputFormatList: ::std::os::raw::c_uint = 1868983411;
pub const kAudioFormatProperty_FirstPlayableFormatFromList: ::std::os::raw::c_uint = 1718642284;
pub const kAudioFormatProperty_FormatIsVBR: ::std::os::raw::c_uint = 1719034482;
pub const kAudioFormatProperty_FormatIsExternallyFramed: ::std::os::raw::c_uint = 1717925990;
pub const kAudioFormatProperty_FormatEmploysDependentPackets: ::std::os::raw::c_uint = 1717855600;
pub const kAudioFormatProperty_FormatIsEncrypted: ::std::os::raw::c_uint = 1668446576;
pub const kAudioFormatProperty_Encoders: ::std::os::raw::c_uint = 1635149166;
pub const kAudioFormatProperty_Decoders: ::std::os::raw::c_uint = 1635148901;
pub const kAudioFormatProperty_AvailableEncodeBitRates: ::std::os::raw::c_uint = 1634034290;
pub const kAudioFormatProperty_AvailableEncodeSampleRates: ::std::os::raw::c_uint = 1634038642;
pub const kAudioFormatProperty_AvailableEncodeChannelLayoutTags: ::std::os::raw::c_uint =
    1634034540;
pub const kAudioFormatProperty_AvailableEncodeNumberChannels: ::std::os::raw::c_uint = 1635151459;
pub const kAudioFormatProperty_AvailableDecodeNumberChannels: ::std::os::raw::c_uint = 1633971811;
pub const kAudioFormatProperty_ASBDFromMPEGPacket: ::std::os::raw::c_uint = 1633971568;
pub const kAudioFormatProperty_BitmapForLayoutTag: ::std::os::raw::c_uint = 1651340391;
pub const kAudioFormatProperty_MatrixMixMap: ::std::os::raw::c_uint = 1835884912;
pub const kAudioFormatProperty_ChannelMap: ::std::os::raw::c_uint = 1667788144;
pub const kAudioFormatProperty_NumberOfChannelsForLayout: ::std::os::raw::c_uint = 1852008557;
pub const kAudioFormatProperty_AreChannelLayoutsEquivalent: ::std::os::raw::c_uint = 1667786097;
pub const kAudioFormatProperty_ChannelLayoutHash: ::std::os::raw::c_uint = 1667786849;
pub const kAudioFormatProperty_ValidateChannelLayout: ::std::os::raw::c_uint = 1986093932;
pub const kAudioFormatProperty_ChannelLayoutForTag: ::std::os::raw::c_uint = 1668116588;
pub const kAudioFormatProperty_TagForChannelLayout: ::std::os::raw::c_uint = 1668116596;
pub const kAudioFormatProperty_ChannelLayoutName: ::std::os::raw::c_uint = 1819242093;
pub const kAudioFormatProperty_ChannelLayoutSimpleName: ::std::os::raw::c_uint = 1819504237;
pub const kAudioFormatProperty_ChannelLayoutForBitmap: ::std::os::raw::c_uint = 1668116578;
pub const kAudioFormatProperty_ChannelName: ::std::os::raw::c_uint = 1668178285;
pub const kAudioFormatProperty_ChannelShortName: ::std::os::raw::c_uint = 1668509293;
pub const kAudioFormatProperty_TagsForNumberOfChannels: ::std::os::raw::c_uint = 1952540515;
pub const kAudioFormatProperty_PanningMatrix: ::std::os::raw::c_uint = 1885433453;
pub const kAudioFormatProperty_BalanceFade: ::std::os::raw::c_uint = 1650551910;
pub const kAudioFormatProperty_ID3TagSize: ::std::os::raw::c_uint = 1768174451;
pub const kAudioFormatProperty_ID3TagToDictionary: ::std::os::raw::c_uint = 1768174436;
pub type _bindgen_ty_249 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioFormatGetPropertyInfo(
        inPropertyID: AudioFormatPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        outPropertyDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFormatGetProperty(
        inPropertyID: AudioFormatPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioFormatUnspecifiedError: ::std::os::raw::c_uint = 2003329396;
pub const kAudioFormatUnsupportedPropertyError: ::std::os::raw::c_uint = 1886547824;
pub const kAudioFormatBadPropertySizeError: ::std::os::raw::c_uint = 561211770;
pub const kAudioFormatBadSpecifierSizeError: ::std::os::raw::c_uint = 561213539;
pub const kAudioFormatUnsupportedDataFormatError: ::std::os::raw::c_uint = 1718449215;
pub const kAudioFormatUnknownFormatError: ::std::os::raw::c_uint = 560360820;
pub type _bindgen_ty_250 = ::std::os::raw::c_uint;
pub type AudioQueuePropertyID = UInt32;
pub type AudioQueueParameterID = UInt32;
pub type AudioQueueParameterValue = Float32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioQueue {
    _unused: [u8; 0],
}
pub type AudioQueueRef = *mut OpaqueAudioQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioQueueTimeline {
    _unused: [u8; 0],
}
pub type AudioQueueTimelineRef = *mut OpaqueAudioQueueTimeline;
pub const kAudioQueueErr_InvalidBuffer: ::std::os::raw::c_int = -66687;
pub const kAudioQueueErr_BufferEmpty: ::std::os::raw::c_int = -66686;
pub const kAudioQueueErr_DisposalPending: ::std::os::raw::c_int = -66685;
pub const kAudioQueueErr_InvalidProperty: ::std::os::raw::c_int = -66684;
pub const kAudioQueueErr_InvalidPropertySize: ::std::os::raw::c_int = -66683;
pub const kAudioQueueErr_InvalidParameter: ::std::os::raw::c_int = -66682;
pub const kAudioQueueErr_CannotStart: ::std::os::raw::c_int = -66681;
pub const kAudioQueueErr_InvalidDevice: ::std::os::raw::c_int = -66680;
pub const kAudioQueueErr_BufferInQueue: ::std::os::raw::c_int = -66679;
pub const kAudioQueueErr_InvalidRunState: ::std::os::raw::c_int = -66678;
pub const kAudioQueueErr_InvalidQueueType: ::std::os::raw::c_int = -66677;
pub const kAudioQueueErr_Permissions: ::std::os::raw::c_int = -66676;
pub const kAudioQueueErr_InvalidPropertyValue: ::std::os::raw::c_int = -66675;
pub const kAudioQueueErr_PrimeTimedOut: ::std::os::raw::c_int = -66674;
pub const kAudioQueueErr_CodecNotFound: ::std::os::raw::c_int = -66673;
pub const kAudioQueueErr_InvalidCodecAccess: ::std::os::raw::c_int = -66672;
pub const kAudioQueueErr_QueueInvalidated: ::std::os::raw::c_int = -66671;
pub const kAudioQueueErr_TooManyTaps: ::std::os::raw::c_int = -66670;
pub const kAudioQueueErr_InvalidTapContext: ::std::os::raw::c_int = -66669;
pub const kAudioQueueErr_RecordUnderrun: ::std::os::raw::c_int = -66668;
pub const kAudioQueueErr_InvalidTapType: ::std::os::raw::c_int = -66667;
pub const kAudioQueueErr_BufferEnqueuedTwice: ::std::os::raw::c_int = -66666;
pub const kAudioQueueErr_CannotStartYet: ::std::os::raw::c_int = -66665;
pub const kAudioQueueErr_EnqueueDuringReset: ::std::os::raw::c_int = -66632;
pub const kAudioQueueErr_InvalidOfflineMode: ::std::os::raw::c_int = -66626;
pub type _bindgen_ty_251 = ::std::os::raw::c_int;
pub const kAudioQueueProperty_IsRunning: ::std::os::raw::c_uint = 1634824814;
pub const kAudioQueueDeviceProperty_SampleRate: ::std::os::raw::c_uint = 1634825074;
pub const kAudioQueueDeviceProperty_NumberChannels: ::std::os::raw::c_uint = 1634821219;
pub const kAudioQueueProperty_CurrentDevice: ::std::os::raw::c_uint = 1634820964;
pub const kAudioQueueProperty_MagicCookie: ::std::os::raw::c_uint = 1634823523;
pub const kAudioQueueProperty_MaximumOutputPacketSize: ::std::os::raw::c_uint = 2020569203;
pub const kAudioQueueProperty_StreamDescription: ::std::os::raw::c_uint = 1634821748;
pub const kAudioQueueProperty_ChannelLayout: ::std::os::raw::c_uint = 1634820972;
pub const kAudioQueueProperty_EnableLevelMetering: ::std::os::raw::c_uint = 1634823525;
pub const kAudioQueueProperty_CurrentLevelMeter: ::std::os::raw::c_uint = 1634823542;
pub const kAudioQueueProperty_CurrentLevelMeterDB: ::std::os::raw::c_uint = 1634823524;
pub const kAudioQueueProperty_DecodeBufferSizeFrames: ::std::os::raw::c_uint = 1684234854;
pub const kAudioQueueProperty_ConverterError: ::std::os::raw::c_uint = 1902343781;
pub const kAudioQueueProperty_EnableTimePitch: ::std::os::raw::c_uint = 1902081136;
pub const kAudioQueueProperty_TimePitchAlgorithm: ::std::os::raw::c_uint = 1903456353;
pub const kAudioQueueProperty_TimePitchBypass: ::std::os::raw::c_uint = 1903456354;
pub type _bindgen_ty_252 = ::std::os::raw::c_uint;
pub const kAudioQueueTimePitchAlgorithm_Spectral: ::std::os::raw::c_uint = 1936745827;
pub const kAudioQueueTimePitchAlgorithm_TimeDomain: ::std::os::raw::c_uint = 1953064047;
pub const kAudioQueueTimePitchAlgorithm_Varispeed: ::std::os::raw::c_uint = 1987276900;
pub type _bindgen_ty_253 = ::std::os::raw::c_uint;
pub const kAudioQueueProperty_ChannelAssignments: ::std::os::raw::c_uint = 1634820961;
pub type _bindgen_ty_254 = ::std::os::raw::c_uint;
pub const kAudioQueueParam_Volume: ::std::os::raw::c_uint = 1;
pub const kAudioQueueParam_PlayRate: ::std::os::raw::c_uint = 2;
pub const kAudioQueueParam_Pitch: ::std::os::raw::c_uint = 3;
pub const kAudioQueueParam_VolumeRampTime: ::std::os::raw::c_uint = 4;
pub const kAudioQueueParam_Pan: ::std::os::raw::c_uint = 13;
pub type _bindgen_ty_255 = ::std::os::raw::c_uint;
pub type AudioQueueProcessingTapFlags = UInt32;
pub const kAudioQueueProcessingTap_PreEffects: ::std::os::raw::c_uint = 1;
pub const kAudioQueueProcessingTap_PostEffects: ::std::os::raw::c_uint = 2;
pub const kAudioQueueProcessingTap_Siphon: ::std::os::raw::c_uint = 4;
pub const kAudioQueueProcessingTap_StartOfStream: ::std::os::raw::c_uint = 256;
pub const kAudioQueueProcessingTap_EndOfStream: ::std::os::raw::c_uint = 512;
pub type _bindgen_ty_256 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioQueueBuffer {
    pub mAudioDataBytesCapacity: UInt32,
    pub mAudioData: *mut ::std::os::raw::c_void,
    pub mAudioDataByteSize: UInt32,
    pub mUserData: *mut ::std::os::raw::c_void,
    pub mPacketDescriptionCapacity: UInt32,
    pub mPacketDescriptions: *mut AudioStreamPacketDescription,
    pub mPacketDescriptionCount: UInt32,
}
#[test]
fn bindgen_test_layout_AudioQueueBuffer() {
    assert_eq!(
        ::std::mem::size_of::<AudioQueueBuffer>(),
        56usize,
        concat!("Size of: ", stringify!(AudioQueueBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioQueueBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioQueueBuffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueBuffer>())).mAudioDataBytesCapacity as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mAudioDataBytesCapacity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioQueueBuffer>())).mAudioData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mAudioData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueBuffer>())).mAudioDataByteSize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mAudioDataByteSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioQueueBuffer>())).mUserData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mUserData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueBuffer>())).mPacketDescriptionCapacity as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mPacketDescriptionCapacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueBuffer>())).mPacketDescriptions as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mPacketDescriptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueBuffer>())).mPacketDescriptionCount as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueBuffer),
            "::",
            stringify!(mPacketDescriptionCount)
        )
    );
}
impl Default for AudioQueueBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioQueueBufferRef = *mut AudioQueueBuffer;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioQueueParameterEvent {
    pub mID: AudioQueueParameterID,
    pub mValue: AudioQueueParameterValue,
}
#[test]
fn bindgen_test_layout_AudioQueueParameterEvent() {
    assert_eq!(
        ::std::mem::size_of::<AudioQueueParameterEvent>(),
        8usize,
        concat!("Size of: ", stringify!(AudioQueueParameterEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioQueueParameterEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioQueueParameterEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioQueueParameterEvent>())).mID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueParameterEvent),
            "::",
            stringify!(mID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioQueueParameterEvent>())).mValue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueParameterEvent),
            "::",
            stringify!(mValue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioQueueLevelMeterState {
    pub mAveragePower: Float32,
    pub mPeakPower: Float32,
}
#[test]
fn bindgen_test_layout_AudioQueueLevelMeterState() {
    assert_eq!(
        ::std::mem::size_of::<AudioQueueLevelMeterState>(),
        8usize,
        concat!("Size of: ", stringify!(AudioQueueLevelMeterState))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioQueueLevelMeterState>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioQueueLevelMeterState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueLevelMeterState>())).mAveragePower as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueLevelMeterState),
            "::",
            stringify!(mAveragePower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueLevelMeterState>())).mPeakPower as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueLevelMeterState),
            "::",
            stringify!(mPeakPower)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAudioQueueProcessingTap {
    _unused: [u8; 0],
}
pub type AudioQueueProcessingTapRef = *mut OpaqueAudioQueueProcessingTap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioQueueChannelAssignment {
    pub mDeviceUID: CFStringRef,
    pub mChannelNumber: UInt32,
}
#[test]
fn bindgen_test_layout_AudioQueueChannelAssignment() {
    assert_eq!(
        ::std::mem::size_of::<AudioQueueChannelAssignment>(),
        16usize,
        concat!("Size of: ", stringify!(AudioQueueChannelAssignment))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioQueueChannelAssignment>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioQueueChannelAssignment))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueChannelAssignment>())).mDeviceUID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueChannelAssignment),
            "::",
            stringify!(mDeviceUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioQueueChannelAssignment>())).mChannelNumber as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioQueueChannelAssignment),
            "::",
            stringify!(mChannelNumber)
        )
    );
}
impl Default for AudioQueueChannelAssignment {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AudioQueueOutputCallbackBlock = *mut ::std::os::raw::c_void;
pub type AudioQueueInputCallbackBlock = *mut ::std::os::raw::c_void;
pub type AudioQueueOutputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
    ),
>;
pub type AudioQueueInputCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
        inStartTime: *const AudioTimeStamp,
        inNumberPacketDescriptions: UInt32,
        inPacketDescs: *const AudioStreamPacketDescription,
    ),
>;
pub type AudioQueuePropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
    ),
>;
pub type AudioQueueProcessingTapCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inAQTap: AudioQueueProcessingTapRef,
        inNumberFrames: UInt32,
        ioTimeStamp: *mut AudioTimeStamp,
        ioFlags: *mut AudioQueueProcessingTapFlags,
        outNumberFrames: *mut UInt32,
        ioData: *mut AudioBufferList,
    ),
>;
extern "C" {
    pub fn AudioQueueNewOutput(
        inFormat: *const AudioStreamBasicDescription,
        inCallbackProc: AudioQueueOutputCallback,
        inUserData: *mut ::std::os::raw::c_void,
        inCallbackRunLoop: CFRunLoopRef,
        inCallbackRunLoopMode: CFStringRef,
        inFlags: UInt32,
        outAQ: *mut AudioQueueRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueNewInput(
        inFormat: *const AudioStreamBasicDescription,
        inCallbackProc: AudioQueueInputCallback,
        inUserData: *mut ::std::os::raw::c_void,
        inCallbackRunLoop: CFRunLoopRef,
        inCallbackRunLoopMode: CFStringRef,
        inFlags: UInt32,
        outAQ: *mut AudioQueueRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueNewOutputWithDispatchQueue(
        outAQ: *mut AudioQueueRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
        inCallbackDispatchQueue: dispatch_queue_t,
        inCallbackBlock: AudioQueueOutputCallbackBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueNewInputWithDispatchQueue(
        outAQ: *mut AudioQueueRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
        inCallbackDispatchQueue: dispatch_queue_t,
        inCallbackBlock: AudioQueueInputCallbackBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDispose(inAQ: AudioQueueRef, inImmediate: Boolean) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueAllocateBuffer(
        inAQ: AudioQueueRef,
        inBufferByteSize: UInt32,
        outBuffer: *mut AudioQueueBufferRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueAllocateBufferWithPacketDescriptions(
        inAQ: AudioQueueRef,
        inBufferByteSize: UInt32,
        inNumberPacketDescriptions: UInt32,
        outBuffer: *mut AudioQueueBufferRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueFreeBuffer(inAQ: AudioQueueRef, inBuffer: AudioQueueBufferRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueEnqueueBuffer(
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
        inNumPacketDescs: UInt32,
        inPacketDescs: *const AudioStreamPacketDescription,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueEnqueueBufferWithParameters(
        inAQ: AudioQueueRef,
        inBuffer: AudioQueueBufferRef,
        inNumPacketDescs: UInt32,
        inPacketDescs: *const AudioStreamPacketDescription,
        inTrimFramesAtStart: UInt32,
        inTrimFramesAtEnd: UInt32,
        inNumParamValues: UInt32,
        inParamValues: *const AudioQueueParameterEvent,
        inStartTime: *const AudioTimeStamp,
        outActualStartTime: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueStart(inAQ: AudioQueueRef, inStartTime: *const AudioTimeStamp) -> OSStatus;
}
extern "C" {
    pub fn AudioQueuePrime(
        inAQ: AudioQueueRef,
        inNumberOfFramesToPrepare: UInt32,
        outNumberOfFramesPrepared: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueStop(inAQ: AudioQueueRef, inImmediate: Boolean) -> OSStatus;
}
extern "C" {
    pub fn AudioQueuePause(inAQ: AudioQueueRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueFlush(inAQ: AudioQueueRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueReset(inAQ: AudioQueueRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetParameter(
        inAQ: AudioQueueRef,
        inParamID: AudioQueueParameterID,
        outValue: *mut AudioQueueParameterValue,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueSetParameter(
        inAQ: AudioQueueRef,
        inParamID: AudioQueueParameterID,
        inValue: AudioQueueParameterValue,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetProperty(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        outData: *mut ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueSetProperty(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        inData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetPropertySize(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueAddPropertyListener(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        inProc: AudioQueuePropertyListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueRemovePropertyListener(
        inAQ: AudioQueueRef,
        inID: AudioQueuePropertyID,
        inProc: AudioQueuePropertyListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueCreateTimeline(
        inAQ: AudioQueueRef,
        outTimeline: *mut AudioQueueTimelineRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDisposeTimeline(
        inAQ: AudioQueueRef,
        inTimeline: AudioQueueTimelineRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueGetCurrentTime(
        inAQ: AudioQueueRef,
        inTimeline: AudioQueueTimelineRef,
        outTimeStamp: *mut AudioTimeStamp,
        outTimelineDiscontinuity: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDeviceGetCurrentTime(
        inAQ: AudioQueueRef,
        outTimeStamp: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDeviceTranslateTime(
        inAQ: AudioQueueRef,
        inTime: *const AudioTimeStamp,
        outTime: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueDeviceGetNearestStartTime(
        inAQ: AudioQueueRef,
        ioRequestedStartTime: *mut AudioTimeStamp,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueSetOfflineRenderFormat(
        inAQ: AudioQueueRef,
        inFormat: *const AudioStreamBasicDescription,
        inLayout: *const AudioChannelLayout,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueOfflineRender(
        inAQ: AudioQueueRef,
        inTimestamp: *const AudioTimeStamp,
        ioBuffer: AudioQueueBufferRef,
        inNumberFrames: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapNew(
        inAQ: AudioQueueRef,
        inCallback: AudioQueueProcessingTapCallback,
        inClientData: *mut ::std::os::raw::c_void,
        inFlags: AudioQueueProcessingTapFlags,
        outMaxFrames: *mut UInt32,
        outProcessingFormat: *mut AudioStreamBasicDescription,
        outAQTap: *mut AudioQueueProcessingTapRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapDispose(inAQTap: AudioQueueProcessingTapRef) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapGetSourceAudio(
        inAQTap: AudioQueueProcessingTapRef,
        inNumberFrames: UInt32,
        ioTimeStamp: *mut AudioTimeStamp,
        outFlags: *mut AudioQueueProcessingTapFlags,
        outNumberFrames: *mut UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioQueueProcessingTapGetQueueTime(
        inAQTap: AudioQueueProcessingTapRef,
        outQueueSampleTime: *mut Float64,
        outQueueFrameCount: *mut UInt32,
    ) -> OSStatus;
}
pub type AudioObjectID = UInt32;
pub type AudioClassID = UInt32;
pub type AudioObjectPropertySelector = UInt32;
pub type AudioObjectPropertyScope = UInt32;
pub type AudioObjectPropertyElement = UInt32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioObjectPropertyAddress {
    pub mSelector: AudioObjectPropertySelector,
    pub mScope: AudioObjectPropertyScope,
    pub mElement: AudioObjectPropertyElement,
}
#[test]
fn bindgen_test_layout_AudioObjectPropertyAddress() {
    assert_eq!(
        ::std::mem::size_of::<AudioObjectPropertyAddress>(),
        12usize,
        concat!("Size of: ", stringify!(AudioObjectPropertyAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioObjectPropertyAddress>(),
        4usize,
        concat!("Alignment of ", stringify!(AudioObjectPropertyAddress))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioObjectPropertyAddress>())).mSelector as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioObjectPropertyAddress),
            "::",
            stringify!(mSelector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioObjectPropertyAddress>())).mScope as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioObjectPropertyAddress),
            "::",
            stringify!(mScope)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioObjectPropertyAddress>())).mElement as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioObjectPropertyAddress),
            "::",
            stringify!(mElement)
        )
    );
}
pub const kAudioHardwareNoError: ::std::os::raw::c_uint = 0;
pub const kAudioHardwareNotRunningError: ::std::os::raw::c_uint = 1937010544;
pub const kAudioHardwareUnspecifiedError: ::std::os::raw::c_uint = 2003329396;
pub const kAudioHardwareUnknownPropertyError: ::std::os::raw::c_uint = 2003332927;
pub const kAudioHardwareBadPropertySizeError: ::std::os::raw::c_uint = 561211770;
pub const kAudioHardwareIllegalOperationError: ::std::os::raw::c_uint = 1852797029;
pub const kAudioHardwareBadObjectError: ::std::os::raw::c_uint = 560947818;
pub const kAudioHardwareBadDeviceError: ::std::os::raw::c_uint = 560227702;
pub const kAudioHardwareBadStreamError: ::std::os::raw::c_uint = 561214578;
pub const kAudioHardwareUnsupportedOperationError: ::std::os::raw::c_uint = 1970171760;
pub const kAudioDeviceUnsupportedFormatError: ::std::os::raw::c_uint = 560226676;
pub const kAudioDevicePermissionsError: ::std::os::raw::c_uint = 560492391;
pub type _bindgen_ty_257 = ::std::os::raw::c_uint;
pub const kAudioObjectUnknown: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_258 = ::std::os::raw::c_uint;
pub const kAudioObjectPropertyScopeGlobal: ::std::os::raw::c_uint = 1735159650;
pub const kAudioObjectPropertyScopeInput: ::std::os::raw::c_uint = 1768845428;
pub const kAudioObjectPropertyScopeOutput: ::std::os::raw::c_uint = 1869968496;
pub const kAudioObjectPropertyScopePlayThrough: ::std::os::raw::c_uint = 1886679669;
pub const kAudioObjectPropertyElementMaster: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_259 = ::std::os::raw::c_uint;
pub const kAudioObjectPropertySelectorWildcard: ::std::os::raw::c_uint = 707406378;
pub type _bindgen_ty_260 = ::std::os::raw::c_uint;
pub const kAudioObjectPropertyScopeWildcard: ::std::os::raw::c_uint = 707406378;
pub type _bindgen_ty_261 = ::std::os::raw::c_uint;
pub const kAudioObjectPropertyElementWildcard: ::std::os::raw::c_uint = 4294967295;
pub type _bindgen_ty_262 = ::std::os::raw::c_uint;
pub const kAudioObjectClassIDWildcard: ::std::os::raw::c_uint = 707406378;
pub type _bindgen_ty_263 = ::std::os::raw::c_uint;
pub const kAudioObjectClassID: ::std::os::raw::c_uint = 1634689642;
pub type _bindgen_ty_264 = ::std::os::raw::c_uint;
pub const kAudioObjectPropertyBaseClass: ::std::os::raw::c_uint = 1650682995;
pub const kAudioObjectPropertyClass: ::std::os::raw::c_uint = 1668047219;
pub const kAudioObjectPropertyOwner: ::std::os::raw::c_uint = 1937007734;
pub const kAudioObjectPropertyName: ::std::os::raw::c_uint = 1819173229;
pub const kAudioObjectPropertyModelName: ::std::os::raw::c_uint = 1819111268;
pub const kAudioObjectPropertyManufacturer: ::std::os::raw::c_uint = 1819107691;
pub const kAudioObjectPropertyElementName: ::std::os::raw::c_uint = 1818454126;
pub const kAudioObjectPropertyElementCategoryName: ::std::os::raw::c_uint = 1818452846;
pub const kAudioObjectPropertyElementNumberName: ::std::os::raw::c_uint = 1818455662;
pub const kAudioObjectPropertyOwnedObjects: ::std::os::raw::c_uint = 1870098020;
pub const kAudioObjectPropertyIdentify: ::std::os::raw::c_uint = 1768187246;
pub const kAudioObjectPropertySerialNumber: ::std::os::raw::c_uint = 1936618861;
pub const kAudioObjectPropertyFirmwareVersion: ::std::os::raw::c_uint = 1719105134;
pub type _bindgen_ty_265 = ::std::os::raw::c_uint;
pub const kAudioPlugInClassID: ::std::os::raw::c_uint = 1634757735;
pub type _bindgen_ty_266 = ::std::os::raw::c_uint;
pub const kAudioPlugInPropertyBundleID: ::std::os::raw::c_uint = 1885956452;
pub const kAudioPlugInPropertyDeviceList: ::std::os::raw::c_uint = 1684370979;
pub const kAudioPlugInPropertyTranslateUIDToDevice: ::std::os::raw::c_uint = 1969841252;
pub const kAudioPlugInPropertyBoxList: ::std::os::raw::c_uint = 1651472419;
pub const kAudioPlugInPropertyTranslateUIDToBox: ::std::os::raw::c_uint = 1969841250;
pub const kAudioPlugInPropertyClockDeviceList: ::std::os::raw::c_uint = 1668049699;
pub const kAudioPlugInPropertyTranslateUIDToClockDevice: ::std::os::raw::c_uint = 1969841251;
pub type _bindgen_ty_267 = ::std::os::raw::c_uint;
pub const kAudioTransportManagerClassID: ::std::os::raw::c_uint = 1953656941;
pub type _bindgen_ty_268 = ::std::os::raw::c_uint;
pub const kAudioTransportManagerPropertyEndPointList: ::std::os::raw::c_uint = 1701733411;
pub const kAudioTransportManagerPropertyTranslateUIDToEndPoint: ::std::os::raw::c_uint = 1969841253;
pub const kAudioTransportManagerPropertyTransportType: ::std::os::raw::c_uint = 1953653102;
pub type _bindgen_ty_269 = ::std::os::raw::c_uint;
pub const kAudioBoxClassID: ::std::os::raw::c_uint = 1633841016;
pub type _bindgen_ty_270 = ::std::os::raw::c_uint;
pub const kAudioBoxPropertyBoxUID: ::std::os::raw::c_uint = 1651861860;
pub const kAudioBoxPropertyTransportType: ::std::os::raw::c_uint = 1953653102;
pub const kAudioBoxPropertyHasAudio: ::std::os::raw::c_uint = 1651007861;
pub const kAudioBoxPropertyHasVideo: ::std::os::raw::c_uint = 1651013225;
pub const kAudioBoxPropertyHasMIDI: ::std::os::raw::c_uint = 1651010921;
pub const kAudioBoxPropertyIsProtected: ::std::os::raw::c_uint = 1651536495;
pub const kAudioBoxPropertyAcquired: ::std::os::raw::c_uint = 1652060014;
pub const kAudioBoxPropertyAcquisitionFailed: ::std::os::raw::c_uint = 1652060006;
pub const kAudioBoxPropertyDeviceList: ::std::os::raw::c_uint = 1650751011;
pub const kAudioBoxPropertyClockDeviceList: ::std::os::raw::c_uint = 1650682915;
pub type _bindgen_ty_271 = ::std::os::raw::c_uint;
pub const kAudioDeviceClassID: ::std::os::raw::c_uint = 1633969526;
pub type _bindgen_ty_272 = ::std::os::raw::c_uint;
pub const kAudioDeviceTransportTypeUnknown: ::std::os::raw::c_uint = 0;
pub const kAudioDeviceTransportTypeBuiltIn: ::std::os::raw::c_uint = 1651274862;
pub const kAudioDeviceTransportTypeAggregate: ::std::os::raw::c_uint = 1735554416;
pub const kAudioDeviceTransportTypeVirtual: ::std::os::raw::c_uint = 1986622068;
pub const kAudioDeviceTransportTypePCI: ::std::os::raw::c_uint = 1885563168;
pub const kAudioDeviceTransportTypeUSB: ::std::os::raw::c_uint = 1970496032;
pub const kAudioDeviceTransportTypeFireWire: ::std::os::raw::c_uint = 825440564;
pub const kAudioDeviceTransportTypeBluetooth: ::std::os::raw::c_uint = 1651275109;
pub const kAudioDeviceTransportTypeBluetoothLE: ::std::os::raw::c_uint = 1651271009;
pub const kAudioDeviceTransportTypeHDMI: ::std::os::raw::c_uint = 1751412073;
pub const kAudioDeviceTransportTypeDisplayPort: ::std::os::raw::c_uint = 1685090932;
pub const kAudioDeviceTransportTypeAirPlay: ::std::os::raw::c_uint = 1634300528;
pub const kAudioDeviceTransportTypeAVB: ::std::os::raw::c_uint = 1700886114;
pub const kAudioDeviceTransportTypeThunderbolt: ::std::os::raw::c_uint = 1953002862;
pub type _bindgen_ty_273 = ::std::os::raw::c_uint;
pub const kAudioDevicePropertyConfigurationApplication: ::std::os::raw::c_uint = 1667330160;
pub const kAudioDevicePropertyDeviceUID: ::std::os::raw::c_uint = 1969841184;
pub const kAudioDevicePropertyModelUID: ::std::os::raw::c_uint = 1836411236;
pub const kAudioDevicePropertyTransportType: ::std::os::raw::c_uint = 1953653102;
pub const kAudioDevicePropertyRelatedDevices: ::std::os::raw::c_uint = 1634429294;
pub const kAudioDevicePropertyClockDomain: ::std::os::raw::c_uint = 1668049764;
pub const kAudioDevicePropertyDeviceIsAlive: ::std::os::raw::c_uint = 1818850926;
pub const kAudioDevicePropertyDeviceIsRunning: ::std::os::raw::c_uint = 1735354734;
pub const kAudioDevicePropertyDeviceCanBeDefaultDevice: ::std::os::raw::c_uint = 1684434036;
pub const kAudioDevicePropertyDeviceCanBeDefaultSystemDevice: ::std::os::raw::c_uint = 1936092276;
pub const kAudioDevicePropertyLatency: ::std::os::raw::c_uint = 1819569763;
pub const kAudioDevicePropertyStreams: ::std::os::raw::c_uint = 1937009955;
pub const kAudioObjectPropertyControlList: ::std::os::raw::c_uint = 1668575852;
pub const kAudioDevicePropertySafetyOffset: ::std::os::raw::c_uint = 1935763060;
pub const kAudioDevicePropertyNominalSampleRate: ::std::os::raw::c_uint = 1853059700;
pub const kAudioDevicePropertyAvailableNominalSampleRates: ::std::os::raw::c_uint = 1853059619;
pub const kAudioDevicePropertyIcon: ::std::os::raw::c_uint = 1768124270;
pub const kAudioDevicePropertyIsHidden: ::std::os::raw::c_uint = 1751737454;
pub const kAudioDevicePropertyPreferredChannelsForStereo: ::std::os::raw::c_uint = 1684236338;
pub const kAudioDevicePropertyPreferredChannelLayout: ::std::os::raw::c_uint = 1936879204;
pub type _bindgen_ty_274 = ::std::os::raw::c_uint;
pub const kAudioClockDeviceClassID: ::std::os::raw::c_uint = 1633905771;
pub type _bindgen_ty_275 = ::std::os::raw::c_uint;
pub const kAudioClockDevicePropertyDeviceUID: ::std::os::raw::c_uint = 1668639076;
pub const kAudioClockDevicePropertyTransportType: ::std::os::raw::c_uint = 1953653102;
pub const kAudioClockDevicePropertyClockDomain: ::std::os::raw::c_uint = 1668049764;
pub const kAudioClockDevicePropertyDeviceIsAlive: ::std::os::raw::c_uint = 1818850926;
pub const kAudioClockDevicePropertyDeviceIsRunning: ::std::os::raw::c_uint = 1735354734;
pub const kAudioClockDevicePropertyLatency: ::std::os::raw::c_uint = 1819569763;
pub const kAudioClockDevicePropertyControlList: ::std::os::raw::c_uint = 1668575852;
pub const kAudioClockDevicePropertyNominalSampleRate: ::std::os::raw::c_uint = 1853059700;
pub const kAudioClockDevicePropertyAvailableNominalSampleRates: ::std::os::raw::c_uint = 1853059619;
pub type _bindgen_ty_276 = ::std::os::raw::c_uint;
pub const kAudioEndPointDeviceClassID: ::std::os::raw::c_uint = 1701078390;
pub type _bindgen_ty_277 = ::std::os::raw::c_uint;
pub const kAudioEndPointDevicePropertyComposition: ::std::os::raw::c_uint = 1633906541;
pub const kAudioEndPointDevicePropertyEndPointList: ::std::os::raw::c_uint = 1634169456;
pub const kAudioEndPointDevicePropertyIsPrivate: ::std::os::raw::c_uint = 1886546294;
pub type _bindgen_ty_278 = ::std::os::raw::c_uint;
pub const kAudioEndPointClassID: ::std::os::raw::c_uint = 1701733488;
pub type _bindgen_ty_279 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct AudioStreamRangedDescription {
    pub mFormat: AudioStreamBasicDescription,
    pub mSampleRateRange: AudioValueRange,
}
#[test]
fn bindgen_test_layout_AudioStreamRangedDescription() {
    assert_eq!(
        ::std::mem::size_of::<AudioStreamRangedDescription>(),
        56usize,
        concat!("Size of: ", stringify!(AudioStreamRangedDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioStreamRangedDescription>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioStreamRangedDescription))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamRangedDescription>())).mFormat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamRangedDescription),
            "::",
            stringify!(mFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioStreamRangedDescription>())).mSampleRateRange as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioStreamRangedDescription),
            "::",
            stringify!(mSampleRateRange)
        )
    );
}
pub const kAudioStreamClassID: ::std::os::raw::c_uint = 1634956402;
pub type _bindgen_ty_280 = ::std::os::raw::c_uint;
pub const kAudioStreamTerminalTypeUnknown: ::std::os::raw::c_uint = 0;
pub const kAudioStreamTerminalTypeLine: ::std::os::raw::c_uint = 1818848869;
pub const kAudioStreamTerminalTypeDigitalAudioInterface: ::std::os::raw::c_uint = 1936745574;
pub const kAudioStreamTerminalTypeSpeaker: ::std::os::raw::c_uint = 1936747378;
pub const kAudioStreamTerminalTypeHeadphones: ::std::os::raw::c_uint = 1751412840;
pub const kAudioStreamTerminalTypeLFESpeaker: ::std::os::raw::c_uint = 1818649971;
pub const kAudioStreamTerminalTypeReceiverSpeaker: ::std::os::raw::c_uint = 1920168043;
pub const kAudioStreamTerminalTypeMicrophone: ::std::os::raw::c_uint = 1835623282;
pub const kAudioStreamTerminalTypeHeadsetMicrophone: ::std::os::raw::c_uint = 1752000867;
pub const kAudioStreamTerminalTypeReceiverMicrophone: ::std::os::raw::c_uint = 1919773027;
pub const kAudioStreamTerminalTypeTTY: ::std::os::raw::c_uint = 1953790303;
pub const kAudioStreamTerminalTypeHDMI: ::std::os::raw::c_uint = 1751412073;
pub const kAudioStreamTerminalTypeDisplayPort: ::std::os::raw::c_uint = 1685090932;
pub type _bindgen_ty_281 = ::std::os::raw::c_uint;
pub const kAudioStreamPropertyIsActive: ::std::os::raw::c_uint = 1935762292;
pub const kAudioStreamPropertyDirection: ::std::os::raw::c_uint = 1935960434;
pub const kAudioStreamPropertyTerminalType: ::std::os::raw::c_uint = 1952805485;
pub const kAudioStreamPropertyStartingChannel: ::std::os::raw::c_uint = 1935894638;
pub const kAudioStreamPropertyLatency: ::std::os::raw::c_uint = 1819569763;
pub const kAudioStreamPropertyVirtualFormat: ::std::os::raw::c_uint = 1936092532;
pub const kAudioStreamPropertyAvailableVirtualFormats: ::std::os::raw::c_uint = 1936092513;
pub const kAudioStreamPropertyPhysicalFormat: ::std::os::raw::c_uint = 1885762592;
pub const kAudioStreamPropertyAvailablePhysicalFormats: ::std::os::raw::c_uint = 1885762657;
pub type _bindgen_ty_282 = ::std::os::raw::c_uint;
pub const kAudioControlClassID: ::std::os::raw::c_uint = 1633907820;
pub type _bindgen_ty_283 = ::std::os::raw::c_uint;
pub const kAudioControlPropertyScope: ::std::os::raw::c_uint = 1668506480;
pub const kAudioControlPropertyElement: ::std::os::raw::c_uint = 1667591277;
pub type _bindgen_ty_284 = ::std::os::raw::c_uint;
pub const kAudioSliderControlClassID: ::std::os::raw::c_uint = 1936483442;
pub type _bindgen_ty_285 = ::std::os::raw::c_uint;
pub const kAudioSliderControlPropertyValue: ::std::os::raw::c_uint = 1935962742;
pub const kAudioSliderControlPropertyRange: ::std::os::raw::c_uint = 1935962738;
pub type _bindgen_ty_286 = ::std::os::raw::c_uint;
pub const kAudioLevelControlClassID: ::std::os::raw::c_uint = 1818588780;
pub const kAudioVolumeControlClassID: ::std::os::raw::c_uint = 1986817381;
pub const kAudioLFEVolumeControlClassID: ::std::os::raw::c_uint = 1937072758;
pub type _bindgen_ty_287 = ::std::os::raw::c_uint;
pub const kAudioLevelControlPropertyScalarValue: ::std::os::raw::c_uint = 1818456950;
pub const kAudioLevelControlPropertyDecibelValue: ::std::os::raw::c_uint = 1818453110;
pub const kAudioLevelControlPropertyDecibelRange: ::std::os::raw::c_uint = 1818453106;
pub const kAudioLevelControlPropertyConvertScalarToDecibels: ::std::os::raw::c_uint = 1818456932;
pub const kAudioLevelControlPropertyConvertDecibelsToScalar: ::std::os::raw::c_uint = 1818453107;
pub type _bindgen_ty_288 = ::std::os::raw::c_uint;
pub const kAudioBooleanControlClassID: ::std::os::raw::c_uint = 1953458028;
pub const kAudioMuteControlClassID: ::std::os::raw::c_uint = 1836414053;
pub const kAudioSoloControlClassID: ::std::os::raw::c_uint = 1936682095;
pub const kAudioJackControlClassID: ::std::os::raw::c_uint = 1784767339;
pub const kAudioLFEMuteControlClassID: ::std::os::raw::c_uint = 1937072749;
pub const kAudioPhantomPowerControlClassID: ::std::os::raw::c_uint = 1885888878;
pub const kAudioPhaseInvertControlClassID: ::std::os::raw::c_uint = 1885893481;
pub const kAudioClipLightControlClassID: ::std::os::raw::c_uint = 1668049264;
pub const kAudioTalkbackControlClassID: ::std::os::raw::c_uint = 1952541794;
pub const kAudioListenbackControlClassID: ::std::os::raw::c_uint = 1819504226;
pub type _bindgen_ty_289 = ::std::os::raw::c_uint;
pub const kAudioBooleanControlPropertyValue: ::std::os::raw::c_uint = 1650685548;
pub type _bindgen_ty_290 = ::std::os::raw::c_uint;
pub const kAudioSelectorControlClassID: ::std::os::raw::c_uint = 1936483188;
pub const kAudioDataSourceControlClassID: ::std::os::raw::c_uint = 1685287523;
pub const kAudioDataDestinationControlClassID: ::std::os::raw::c_uint = 1684370292;
pub const kAudioClockSourceControlClassID: ::std::os::raw::c_uint = 1668047723;
pub const kAudioLineLevelControlClassID: ::std::os::raw::c_uint = 1852601964;
pub const kAudioHighPassFilterControlClassID: ::std::os::raw::c_uint = 1751740518;
pub type _bindgen_ty_291 = ::std::os::raw::c_uint;
pub const kAudioSelectorControlPropertyCurrentItem: ::std::os::raw::c_uint = 1935893353;
pub const kAudioSelectorControlPropertyAvailableItems: ::std::os::raw::c_uint = 1935892841;
pub const kAudioSelectorControlPropertyItemName: ::std::os::raw::c_uint = 1935894894;
pub const kAudioSelectorControlPropertyItemKind: ::std::os::raw::c_uint = 1668049771;
pub type _bindgen_ty_292 = ::std::os::raw::c_uint;
pub const kAudioSelectorControlItemKindSpacer: ::std::os::raw::c_uint = 1936745330;
pub type _bindgen_ty_293 = ::std::os::raw::c_uint;
pub const kAudioClockSourceItemKindInternal: ::std::os::raw::c_uint = 1768846368;
pub type _bindgen_ty_294 = ::std::os::raw::c_uint;
pub const kAudioStereoPanControlClassID: ::std::os::raw::c_uint = 1936744814;
pub type _bindgen_ty_295 = ::std::os::raw::c_uint;
pub const kAudioStereoPanControlPropertyValue: ::std::os::raw::c_uint = 1936745334;
pub const kAudioStereoPanControlPropertyPanningChannels: ::std::os::raw::c_uint = 1936745315;
pub type _bindgen_ty_296 = ::std::os::raw::c_uint;
pub const kAudioObjectSystemObject: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_297 = ::std::os::raw::c_uint;
pub type AudioObjectPropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inObjectID: AudioObjectID,
        inNumberAddresses: UInt32,
        inAddresses: *const AudioObjectPropertyAddress,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioObjectPropertyListenerBlock = *mut ::std::os::raw::c_void;
pub const kAudioObjectPropertyCreator: ::std::os::raw::c_uint = 1869638759;
pub const kAudioObjectPropertyListenerAdded: ::std::os::raw::c_uint = 1818850145;
pub const kAudioObjectPropertyListenerRemoved: ::std::os::raw::c_uint = 1818850162;
pub type _bindgen_ty_298 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioObjectShow(inObjectID: AudioObjectID);
}
extern "C" {
    pub fn AudioObjectHasProperty(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
    ) -> Boolean;
}
extern "C" {
    pub fn AudioObjectIsPropertySettable(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        outIsSettable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectGetPropertyDataSize(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inQualifierDataSize: UInt32,
        inQualifierData: *const ::std::os::raw::c_void,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectGetPropertyData(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inQualifierDataSize: UInt32,
        inQualifierData: *const ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
        outData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectSetPropertyData(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inQualifierDataSize: UInt32,
        inQualifierData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
        inData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectAddPropertyListener(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inListener: AudioObjectPropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectRemovePropertyListener(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inListener: AudioObjectPropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectAddPropertyListenerBlock(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inDispatchQueue: dispatch_queue_t,
        inListener: AudioObjectPropertyListenerBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioObjectRemovePropertyListenerBlock(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inDispatchQueue: dispatch_queue_t,
        inListener: AudioObjectPropertyListenerBlock,
    ) -> OSStatus;
}
pub const kAudioSystemObjectClassID: ::std::os::raw::c_uint = 1634957683;
pub type _bindgen_ty_299 = ::std::os::raw::c_uint;
pub type AudioHardwarePowerHint = UInt32;
pub const kAudioHardwarePowerHintNone: ::std::os::raw::c_uint = 0;
pub const kAudioHardwarePowerHintFavorSavingPower: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_300 = ::std::os::raw::c_uint;
pub const kAudioHardwarePropertyDevices: ::std::os::raw::c_uint = 1684370979;
pub const kAudioHardwarePropertyDefaultInputDevice: ::std::os::raw::c_uint = 1682533920;
pub const kAudioHardwarePropertyDefaultOutputDevice: ::std::os::raw::c_uint = 1682929012;
pub const kAudioHardwarePropertyDefaultSystemOutputDevice: ::std::os::raw::c_uint = 1934587252;
pub const kAudioHardwarePropertyTranslateUIDToDevice: ::std::os::raw::c_uint = 1969841252;
pub const kAudioHardwarePropertyMixStereoToMono: ::std::os::raw::c_uint = 1937010031;
pub const kAudioHardwarePropertyPlugInList: ::std::os::raw::c_uint = 1886152483;
pub const kAudioHardwarePropertyTranslateBundleIDToPlugIn: ::std::os::raw::c_uint = 1651074160;
pub const kAudioHardwarePropertyTransportManagerList: ::std::os::raw::c_uint = 1953326883;
pub const kAudioHardwarePropertyTranslateBundleIDToTransportManager: ::std::os::raw::c_uint =
    1953325673;
pub const kAudioHardwarePropertyBoxList: ::std::os::raw::c_uint = 1651472419;
pub const kAudioHardwarePropertyTranslateUIDToBox: ::std::os::raw::c_uint = 1969841250;
pub const kAudioHardwarePropertyClockDeviceList: ::std::os::raw::c_uint = 1668049699;
pub const kAudioHardwarePropertyTranslateUIDToClockDevice: ::std::os::raw::c_uint = 1969841251;
pub const kAudioHardwarePropertyProcessIsMaster: ::std::os::raw::c_uint = 1835103092;
pub const kAudioHardwarePropertyIsInitingOrExiting: ::std::os::raw::c_uint = 1768845172;
pub const kAudioHardwarePropertyUserIDChanged: ::std::os::raw::c_uint = 1702193508;
pub const kAudioHardwarePropertyProcessIsAudible: ::std::os::raw::c_uint = 1886221684;
pub const kAudioHardwarePropertySleepingIsAllowed: ::std::os::raw::c_uint = 1936483696;
pub const kAudioHardwarePropertyUnloadingIsAllowed: ::std::os::raw::c_uint = 1970170980;
pub const kAudioHardwarePropertyHogModeIsAllowed: ::std::os::raw::c_uint = 1752131442;
pub const kAudioHardwarePropertyUserSessionIsActiveOrHeadless: ::std::os::raw::c_uint = 1970496882;
pub const kAudioHardwarePropertyServiceRestarted: ::std::os::raw::c_uint = 1936880500;
pub const kAudioHardwarePropertyPowerHint: ::std::os::raw::c_uint = 1886353256;
pub type _bindgen_ty_301 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioHardwareUnload() -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareCreateAggregateDevice(
        inDescription: CFDictionaryRef,
        outDeviceID: *mut AudioObjectID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareDestroyAggregateDevice(inDeviceID: AudioObjectID) -> OSStatus;
}
pub const kAudioPlugInCreateAggregateDevice: ::std::os::raw::c_uint = 1667327847;
pub const kAudioPlugInDestroyAggregateDevice: ::std::os::raw::c_uint = 1684105063;
pub type _bindgen_ty_302 = ::std::os::raw::c_uint;
pub const kAudioTransportManagerCreateEndPointDevice: ::std::os::raw::c_uint = 1667523958;
pub const kAudioTransportManagerDestroyEndPointDevice: ::std::os::raw::c_uint = 1684301174;
pub type _bindgen_ty_303 = ::std::os::raw::c_uint;
pub type AudioDeviceIOProc = ::std::option::Option<
    unsafe extern "C" fn(
        inDevice: AudioObjectID,
        inNow: *const AudioTimeStamp,
        inInputData: *const AudioBufferList,
        inInputTime: *const AudioTimeStamp,
        outOutputData: *mut AudioBufferList,
        inOutputTime: *const AudioTimeStamp,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioDeviceIOBlock = *mut ::std::os::raw::c_void;
pub type AudioDeviceIOProcID = AudioDeviceIOProc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioHardwareIOProcStreamUsage {
    pub mIOProc: *mut ::std::os::raw::c_void,
    pub mNumberStreams: UInt32,
    pub mStreamIsOn: [UInt32; 1usize],
}
#[test]
fn bindgen_test_layout_AudioHardwareIOProcStreamUsage() {
    assert_eq!(
        ::std::mem::size_of::<AudioHardwareIOProcStreamUsage>(),
        16usize,
        concat!("Size of: ", stringify!(AudioHardwareIOProcStreamUsage))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioHardwareIOProcStreamUsage>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioHardwareIOProcStreamUsage))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioHardwareIOProcStreamUsage>())).mIOProc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioHardwareIOProcStreamUsage),
            "::",
            stringify!(mIOProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioHardwareIOProcStreamUsage>())).mNumberStreams as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioHardwareIOProcStreamUsage),
            "::",
            stringify!(mNumberStreams)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioHardwareIOProcStreamUsage>())).mStreamIsOn as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioHardwareIOProcStreamUsage),
            "::",
            stringify!(mStreamIsOn)
        )
    );
}
impl Default for AudioHardwareIOProcStreamUsage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const kAudioDeviceStartTimeIsInputFlag: ::std::os::raw::c_uint = 1;
pub const kAudioDeviceStartTimeDontConsultDeviceFlag: ::std::os::raw::c_uint = 2;
pub const kAudioDeviceStartTimeDontConsultHALFlag: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_304 = ::std::os::raw::c_uint;
pub const kAudioDevicePropertyPlugIn: ::std::os::raw::c_uint = 1886156135;
pub const kAudioDevicePropertyDeviceHasChanged: ::std::os::raw::c_uint = 1684629094;
pub const kAudioDevicePropertyDeviceIsRunningSomewhere: ::std::os::raw::c_uint = 1735356005;
pub const kAudioDeviceProcessorOverload: ::std::os::raw::c_uint = 1870030194;
pub const kAudioDevicePropertyIOStoppedAbnormally: ::std::os::raw::c_uint = 1937010788;
pub const kAudioDevicePropertyHogMode: ::std::os::raw::c_uint = 1869180523;
pub const kAudioDevicePropertyBufferFrameSize: ::std::os::raw::c_uint = 1718839674;
pub const kAudioDevicePropertyBufferFrameSizeRange: ::std::os::raw::c_uint = 1718843939;
pub const kAudioDevicePropertyUsesVariableBufferFrameSizes: ::std::os::raw::c_uint = 1986425722;
pub const kAudioDevicePropertyIOCycleUsage: ::std::os::raw::c_uint = 1852012899;
pub const kAudioDevicePropertyStreamConfiguration: ::std::os::raw::c_uint = 1936482681;
pub const kAudioDevicePropertyIOProcStreamUsage: ::std::os::raw::c_uint = 1937077093;
pub const kAudioDevicePropertyActualSampleRate: ::std::os::raw::c_uint = 1634955892;
pub const kAudioDevicePropertyClockDevice: ::std::os::raw::c_uint = 1634755428;
pub const kAudioDevicePropertyIOThreadOSWorkgroup: ::std::os::raw::c_uint = 1869838183;
pub type _bindgen_ty_305 = ::std::os::raw::c_uint;
pub const kAudioDevicePropertyJackIsConnected: ::std::os::raw::c_uint = 1784767339;
pub const kAudioDevicePropertyVolumeScalar: ::std::os::raw::c_uint = 1987013741;
pub const kAudioDevicePropertyVolumeDecibels: ::std::os::raw::c_uint = 1987013732;
pub const kAudioDevicePropertyVolumeRangeDecibels: ::std::os::raw::c_uint = 1986290211;
pub const kAudioDevicePropertyVolumeScalarToDecibels: ::std::os::raw::c_uint = 1983013986;
pub const kAudioDevicePropertyVolumeDecibelsToScalar: ::std::os::raw::c_uint = 1684157046;
pub const kAudioDevicePropertyStereoPan: ::std::os::raw::c_uint = 1936744814;
pub const kAudioDevicePropertyStereoPanChannels: ::std::os::raw::c_uint = 1936748067;
pub const kAudioDevicePropertyMute: ::std::os::raw::c_uint = 1836414053;
pub const kAudioDevicePropertySolo: ::std::os::raw::c_uint = 1936682095;
pub const kAudioDevicePropertyPhantomPower: ::std::os::raw::c_uint = 1885888878;
pub const kAudioDevicePropertyPhaseInvert: ::std::os::raw::c_uint = 1885893481;
pub const kAudioDevicePropertyClipLight: ::std::os::raw::c_uint = 1668049264;
pub const kAudioDevicePropertyTalkback: ::std::os::raw::c_uint = 1952541794;
pub const kAudioDevicePropertyListenback: ::std::os::raw::c_uint = 1819504226;
pub const kAudioDevicePropertyDataSource: ::std::os::raw::c_uint = 1936945763;
pub const kAudioDevicePropertyDataSources: ::std::os::raw::c_uint = 1936941859;
pub const kAudioDevicePropertyDataSourceNameForIDCFString: ::std::os::raw::c_uint = 1819501422;
pub const kAudioDevicePropertyDataSourceKindForID: ::std::os::raw::c_uint = 1936941931;
pub const kAudioDevicePropertyClockSource: ::std::os::raw::c_uint = 1668510307;
pub const kAudioDevicePropertyClockSources: ::std::os::raw::c_uint = 1668506403;
pub const kAudioDevicePropertyClockSourceNameForIDCFString: ::std::os::raw::c_uint = 1818456942;
pub const kAudioDevicePropertyClockSourceKindForID: ::std::os::raw::c_uint = 1668506475;
pub const kAudioDevicePropertyPlayThru: ::std::os::raw::c_uint = 1953002101;
pub const kAudioDevicePropertyPlayThruSolo: ::std::os::raw::c_uint = 1953002099;
pub const kAudioDevicePropertyPlayThruVolumeScalar: ::std::os::raw::c_uint = 1836479331;
pub const kAudioDevicePropertyPlayThruVolumeDecibels: ::std::os::raw::c_uint = 1836475490;
pub const kAudioDevicePropertyPlayThruVolumeRangeDecibels: ::std::os::raw::c_uint = 1836475427;
pub const kAudioDevicePropertyPlayThruVolumeScalarToDecibels: ::std::os::raw::c_uint = 1836462692;
pub const kAudioDevicePropertyPlayThruVolumeDecibelsToScalar: ::std::os::raw::c_uint = 1836462707;
pub const kAudioDevicePropertyPlayThruStereoPan: ::std::os::raw::c_uint = 1836281966;
pub const kAudioDevicePropertyPlayThruStereoPanChannels: ::std::os::raw::c_uint = 1836281891;
pub const kAudioDevicePropertyPlayThruDestination: ::std::os::raw::c_uint = 1835295859;
pub const kAudioDevicePropertyPlayThruDestinations: ::std::os::raw::c_uint = 1835295779;
pub const kAudioDevicePropertyPlayThruDestinationNameForIDCFString: ::std::os::raw::c_uint =
    1835295843;
pub const kAudioDevicePropertyChannelNominalLineLevel: ::std::os::raw::c_uint = 1852601964;
pub const kAudioDevicePropertyChannelNominalLineLevels: ::std::os::raw::c_uint = 1852601891;
pub const kAudioDevicePropertyChannelNominalLineLevelNameForIDCFString: ::std::os::raw::c_uint =
    1818455660;
pub const kAudioDevicePropertyHighPassFilterSetting: ::std::os::raw::c_uint = 1751740518;
pub const kAudioDevicePropertyHighPassFilterSettings: ::std::os::raw::c_uint = 1751740451;
pub const kAudioDevicePropertyHighPassFilterSettingNameForIDCFString: ::std::os::raw::c_uint =
    1751740524;
pub const kAudioDevicePropertySubVolumeScalar: ::std::os::raw::c_uint = 1937140845;
pub const kAudioDevicePropertySubVolumeDecibels: ::std::os::raw::c_uint = 1937140836;
pub const kAudioDevicePropertySubVolumeRangeDecibels: ::std::os::raw::c_uint = 1937138723;
pub const kAudioDevicePropertySubVolumeScalarToDecibels: ::std::os::raw::c_uint = 1937125988;
pub const kAudioDevicePropertySubVolumeDecibelsToScalar: ::std::os::raw::c_uint = 1935946358;
pub const kAudioDevicePropertySubMute: ::std::os::raw::c_uint = 1936553332;
pub type _bindgen_ty_306 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioDeviceCreateIOProcID(
        inDevice: AudioObjectID,
        inProc: AudioDeviceIOProc,
        inClientData: *mut ::std::os::raw::c_void,
        outIOProcID: *mut AudioDeviceIOProcID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceCreateIOProcIDWithBlock(
        outIOProcID: *mut AudioDeviceIOProcID,
        inDevice: AudioObjectID,
        inDispatchQueue: dispatch_queue_t,
        inIOBlock: AudioDeviceIOBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceDestroyIOProcID(
        inDevice: AudioObjectID,
        inIOProcID: AudioDeviceIOProcID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceStart(inDevice: AudioObjectID, inProcID: AudioDeviceIOProcID) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceStartAtTime(
        inDevice: AudioObjectID,
        inProcID: AudioDeviceIOProcID,
        ioRequestedStartTime: *mut AudioTimeStamp,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceStop(inDevice: AudioObjectID, inProcID: AudioDeviceIOProcID) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceGetCurrentTime(
        inDevice: AudioObjectID,
        outTime: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceTranslateTime(
        inDevice: AudioObjectID,
        inTime: *const AudioTimeStamp,
        outTime: *mut AudioTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceGetNearestStartTime(
        inDevice: AudioObjectID,
        ioRequestedStartTime: *mut AudioTimeStamp,
        inFlags: UInt32,
    ) -> OSStatus;
}
pub const kAudioAggregateDeviceClassID: ::std::os::raw::c_uint = 1633773415;
pub type _bindgen_ty_307 = ::std::os::raw::c_uint;
pub const kAudioAggregateDevicePropertyFullSubDeviceList: ::std::os::raw::c_uint = 1735554416;
pub const kAudioAggregateDevicePropertyActiveSubDeviceList: ::std::os::raw::c_uint = 1634169456;
pub const kAudioAggregateDevicePropertyComposition: ::std::os::raw::c_uint = 1633906541;
pub const kAudioAggregateDevicePropertyMasterSubDevice: ::std::os::raw::c_uint = 1634562932;
pub const kAudioAggregateDevicePropertyClockDevice: ::std::os::raw::c_uint = 1634755428;
pub type _bindgen_ty_308 = ::std::os::raw::c_uint;
pub const kAudioSubDeviceClassID: ::std::os::raw::c_uint = 1634956642;
pub type _bindgen_ty_309 = ::std::os::raw::c_uint;
pub const kAudioSubDeviceDriftCompensationMinQuality: ::std::os::raw::c_uint = 0;
pub const kAudioSubDeviceDriftCompensationLowQuality: ::std::os::raw::c_uint = 32;
pub const kAudioSubDeviceDriftCompensationMediumQuality: ::std::os::raw::c_uint = 64;
pub const kAudioSubDeviceDriftCompensationHighQuality: ::std::os::raw::c_uint = 96;
pub const kAudioSubDeviceDriftCompensationMaxQuality: ::std::os::raw::c_uint = 127;
pub type _bindgen_ty_310 = ::std::os::raw::c_uint;
pub const kAudioSubDevicePropertyExtraLatency: ::std::os::raw::c_uint = 2020373603;
pub const kAudioSubDevicePropertyDriftCompensation: ::std::os::raw::c_uint = 1685218932;
pub const kAudioSubDevicePropertyDriftCompensationQuality: ::std::os::raw::c_uint = 1685218929;
pub type _bindgen_ty_311 = ::std::os::raw::c_uint;
pub const kAudioDevicePropertyScopeInput: ::std::os::raw::c_uint = 1768845428;
pub const kAudioDevicePropertyScopeOutput: ::std::os::raw::c_uint = 1869968496;
pub const kAudioDevicePropertyScopePlayThrough: ::std::os::raw::c_uint = 1886679669;
pub type _bindgen_ty_312 = ::std::os::raw::c_uint;
pub const kAudioPropertyWildcardPropertyID: ::std::os::raw::c_uint = 707406378;
pub type _bindgen_ty_313 = ::std::os::raw::c_uint;
pub const kAudioPropertyWildcardSection: ::std::os::raw::c_uint = 255;
pub type _bindgen_ty_314 = ::std::os::raw::c_uint;
pub const kAudioPropertyWildcardChannel: ::std::os::raw::c_uint = 4294967295;
pub type _bindgen_ty_315 = ::std::os::raw::c_uint;
pub const kAudioISubOwnerControlClassID: ::std::os::raw::c_uint = 1635017576;
pub type _bindgen_ty_316 = ::std::os::raw::c_uint;
pub const kAudioLevelControlPropertyDecibelsToScalarTransferFunction: ::std::os::raw::c_uint =
    1818457190;
pub type _bindgen_ty_317 = ::std::os::raw::c_uint;
pub type AudioLevelControlTransferFunction = UInt32;
pub const kAudioLevelControlTranferFunctionLinear: ::std::os::raw::c_uint = 0;
pub const kAudioLevelControlTranferFunction1Over3: ::std::os::raw::c_uint = 1;
pub const kAudioLevelControlTranferFunction1Over2: ::std::os::raw::c_uint = 2;
pub const kAudioLevelControlTranferFunction3Over4: ::std::os::raw::c_uint = 3;
pub const kAudioLevelControlTranferFunction3Over2: ::std::os::raw::c_uint = 4;
pub const kAudioLevelControlTranferFunction2Over1: ::std::os::raw::c_uint = 5;
pub const kAudioLevelControlTranferFunction3Over1: ::std::os::raw::c_uint = 6;
pub const kAudioLevelControlTranferFunction4Over1: ::std::os::raw::c_uint = 7;
pub const kAudioLevelControlTranferFunction5Over1: ::std::os::raw::c_uint = 8;
pub const kAudioLevelControlTranferFunction6Over1: ::std::os::raw::c_uint = 9;
pub const kAudioLevelControlTranferFunction7Over1: ::std::os::raw::c_uint = 10;
pub const kAudioLevelControlTranferFunction8Over1: ::std::os::raw::c_uint = 11;
pub const kAudioLevelControlTranferFunction9Over1: ::std::os::raw::c_uint = 12;
pub const kAudioLevelControlTranferFunction10Over1: ::std::os::raw::c_uint = 13;
pub const kAudioLevelControlTranferFunction11Over1: ::std::os::raw::c_uint = 14;
pub const kAudioLevelControlTranferFunction12Over1: ::std::os::raw::c_uint = 15;
pub type _bindgen_ty_318 = ::std::os::raw::c_uint;
pub type AudioHardwarePropertyID = AudioObjectPropertySelector;
pub type AudioHardwarePropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inPropertyID: AudioHardwarePropertyID,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub const kAudioHardwarePropertyRunLoop: ::std::os::raw::c_uint = 1919839344;
pub const kAudioHardwarePropertyDeviceForUID: ::std::os::raw::c_uint = 1685416292;
pub const kAudioHardwarePropertyPlugInForBundleID: ::std::os::raw::c_uint = 1885954665;
pub type _bindgen_ty_319 = ::std::os::raw::c_uint;
pub const kAudioHardwarePropertyBootChimeVolumeScalar: ::std::os::raw::c_uint = 1650620019;
pub const kAudioHardwarePropertyBootChimeVolumeDecibels: ::std::os::raw::c_uint = 1650620004;
pub const kAudioHardwarePropertyBootChimeVolumeRangeDecibels: ::std::os::raw::c_uint = 1650615331;
pub const kAudioHardwarePropertyBootChimeVolumeScalarToDecibels: ::std::os::raw::c_uint =
    1651913316;
pub const kAudioHardwarePropertyBootChimeVolumeDecibelsToScalar: ::std::os::raw::c_uint =
    1650733686;
pub const kAudioHardwarePropertyBootChimeVolumeDecibelsToScalarTransferFunction:
    ::std::os::raw::c_uint = 1651930214;
pub type _bindgen_ty_320 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioHardwareAddRunLoopSource(inRunLoopSource: CFRunLoopSourceRef) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareRemoveRunLoopSource(inRunLoopSource: CFRunLoopSourceRef) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareGetPropertyInfo(
        inPropertyID: AudioHardwarePropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareGetProperty(
        inPropertyID: AudioHardwarePropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareSetProperty(
        inPropertyID: AudioHardwarePropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareAddPropertyListener(
        inPropertyID: AudioHardwarePropertyID,
        inProc: AudioHardwarePropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareRemovePropertyListener(
        inPropertyID: AudioHardwarePropertyID,
        inProc: AudioHardwarePropertyListenerProc,
    ) -> OSStatus;
}
pub type AudioDeviceID = AudioObjectID;
pub type AudioDevicePropertyID = AudioObjectPropertySelector;
pub type AudioDevicePropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inDevice: AudioDeviceID,
        inChannel: UInt32,
        isInput: Boolean,
        inPropertyID: AudioDevicePropertyID,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub const kAudioDeviceUnknown: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_321 = ::std::os::raw::c_uint;
pub const kAudioDeviceTransportTypeAutoAggregate: ::std::os::raw::c_uint = 1718055536;
pub type _bindgen_ty_322 = ::std::os::raw::c_uint;
pub const kAudioDevicePropertyVolumeDecibelsToScalarTransferFunction: ::std::os::raw::c_uint =
    1986229350;
pub const kAudioDevicePropertyPlayThruVolumeDecibelsToScalarTransferFunction:
    ::std::os::raw::c_uint = 1836479590;
pub const kAudioDevicePropertyDriverShouldOwniSub: ::std::os::raw::c_uint = 1769174370;
pub const kAudioDevicePropertySubVolumeDecibelsToScalarTransferFunction: ::std::os::raw::c_uint =
    1937142886;
pub type _bindgen_ty_323 = ::std::os::raw::c_uint;
pub const kAudioDevicePropertyDeviceName: ::std::os::raw::c_uint = 1851878757;
pub const kAudioDevicePropertyDeviceNameCFString: ::std::os::raw::c_uint = 1819173229;
pub const kAudioDevicePropertyDeviceManufacturer: ::std::os::raw::c_uint = 1835101042;
pub const kAudioDevicePropertyDeviceManufacturerCFString: ::std::os::raw::c_uint = 1819107691;
pub const kAudioDevicePropertyRegisterBufferList: ::std::os::raw::c_uint = 1919055206;
pub const kAudioDevicePropertyBufferSize: ::std::os::raw::c_uint = 1651730810;
pub const kAudioDevicePropertyBufferSizeRange: ::std::os::raw::c_uint = 1651735075;
pub const kAudioDevicePropertyChannelName: ::std::os::raw::c_uint = 1667788397;
pub const kAudioDevicePropertyChannelNameCFString: ::std::os::raw::c_uint = 1818454126;
pub const kAudioDevicePropertyChannelCategoryName: ::std::os::raw::c_uint = 1667460717;
pub const kAudioDevicePropertyChannelCategoryNameCFString: ::std::os::raw::c_uint = 1818452846;
pub const kAudioDevicePropertyChannelNumberName: ::std::os::raw::c_uint = 1668181613;
pub const kAudioDevicePropertyChannelNumberNameCFString: ::std::os::raw::c_uint = 1818455662;
pub const kAudioDevicePropertySupportsMixing: ::std::os::raw::c_uint = 1835628607;
pub const kAudioDevicePropertyStreamFormat: ::std::os::raw::c_uint = 1936092532;
pub const kAudioDevicePropertyStreamFormats: ::std::os::raw::c_uint = 1936092451;
pub const kAudioDevicePropertyStreamFormatSupported: ::std::os::raw::c_uint = 1936092479;
pub const kAudioDevicePropertyStreamFormatMatch: ::std::os::raw::c_uint = 1936092525;
pub const kAudioDevicePropertyDataSourceNameForID: ::std::os::raw::c_uint = 1936941934;
pub const kAudioDevicePropertyClockSourceNameForID: ::std::os::raw::c_uint = 1668506478;
pub const kAudioDevicePropertyPlayThruDestinationNameForID: ::std::os::raw::c_uint = 1835295854;
pub const kAudioDevicePropertyChannelNominalLineLevelNameForID: ::std::os::raw::c_uint = 1668181110;
pub const kAudioDevicePropertyHighPassFilterSettingNameForID: ::std::os::raw::c_uint = 1667787120;
pub type _bindgen_ty_324 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioDeviceAddIOProc(
        inDevice: AudioDeviceID,
        inProc: AudioDeviceIOProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceRemoveIOProc(inDevice: AudioDeviceID, inProc: AudioDeviceIOProc) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceRead(
        inDevice: AudioDeviceID,
        inStartTime: *const AudioTimeStamp,
        outData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceGetPropertyInfo(
        inDevice: AudioDeviceID,
        inChannel: UInt32,
        isInput: Boolean,
        inPropertyID: AudioDevicePropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceGetProperty(
        inDevice: AudioDeviceID,
        inChannel: UInt32,
        isInput: Boolean,
        inPropertyID: AudioDevicePropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceSetProperty(
        inDevice: AudioDeviceID,
        inWhen: *const AudioTimeStamp,
        inChannel: UInt32,
        isInput: Boolean,
        inPropertyID: AudioDevicePropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceAddPropertyListener(
        inDevice: AudioDeviceID,
        inChannel: UInt32,
        isInput: Boolean,
        inPropertyID: AudioDevicePropertyID,
        inProc: AudioDevicePropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioDeviceRemovePropertyListener(
        inDevice: AudioDeviceID,
        inChannel: UInt32,
        isInput: Boolean,
        inPropertyID: AudioDevicePropertyID,
        inProc: AudioDevicePropertyListenerProc,
    ) -> OSStatus;
}
pub type AudioStreamID = AudioObjectID;
pub type AudioStreamPropertyListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inStream: AudioStreamID,
        inChannel: UInt32,
        inPropertyID: AudioDevicePropertyID,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub const kAudioStreamUnknown: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_325 = ::std::os::raw::c_uint;
pub const kAudioStreamPropertyOwningDevice: ::std::os::raw::c_uint = 1937007734;
pub const kAudioStreamPropertyPhysicalFormats: ::std::os::raw::c_uint = 1885762595;
pub const kAudioStreamPropertyPhysicalFormatSupported: ::std::os::raw::c_uint = 1885762623;
pub const kAudioStreamPropertyPhysicalFormatMatch: ::std::os::raw::c_uint = 1885762669;
pub type _bindgen_ty_326 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioStreamGetPropertyInfo(
        inStream: AudioStreamID,
        inChannel: UInt32,
        inPropertyID: AudioDevicePropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioStreamGetProperty(
        inStream: AudioStreamID,
        inChannel: UInt32,
        inPropertyID: AudioDevicePropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioStreamSetProperty(
        inStream: AudioStreamID,
        inWhen: *const AudioTimeStamp,
        inChannel: UInt32,
        inPropertyID: AudioDevicePropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioStreamAddPropertyListener(
        inStream: AudioStreamID,
        inChannel: UInt32,
        inPropertyID: AudioDevicePropertyID,
        inProc: AudioStreamPropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioStreamRemovePropertyListener(
        inStream: AudioStreamID,
        inChannel: UInt32,
        inPropertyID: AudioDevicePropertyID,
        inProc: AudioStreamPropertyListenerProc,
    ) -> OSStatus;
}
pub const kAudioBootChimeVolumeControlClassID: ::std::os::raw::c_uint = 1886544237;
pub type _bindgen_ty_327 = ::std::os::raw::c_uint;
pub const kAudioControlPropertyVariant: ::std::os::raw::c_uint = 1668702578;
pub type _bindgen_ty_328 = ::std::os::raw::c_uint;
pub const kAudioClockSourceControlPropertyItemKind: ::std::os::raw::c_uint = 1668049771;
pub type _bindgen_ty_329 = ::std::os::raw::c_uint;
pub const kAudioHardwareServiceProperty_ServiceRestarted: ::std::os::raw::c_uint = 1936880500;
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterVolume: ::std::os::raw::c_uint =
    1986885219;
pub const kAudioHardwareServiceDeviceProperty_VirtualMasterBalance: ::std::os::raw::c_uint =
    1986880099;
pub type _bindgen_ty_330 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioHardwareServiceHasProperty(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
    ) -> Boolean;
}
extern "C" {
    pub fn AudioHardwareServiceIsPropertySettable(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        outIsSettable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareServiceGetPropertyDataSize(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inQualifierDataSize: UInt32,
        inQualifierData: *const ::std::os::raw::c_void,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareServiceGetPropertyData(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inQualifierDataSize: UInt32,
        inQualifierData: *const ::std::os::raw::c_void,
        ioDataSize: *mut UInt32,
        outData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareServiceSetPropertyData(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inQualifierDataSize: UInt32,
        inQualifierData: *const ::std::os::raw::c_void,
        inDataSize: UInt32,
        inData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareServiceAddPropertyListener(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inListener: AudioObjectPropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioHardwareServiceRemovePropertyListener(
        inObjectID: AudioObjectID,
        inAddress: *const AudioObjectPropertyAddress,
        inListener: AudioObjectPropertyListenerProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioServicesNoError: ::std::os::raw::c_int = 0;
pub const kAudioServicesUnsupportedPropertyError: ::std::os::raw::c_int = 1886681407;
pub const kAudioServicesBadPropertySizeError: ::std::os::raw::c_int = 561211770;
pub const kAudioServicesBadSpecifierSizeError: ::std::os::raw::c_int = 561213539;
pub const kAudioServicesSystemSoundUnspecifiedError: ::std::os::raw::c_int = -1500;
pub const kAudioServicesSystemSoundClientTimedOutError: ::std::os::raw::c_int = -1501;
pub const kAudioServicesSystemSoundExceededMaximumDurationError: ::std::os::raw::c_int = -1502;
pub type _bindgen_ty_331 = ::std::os::raw::c_int;
pub type SystemSoundID = UInt32;
pub type AudioServicesPropertyID = UInt32;
pub type AudioServicesSystemSoundCompletionProc = ::std::option::Option<
    unsafe extern "C" fn(ssID: SystemSoundID, clientData: *mut ::std::os::raw::c_void),
>;
pub const kSystemSoundID_UserPreferredAlert: ::std::os::raw::c_uint = 4096;
pub const kSystemSoundID_FlashScreen: ::std::os::raw::c_uint = 4094;
pub const kUserPreferredAlert: ::std::os::raw::c_uint = 4096;
pub type _bindgen_ty_332 = ::std::os::raw::c_uint;
pub const kSystemSoundID_Vibrate: ::std::os::raw::c_uint = 4095;
pub type _bindgen_ty_333 = ::std::os::raw::c_uint;
pub const kAudioServicesPropertyIsUISound: ::std::os::raw::c_uint = 1769174377;
pub const kAudioServicesPropertyCompletePlaybackIfAppDies: ::std::os::raw::c_uint = 1768318057;
pub type _bindgen_ty_334 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioServicesCreateSystemSoundID(
        inFileURL: CFURLRef,
        outSystemSoundID: *mut SystemSoundID,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesDisposeSystemSoundID(inSystemSoundID: SystemSoundID) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesPlayAlertSoundWithCompletion(
        inSystemSoundID: SystemSoundID,
        inCompletionBlock: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn AudioServicesPlaySystemSoundWithCompletion(
        inSystemSoundID: SystemSoundID,
        inCompletionBlock: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn AudioServicesGetPropertyInfo(
        inPropertyID: AudioServicesPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        outPropertyDataSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesGetProperty(
        inPropertyID: AudioServicesPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesSetProperty(
        inPropertyID: AudioServicesPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesPlayAlertSound(inSystemSoundID: SystemSoundID);
}
extern "C" {
    pub fn AudioServicesPlaySystemSound(inSystemSoundID: SystemSoundID);
}
extern "C" {
    pub fn AudioServicesAddSystemSoundCompletion(
        inSystemSoundID: SystemSoundID,
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inCompletionRoutine: AudioServicesSystemSoundCompletionProc,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioServicesRemoveSystemSoundCompletion(inSystemSoundID: SystemSoundID);
}
extern "C" {
    pub fn AudioWorkIntervalCreate(
        name: *const ::std::os::raw::c_char,
        clock: os_clockid_t,
        attr: os_workgroup_attr_t,
    ) -> os_workgroup_interval_t;
}
pub const kCAF_FileType: ::std::os::raw::c_uint = 1667327590;
pub const kCAF_FileVersion_Initial: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_335 = ::std::os::raw::c_uint;
pub const kCAF_StreamDescriptionChunkID: ::std::os::raw::c_uint = 1684370275;
pub const kCAF_AudioDataChunkID: ::std::os::raw::c_uint = 1684108385;
pub const kCAF_ChannelLayoutChunkID: ::std::os::raw::c_uint = 1667785070;
pub const kCAF_FillerChunkID: ::std::os::raw::c_uint = 1718773093;
pub const kCAF_MarkerChunkID: ::std::os::raw::c_uint = 1835102827;
pub const kCAF_RegionChunkID: ::std::os::raw::c_uint = 1919248238;
pub const kCAF_InstrumentChunkID: ::std::os::raw::c_uint = 1768846196;
pub const kCAF_MagicCookieID: ::std::os::raw::c_uint = 1802857321;
pub const kCAF_InfoStringsChunkID: ::std::os::raw::c_uint = 1768842863;
pub const kCAF_EditCommentsChunkID: ::std::os::raw::c_uint = 1701077876;
pub const kCAF_PacketTableChunkID: ::std::os::raw::c_uint = 1885432692;
pub const kCAF_StringsChunkID: ::std::os::raw::c_uint = 1937011303;
pub const kCAF_UUIDChunkID: ::std::os::raw::c_uint = 1970628964;
pub const kCAF_PeakChunkID: ::std::os::raw::c_uint = 1885692267;
pub const kCAF_OverviewChunkID: ::std::os::raw::c_uint = 1870034551;
pub const kCAF_MIDIChunkID: ::std::os::raw::c_uint = 1835623529;
pub const kCAF_UMIDChunkID: ::std::os::raw::c_uint = 1970104676;
pub const kCAF_FormatListID: ::std::os::raw::c_uint = 1818522467;
pub const kCAF_iXMLChunkID: ::std::os::raw::c_uint = 1767394636;
pub type _bindgen_ty_336 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFFileHeader {
    pub mFileType: UInt32,
    pub mFileVersion: UInt16,
    pub mFileFlags: UInt16,
}
#[test]
fn bindgen_test_layout_CAFFileHeader() {
    assert_eq!(
        ::std::mem::size_of::<CAFFileHeader>(),
        8usize,
        concat!("Size of: ", stringify!(CAFFileHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFFileHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFFileHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFFileHeader>())).mFileType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFFileHeader),
            "::",
            stringify!(mFileType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFFileHeader>())).mFileVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFFileHeader),
            "::",
            stringify!(mFileVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFFileHeader>())).mFileFlags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFFileHeader),
            "::",
            stringify!(mFileFlags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFChunkHeader {
    pub mChunkType: UInt32,
    pub mChunkSize: SInt64,
}
#[test]
fn bindgen_test_layout_CAFChunkHeader() {
    assert_eq!(
        ::std::mem::size_of::<CAFChunkHeader>(),
        12usize,
        concat!("Size of: ", stringify!(CAFChunkHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFChunkHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFChunkHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFChunkHeader>())).mChunkType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFChunkHeader),
            "::",
            stringify!(mChunkType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFChunkHeader>())).mChunkSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFChunkHeader),
            "::",
            stringify!(mChunkSize)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAF_UUID_ChunkHeader {
    pub mHeader: CAFChunkHeader,
    pub mUUID: [UInt8; 16usize],
}
#[test]
fn bindgen_test_layout_CAF_UUID_ChunkHeader() {
    assert_eq!(
        ::std::mem::size_of::<CAF_UUID_ChunkHeader>(),
        28usize,
        concat!("Size of: ", stringify!(CAF_UUID_ChunkHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<CAF_UUID_ChunkHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(CAF_UUID_ChunkHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAF_UUID_ChunkHeader>())).mHeader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_UUID_ChunkHeader),
            "::",
            stringify!(mHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAF_UUID_ChunkHeader>())).mUUID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_UUID_ChunkHeader),
            "::",
            stringify!(mUUID)
        )
    );
}
pub type CAFFormatFlags = UInt32;
pub const kCAFLinearPCMFormatFlagIsFloat: ::std::os::raw::c_uint = 1;
pub const kCAFLinearPCMFormatFlagIsLittleEndian: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_337 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFAudioDescription {
    pub mSampleRate: Float64,
    pub mFormatID: UInt32,
    pub mFormatFlags: CAFFormatFlags,
    pub mBytesPerPacket: UInt32,
    pub mFramesPerPacket: UInt32,
    pub mChannelsPerFrame: UInt32,
    pub mBitsPerChannel: UInt32,
}
#[test]
fn bindgen_test_layout_CAFAudioDescription() {
    assert_eq!(
        ::std::mem::size_of::<CAFAudioDescription>(),
        32usize,
        concat!("Size of: ", stringify!(CAFAudioDescription))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFAudioDescription>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFAudioDescription))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFAudioDescription>())).mSampleRate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mSampleRate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFAudioDescription>())).mFormatID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mFormatID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFAudioDescription>())).mFormatFlags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mFormatFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFAudioDescription>())).mBytesPerPacket as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mBytesPerPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFAudioDescription>())).mFramesPerPacket as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mFramesPerPacket)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFAudioDescription>())).mChannelsPerFrame as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mChannelsPerFrame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFAudioDescription>())).mBitsPerChannel as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioDescription),
            "::",
            stringify!(mBitsPerChannel)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFAudioFormatListItem {
    pub mFormat: CAFAudioDescription,
    pub mChannelLayoutTag: UInt32,
}
#[test]
fn bindgen_test_layout_CAFAudioFormatListItem() {
    assert_eq!(
        ::std::mem::size_of::<CAFAudioFormatListItem>(),
        36usize,
        concat!("Size of: ", stringify!(CAFAudioFormatListItem))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFAudioFormatListItem>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFAudioFormatListItem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFAudioFormatListItem>())).mFormat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioFormatListItem),
            "::",
            stringify!(mFormat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFAudioFormatListItem>())).mChannelLayoutTag as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFAudioFormatListItem),
            "::",
            stringify!(mChannelLayoutTag)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFPacketTableHeader {
    pub mNumberPackets: SInt64,
    pub mNumberValidFrames: SInt64,
    pub mPrimingFrames: SInt32,
    pub mRemainderFrames: SInt32,
    pub mPacketDescriptions: [UInt8; 1usize],
}
#[test]
fn bindgen_test_layout_CAFPacketTableHeader() {
    assert_eq!(
        ::std::mem::size_of::<CAFPacketTableHeader>(),
        25usize,
        concat!("Size of: ", stringify!(CAFPacketTableHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFPacketTableHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFPacketTableHeader))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFPacketTableHeader>())).mNumberPackets as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPacketTableHeader),
            "::",
            stringify!(mNumberPackets)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFPacketTableHeader>())).mNumberValidFrames as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPacketTableHeader),
            "::",
            stringify!(mNumberValidFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFPacketTableHeader>())).mPrimingFrames as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPacketTableHeader),
            "::",
            stringify!(mPrimingFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFPacketTableHeader>())).mRemainderFrames as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPacketTableHeader),
            "::",
            stringify!(mRemainderFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFPacketTableHeader>())).mPacketDescriptions as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPacketTableHeader),
            "::",
            stringify!(mPacketDescriptions)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFDataChunk {
    pub mEditCount: UInt32,
    pub mData: [UInt8; 1usize],
}
#[test]
fn bindgen_test_layout_CAFDataChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFDataChunk>(),
        5usize,
        concat!("Size of: ", stringify!(CAFDataChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFDataChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFDataChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFDataChunk>())).mEditCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFDataChunk),
            "::",
            stringify!(mEditCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFDataChunk>())).mData as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFDataChunk),
            "::",
            stringify!(mData)
        )
    );
}
pub const kCAFMarkerType_Generic: ::std::os::raw::c_uint = 0;
pub const kCAFMarkerType_ProgramStart: ::std::os::raw::c_uint = 1885496679;
pub const kCAFMarkerType_ProgramEnd: ::std::os::raw::c_uint = 1885695588;
pub const kCAFMarkerType_TrackStart: ::std::os::raw::c_uint = 1952605543;
pub const kCAFMarkerType_TrackEnd: ::std::os::raw::c_uint = 1952804452;
pub const kCAFMarkerType_Index: ::std::os::raw::c_uint = 1768842360;
pub const kCAFMarkerType_RegionStart: ::std::os::raw::c_uint = 1919051111;
pub const kCAFMarkerType_RegionEnd: ::std::os::raw::c_uint = 1919250020;
pub const kCAFMarkerType_RegionSyncPoint: ::std::os::raw::c_uint = 1920170339;
pub const kCAFMarkerType_SelectionStart: ::std::os::raw::c_uint = 1935828327;
pub const kCAFMarkerType_SelectionEnd: ::std::os::raw::c_uint = 1936027236;
pub const kCAFMarkerType_EditSourceBegin: ::std::os::raw::c_uint = 1667392871;
pub const kCAFMarkerType_EditSourceEnd: ::std::os::raw::c_uint = 1667591780;
pub const kCAFMarkerType_EditDestinationBegin: ::std::os::raw::c_uint = 1684170087;
pub const kCAFMarkerType_EditDestinationEnd: ::std::os::raw::c_uint = 1684368996;
pub const kCAFMarkerType_SustainLoopStart: ::std::os::raw::c_uint = 1936482919;
pub const kCAFMarkerType_SustainLoopEnd: ::std::os::raw::c_uint = 1936483694;
pub const kCAFMarkerType_ReleaseLoopStart: ::std::os::raw::c_uint = 1919705703;
pub const kCAFMarkerType_ReleaseLoopEnd: ::std::os::raw::c_uint = 1919706478;
pub const kCAFMarkerType_SavedPlayPosition: ::std::os::raw::c_uint = 1936747641;
pub const kCAFMarkerType_Tempo: ::std::os::raw::c_uint = 1953329263;
pub const kCAFMarkerType_TimeSignature: ::std::os::raw::c_uint = 1953720679;
pub const kCAFMarkerType_KeySignature: ::std::os::raw::c_uint = 1802725735;
pub type _bindgen_ty_338 = ::std::os::raw::c_uint;
pub const kCAF_SMPTE_TimeTypeNone: ::std::os::raw::c_uint = 0;
pub const kCAF_SMPTE_TimeType24: ::std::os::raw::c_uint = 1;
pub const kCAF_SMPTE_TimeType25: ::std::os::raw::c_uint = 2;
pub const kCAF_SMPTE_TimeType30Drop: ::std::os::raw::c_uint = 3;
pub const kCAF_SMPTE_TimeType30: ::std::os::raw::c_uint = 4;
pub const kCAF_SMPTE_TimeType2997: ::std::os::raw::c_uint = 5;
pub const kCAF_SMPTE_TimeType2997Drop: ::std::os::raw::c_uint = 6;
pub const kCAF_SMPTE_TimeType60: ::std::os::raw::c_uint = 7;
pub const kCAF_SMPTE_TimeType5994: ::std::os::raw::c_uint = 8;
pub const kCAF_SMPTE_TimeType60Drop: ::std::os::raw::c_uint = 9;
pub const kCAF_SMPTE_TimeType5994Drop: ::std::os::raw::c_uint = 10;
pub const kCAF_SMPTE_TimeType50: ::std::os::raw::c_uint = 11;
pub const kCAF_SMPTE_TimeType2398: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_339 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAF_SMPTE_Time {
    pub mHours: SInt8,
    pub mMinutes: SInt8,
    pub mSeconds: SInt8,
    pub mFrames: SInt8,
    pub mSubFrameSampleOffset: UInt32,
}
#[test]
fn bindgen_test_layout_CAF_SMPTE_Time() {
    assert_eq!(
        ::std::mem::size_of::<CAF_SMPTE_Time>(),
        8usize,
        concat!("Size of: ", stringify!(CAF_SMPTE_Time))
    );
    assert_eq!(
        ::std::mem::align_of::<CAF_SMPTE_Time>(),
        1usize,
        concat!("Alignment of ", stringify!(CAF_SMPTE_Time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAF_SMPTE_Time>())).mHours as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_SMPTE_Time),
            "::",
            stringify!(mHours)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAF_SMPTE_Time>())).mMinutes as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_SMPTE_Time),
            "::",
            stringify!(mMinutes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAF_SMPTE_Time>())).mSeconds as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_SMPTE_Time),
            "::",
            stringify!(mSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAF_SMPTE_Time>())).mFrames as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_SMPTE_Time),
            "::",
            stringify!(mFrames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAF_SMPTE_Time>())).mSubFrameSampleOffset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAF_SMPTE_Time),
            "::",
            stringify!(mSubFrameSampleOffset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFMarker {
    pub mType: UInt32,
    pub mFramePosition: Float64,
    pub mMarkerID: UInt32,
    pub mSMPTETime: CAF_SMPTE_Time,
    pub mChannel: UInt32,
}
#[test]
fn bindgen_test_layout_CAFMarker() {
    assert_eq!(
        ::std::mem::size_of::<CAFMarker>(),
        28usize,
        concat!("Size of: ", stringify!(CAFMarker))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFMarker>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFMarker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarker>())).mType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarker),
            "::",
            stringify!(mType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarker>())).mFramePosition as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarker),
            "::",
            stringify!(mFramePosition)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarker>())).mMarkerID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarker),
            "::",
            stringify!(mMarkerID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarker>())).mSMPTETime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarker),
            "::",
            stringify!(mSMPTETime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarker>())).mChannel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarker),
            "::",
            stringify!(mChannel)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFMarkerChunk {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [CAFMarker; 1usize],
}
#[test]
fn bindgen_test_layout_CAFMarkerChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFMarkerChunk>(),
        36usize,
        concat!("Size of: ", stringify!(CAFMarkerChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFMarkerChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFMarkerChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarkerChunk>())).mSMPTE_TimeType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarkerChunk),
            "::",
            stringify!(mSMPTE_TimeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarkerChunk>())).mNumberMarkers as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarkerChunk),
            "::",
            stringify!(mNumberMarkers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFMarkerChunk>())).mMarkers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFMarkerChunk),
            "::",
            stringify!(mMarkers)
        )
    );
}
pub type CAFRegionFlags = UInt32;
pub const kCAFRegionFlag_LoopEnable: ::std::os::raw::c_uint = 1;
pub const kCAFRegionFlag_PlayForward: ::std::os::raw::c_uint = 2;
pub const kCAFRegionFlag_PlayBackward: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_340 = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFRegion {
    pub mRegionID: UInt32,
    pub mFlags: CAFRegionFlags,
    pub mNumberMarkers: UInt32,
    pub mMarkers: [CAFMarker; 1usize],
}
#[test]
fn bindgen_test_layout_CAFRegion() {
    assert_eq!(
        ::std::mem::size_of::<CAFRegion>(),
        40usize,
        concat!("Size of: ", stringify!(CAFRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFRegion>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFRegion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegion>())).mRegionID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegion),
            "::",
            stringify!(mRegionID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegion>())).mFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegion),
            "::",
            stringify!(mFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegion>())).mNumberMarkers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegion),
            "::",
            stringify!(mNumberMarkers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegion>())).mMarkers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegion),
            "::",
            stringify!(mMarkers)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFRegionChunk {
    pub mSMPTE_TimeType: UInt32,
    pub mNumberRegions: UInt32,
    pub mRegions: [CAFRegion; 1usize],
}
#[test]
fn bindgen_test_layout_CAFRegionChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFRegionChunk>(),
        48usize,
        concat!("Size of: ", stringify!(CAFRegionChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFRegionChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFRegionChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegionChunk>())).mSMPTE_TimeType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegionChunk),
            "::",
            stringify!(mSMPTE_TimeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegionChunk>())).mNumberRegions as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegionChunk),
            "::",
            stringify!(mNumberRegions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFRegionChunk>())).mRegions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFRegionChunk),
            "::",
            stringify!(mRegions)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFInstrumentChunk {
    pub mBaseNote: Float32,
    pub mMIDILowNote: UInt8,
    pub mMIDIHighNote: UInt8,
    pub mMIDILowVelocity: UInt8,
    pub mMIDIHighVelocity: UInt8,
    pub mdBGain: Float32,
    pub mStartRegionID: UInt32,
    pub mSustainRegionID: UInt32,
    pub mReleaseRegionID: UInt32,
    pub mInstrumentID: UInt32,
}
#[test]
fn bindgen_test_layout_CAFInstrumentChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFInstrumentChunk>(),
        28usize,
        concat!("Size of: ", stringify!(CAFInstrumentChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFInstrumentChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFInstrumentChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFInstrumentChunk>())).mBaseNote as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mBaseNote)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFInstrumentChunk>())).mMIDILowNote as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mMIDILowNote)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mMIDIHighNote as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mMIDIHighNote)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mMIDILowVelocity as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mMIDILowVelocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mMIDIHighVelocity as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mMIDIHighVelocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFInstrumentChunk>())).mdBGain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mdBGain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mStartRegionID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mStartRegionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mSustainRegionID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mSustainRegionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mReleaseRegionID as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mReleaseRegionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFInstrumentChunk>())).mInstrumentID as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInstrumentChunk),
            "::",
            stringify!(mInstrumentID)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFStringID {
    pub mStringID: UInt32,
    pub mStringStartByteOffset: SInt64,
}
#[test]
fn bindgen_test_layout_CAFStringID() {
    assert_eq!(
        ::std::mem::size_of::<CAFStringID>(),
        12usize,
        concat!("Size of: ", stringify!(CAFStringID))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFStringID>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFStringID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFStringID>())).mStringID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFStringID),
            "::",
            stringify!(mStringID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFStringID>())).mStringStartByteOffset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFStringID),
            "::",
            stringify!(mStringStartByteOffset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFStrings {
    pub mNumEntries: UInt32,
    pub mStringsIDs: [CAFStringID; 1usize],
}
#[test]
fn bindgen_test_layout_CAFStrings() {
    assert_eq!(
        ::std::mem::size_of::<CAFStrings>(),
        16usize,
        concat!("Size of: ", stringify!(CAFStrings))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFStrings>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFStrings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFStrings>())).mNumEntries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFStrings),
            "::",
            stringify!(mNumEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFStrings>())).mStringsIDs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFStrings),
            "::",
            stringify!(mStringsIDs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFInfoStrings {
    pub mNumEntries: UInt32,
}
#[test]
fn bindgen_test_layout_CAFInfoStrings() {
    assert_eq!(
        ::std::mem::size_of::<CAFInfoStrings>(),
        4usize,
        concat!("Size of: ", stringify!(CAFInfoStrings))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFInfoStrings>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFInfoStrings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFInfoStrings>())).mNumEntries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFInfoStrings),
            "::",
            stringify!(mNumEntries)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFPositionPeak {
    pub mValue: Float32,
    pub mFrameNumber: UInt64,
}
#[test]
fn bindgen_test_layout_CAFPositionPeak() {
    assert_eq!(
        ::std::mem::size_of::<CAFPositionPeak>(),
        12usize,
        concat!("Size of: ", stringify!(CAFPositionPeak))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFPositionPeak>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFPositionPeak))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFPositionPeak>())).mValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPositionPeak),
            "::",
            stringify!(mValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFPositionPeak>())).mFrameNumber as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPositionPeak),
            "::",
            stringify!(mFrameNumber)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFPeakChunk {
    pub mEditCount: UInt32,
    pub mPeaks: [CAFPositionPeak; 1usize],
}
#[test]
fn bindgen_test_layout_CAFPeakChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFPeakChunk>(),
        16usize,
        concat!("Size of: ", stringify!(CAFPeakChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFPeakChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFPeakChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFPeakChunk>())).mEditCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPeakChunk),
            "::",
            stringify!(mEditCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFPeakChunk>())).mPeaks as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFPeakChunk),
            "::",
            stringify!(mPeaks)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFOverviewSample {
    pub mMinValue: SInt16,
    pub mMaxValue: SInt16,
}
#[test]
fn bindgen_test_layout_CAFOverviewSample() {
    assert_eq!(
        ::std::mem::size_of::<CAFOverviewSample>(),
        4usize,
        concat!("Size of: ", stringify!(CAFOverviewSample))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFOverviewSample>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFOverviewSample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFOverviewSample>())).mMinValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFOverviewSample),
            "::",
            stringify!(mMinValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFOverviewSample>())).mMaxValue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFOverviewSample),
            "::",
            stringify!(mMaxValue)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAFOverviewChunk {
    pub mEditCount: UInt32,
    pub mNumFramesPerOVWSample: UInt32,
    pub mData: [CAFOverviewSample; 1usize],
}
#[test]
fn bindgen_test_layout_CAFOverviewChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFOverviewChunk>(),
        12usize,
        concat!("Size of: ", stringify!(CAFOverviewChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFOverviewChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFOverviewChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFOverviewChunk>())).mEditCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFOverviewChunk),
            "::",
            stringify!(mEditCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAFOverviewChunk>())).mNumFramesPerOVWSample as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFOverviewChunk),
            "::",
            stringify!(mNumFramesPerOVWSample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFOverviewChunk>())).mData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFOverviewChunk),
            "::",
            stringify!(mData)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct CAFUMIDChunk {
    pub mBytes: [UInt8; 64usize],
}
#[test]
fn bindgen_test_layout_CAFUMIDChunk() {
    assert_eq!(
        ::std::mem::size_of::<CAFUMIDChunk>(),
        64usize,
        concat!("Size of: ", stringify!(CAFUMIDChunk))
    );
    assert_eq!(
        ::std::mem::align_of::<CAFUMIDChunk>(),
        1usize,
        concat!("Alignment of ", stringify!(CAFUMIDChunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAFUMIDChunk>())).mBytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAFUMIDChunk),
            "::",
            stringify!(mBytes)
        )
    );
}
impl Default for CAFUMIDChunk {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn CAShow(inObject: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn CAShowFile(inObject: *mut ::std::os::raw::c_void, inFile: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueExtAudioFile {
    _unused: [u8; 0],
}
pub type ExtAudioFileRef = *mut OpaqueExtAudioFile;
pub type ExtAudioFilePacketTableInfoOverride = SInt32;
pub const kExtAudioFilePacketTableInfoOverride_UseFileValue: ::std::os::raw::c_int = -1;
pub const kExtAudioFilePacketTableInfoOverride_UseFileValueIfValid: ::std::os::raw::c_int = -2;
pub type _bindgen_ty_341 = ::std::os::raw::c_int;
pub type ExtAudioFilePropertyID = UInt32;
pub const kExtAudioFileProperty_FileDataFormat: ::std::os::raw::c_uint = 1717988724;
pub const kExtAudioFileProperty_FileChannelLayout: ::std::os::raw::c_uint = 1717791855;
pub const kExtAudioFileProperty_ClientDataFormat: ::std::os::raw::c_uint = 1667657076;
pub const kExtAudioFileProperty_ClientChannelLayout: ::std::os::raw::c_uint = 1667460207;
pub const kExtAudioFileProperty_CodecManufacturer: ::std::os::raw::c_uint = 1668112750;
pub const kExtAudioFileProperty_AudioConverter: ::std::os::raw::c_uint = 1633906294;
pub const kExtAudioFileProperty_AudioFile: ::std::os::raw::c_uint = 1634101612;
pub const kExtAudioFileProperty_FileMaxPacketSize: ::std::os::raw::c_uint = 1718448243;
pub const kExtAudioFileProperty_ClientMaxPacketSize: ::std::os::raw::c_uint = 1668116595;
pub const kExtAudioFileProperty_FileLengthFrames: ::std::os::raw::c_uint = 593916525;
pub const kExtAudioFileProperty_ConverterConfig: ::std::os::raw::c_uint = 1633903462;
pub const kExtAudioFileProperty_IOBufferSizeBytes: ::std::os::raw::c_uint = 1768907379;
pub const kExtAudioFileProperty_IOBuffer: ::std::os::raw::c_uint = 1768907366;
pub const kExtAudioFileProperty_PacketTable: ::std::os::raw::c_uint = 2020635753;
pub type _bindgen_ty_342 = ::std::os::raw::c_uint;
pub const kExtAudioFileError_InvalidProperty: ::std::os::raw::c_int = -66561;
pub const kExtAudioFileError_InvalidPropertySize: ::std::os::raw::c_int = -66562;
pub const kExtAudioFileError_NonPCMClientFormat: ::std::os::raw::c_int = -66563;
pub const kExtAudioFileError_InvalidChannelMap: ::std::os::raw::c_int = -66564;
pub const kExtAudioFileError_InvalidOperationOrder: ::std::os::raw::c_int = -66565;
pub const kExtAudioFileError_InvalidDataFormat: ::std::os::raw::c_int = -66566;
pub const kExtAudioFileError_MaxPacketSizeUnknown: ::std::os::raw::c_int = -66567;
pub const kExtAudioFileError_InvalidSeek: ::std::os::raw::c_int = -66568;
pub const kExtAudioFileError_AsyncWriteTooLarge: ::std::os::raw::c_int = -66569;
pub const kExtAudioFileError_AsyncWriteBufferOverflow: ::std::os::raw::c_int = -66570;
pub type _bindgen_ty_343 = ::std::os::raw::c_int;
extern "C" {
    pub fn ExtAudioFileOpenURL(inURL: CFURLRef, outExtAudioFile: *mut ExtAudioFileRef) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileWrapAudioFileID(
        inFileID: AudioFileID,
        inForWriting: Boolean,
        outExtAudioFile: *mut ExtAudioFileRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileCreateWithURL(
        inURL: CFURLRef,
        inFileType: AudioFileTypeID,
        inStreamDesc: *const AudioStreamBasicDescription,
        inChannelLayout: *const AudioChannelLayout,
        inFlags: UInt32,
        outExtAudioFile: *mut ExtAudioFileRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileOpen(
        inFSRef: *const FSRef,
        outExtAudioFile: *mut ExtAudioFileRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileCreateNew(
        inParentDir: *const FSRef,
        inFileName: CFStringRef,
        inFileType: AudioFileTypeID,
        inStreamDesc: *const AudioStreamBasicDescription,
        inChannelLayout: *const AudioChannelLayout,
        outExtAudioFile: *mut ExtAudioFileRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileDispose(inExtAudioFile: ExtAudioFileRef) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileRead(
        inExtAudioFile: ExtAudioFileRef,
        ioNumberFrames: *mut UInt32,
        ioData: *mut AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileWrite(
        inExtAudioFile: ExtAudioFileRef,
        inNumberFrames: UInt32,
        ioData: *const AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileWriteAsync(
        inExtAudioFile: ExtAudioFileRef,
        inNumberFrames: UInt32,
        ioData: *const AudioBufferList,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileSeek(inExtAudioFile: ExtAudioFileRef, inFrameOffset: SInt64) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileTell(
        inExtAudioFile: ExtAudioFileRef,
        outFrameOffset: *mut SInt64,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileGetPropertyInfo(
        inExtAudioFile: ExtAudioFileRef,
        inPropertyID: ExtAudioFilePropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileGetProperty(
        inExtAudioFile: ExtAudioFileRef,
        inPropertyID: ExtAudioFilePropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn ExtAudioFileSetProperty(
        inExtAudioFile: ExtAudioFileRef,
        inPropertyID: ExtAudioFilePropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kMIDIInvalidClient: ::std::os::raw::c_int = -10830;
pub const kMIDIInvalidPort: ::std::os::raw::c_int = -10831;
pub const kMIDIWrongEndpointType: ::std::os::raw::c_int = -10832;
pub const kMIDINoConnection: ::std::os::raw::c_int = -10833;
pub const kMIDIUnknownEndpoint: ::std::os::raw::c_int = -10834;
pub const kMIDIUnknownProperty: ::std::os::raw::c_int = -10835;
pub const kMIDIWrongPropertyType: ::std::os::raw::c_int = -10836;
pub const kMIDINoCurrentSetup: ::std::os::raw::c_int = -10837;
pub const kMIDIMessageSendErr: ::std::os::raw::c_int = -10838;
pub const kMIDIServerStartErr: ::std::os::raw::c_int = -10839;
pub const kMIDISetupFormatErr: ::std::os::raw::c_int = -10840;
pub const kMIDIWrongThread: ::std::os::raw::c_int = -10841;
pub const kMIDIObjectNotFound: ::std::os::raw::c_int = -10842;
pub const kMIDIIDNotUnique: ::std::os::raw::c_int = -10843;
pub const kMIDINotPermitted: ::std::os::raw::c_int = -10844;
pub const kMIDIUnknownError: ::std::os::raw::c_int = -10845;
pub type _bindgen_ty_344 = ::std::os::raw::c_int;
pub type MIDIObjectRef = UInt32;
pub type MIDIClientRef = MIDIObjectRef;
pub type MIDIPortRef = MIDIObjectRef;
pub type MIDIDeviceRef = MIDIObjectRef;
pub type MIDIEntityRef = MIDIObjectRef;
pub type MIDIEndpointRef = MIDIObjectRef;
pub type MIDITimeStamp = UInt64;
pub type MIDIObjectType = SInt32;
pub const kMIDIObjectType_Other: ::std::os::raw::c_int = -1;
pub const kMIDIObjectType_Device: ::std::os::raw::c_int = 0;
pub const kMIDIObjectType_Entity: ::std::os::raw::c_int = 1;
pub const kMIDIObjectType_Source: ::std::os::raw::c_int = 2;
pub const kMIDIObjectType_Destination: ::std::os::raw::c_int = 3;
pub const kMIDIObjectType_ExternalDevice: ::std::os::raw::c_int = 16;
pub const kMIDIObjectType_ExternalEntity: ::std::os::raw::c_int = 17;
pub const kMIDIObjectType_ExternalSource: ::std::os::raw::c_int = 18;
pub const kMIDIObjectType_ExternalDestination: ::std::os::raw::c_int = 19;
pub type _bindgen_ty_345 = ::std::os::raw::c_int;
pub const kMIDIObjectType_ExternalMask: MIDIObjectType = 16;
pub type MIDIUniqueID = SInt32;
pub const kMIDIInvalidUniqueID: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_346 = ::std::os::raw::c_uint;
pub type MIDIProtocolID = SInt32;
pub const kMIDIProtocol_1_0: ::std::os::raw::c_uint = 1;
pub const kMIDIProtocol_2_0: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_347 = ::std::os::raw::c_uint;
pub type MIDINotifyProc = ::std::option::Option<
    unsafe extern "C" fn(message: *const MIDINotification, refCon: *mut ::std::os::raw::c_void),
>;
pub type MIDINotifyBlock = *mut ::std::os::raw::c_void;
pub type MIDIReceiveBlock = *mut ::std::os::raw::c_void;
pub type MIDIReadProc = ::std::option::Option<
    unsafe extern "C" fn(
        pktlist: *const MIDIPacketList,
        readProcRefCon: *mut ::std::os::raw::c_void,
        srcConnRefCon: *mut ::std::os::raw::c_void,
    ),
>;
pub type MIDIReadBlock = *mut ::std::os::raw::c_void;
pub type MIDICompletionProc =
    ::std::option::Option<unsafe extern "C" fn(request: *mut MIDISysexSendRequest)>;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct MIDIEventPacket {
    pub timeStamp: MIDITimeStamp,
    pub wordCount: UInt32,
    pub words: [UInt32; 64usize],
}
#[test]
fn bindgen_test_layout_MIDIEventPacket() {
    assert_eq!(
        ::std::mem::size_of::<MIDIEventPacket>(),
        268usize,
        concat!("Size of: ", stringify!(MIDIEventPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIEventPacket>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIEventPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIEventPacket>())).timeStamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIEventPacket),
            "::",
            stringify!(timeStamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIEventPacket>())).wordCount as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIEventPacket),
            "::",
            stringify!(wordCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIEventPacket>())).words as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIEventPacket),
            "::",
            stringify!(words)
        )
    );
}
impl Default for MIDIEventPacket {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIEventList {
    pub protocol: MIDIProtocolID,
    pub numPackets: UInt32,
    pub packet: [MIDIEventPacket; 1usize],
}
#[test]
fn bindgen_test_layout_MIDIEventList() {
    assert_eq!(
        ::std::mem::size_of::<MIDIEventList>(),
        276usize,
        concat!("Size of: ", stringify!(MIDIEventList))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIEventList>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIEventList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIEventList>())).protocol as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIEventList),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIEventList>())).numPackets as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIEventList),
            "::",
            stringify!(numPackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIEventList>())).packet as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIEventList),
            "::",
            stringify!(packet)
        )
    );
}
impl Default for MIDIEventList {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct MIDIPacket {
    pub timeStamp: MIDITimeStamp,
    pub length: UInt16,
    pub data: [Byte; 256usize],
}
#[test]
fn bindgen_test_layout_MIDIPacket() {
    assert_eq!(
        ::std::mem::size_of::<MIDIPacket>(),
        268usize,
        concat!("Size of: ", stringify!(MIDIPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIPacket>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIPacket>())).timeStamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIPacket),
            "::",
            stringify!(timeStamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIPacket>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIPacket),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIPacket>())).data as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIPacket),
            "::",
            stringify!(data)
        )
    );
}
impl Default for MIDIPacket {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MIDIPacketList {
    pub numPackets: UInt32,
    pub packet: [MIDIPacket; 1usize],
}
#[test]
fn bindgen_test_layout_MIDIPacketList() {
    assert_eq!(
        ::std::mem::size_of::<MIDIPacketList>(),
        272usize,
        concat!("Size of: ", stringify!(MIDIPacketList))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIPacketList>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIPacketList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIPacketList>())).numPackets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIPacketList),
            "::",
            stringify!(numPackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIPacketList>())).packet as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIPacketList),
            "::",
            stringify!(packet)
        )
    );
}
impl Default for MIDIPacketList {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDISysexSendRequest {
    pub destination: MIDIEndpointRef,
    pub data: *const Byte,
    pub bytesToSend: UInt32,
    pub complete: Boolean,
    pub reserved: [Byte; 3usize],
    pub completionProc: MIDICompletionProc,
    pub completionRefCon: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MIDISysexSendRequest() {
    assert_eq!(
        ::std::mem::size_of::<MIDISysexSendRequest>(),
        40usize,
        concat!("Size of: ", stringify!(MIDISysexSendRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDISysexSendRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(MIDISysexSendRequest))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDISysexSendRequest>())).destination as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(destination)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDISysexSendRequest>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDISysexSendRequest>())).bytesToSend as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(bytesToSend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDISysexSendRequest>())).complete as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDISysexSendRequest>())).reserved as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDISysexSendRequest>())).completionProc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(completionProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDISysexSendRequest>())).completionRefCon as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDISysexSendRequest),
            "::",
            stringify!(completionRefCon)
        )
    );
}
impl Default for MIDISysexSendRequest {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type MIDINotificationMessageID = SInt32;
pub const kMIDIMsgSetupChanged: ::std::os::raw::c_uint = 1;
pub const kMIDIMsgObjectAdded: ::std::os::raw::c_uint = 2;
pub const kMIDIMsgObjectRemoved: ::std::os::raw::c_uint = 3;
pub const kMIDIMsgPropertyChanged: ::std::os::raw::c_uint = 4;
pub const kMIDIMsgThruConnectionsChanged: ::std::os::raw::c_uint = 5;
pub const kMIDIMsgSerialPortOwnerChanged: ::std::os::raw::c_uint = 6;
pub const kMIDIMsgIOError: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_348 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDINotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
}
#[test]
fn bindgen_test_layout_MIDINotification() {
    assert_eq!(
        ::std::mem::size_of::<MIDINotification>(),
        8usize,
        concat!("Size of: ", stringify!(MIDINotification))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDINotification>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDINotification))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINotification>())).messageID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINotification),
            "::",
            stringify!(messageID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINotification>())).messageSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINotification),
            "::",
            stringify!(messageSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDIObjectAddRemoveNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub parent: MIDIObjectRef,
    pub parentType: MIDIObjectType,
    pub child: MIDIObjectRef,
    pub childType: MIDIObjectType,
}
#[test]
fn bindgen_test_layout_MIDIObjectAddRemoveNotification() {
    assert_eq!(
        ::std::mem::size_of::<MIDIObjectAddRemoveNotification>(),
        24usize,
        concat!("Size of: ", stringify!(MIDIObjectAddRemoveNotification))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIObjectAddRemoveNotification>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIObjectAddRemoveNotification))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectAddRemoveNotification>())).messageID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectAddRemoveNotification),
            "::",
            stringify!(messageID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectAddRemoveNotification>())).messageSize as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectAddRemoveNotification),
            "::",
            stringify!(messageSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectAddRemoveNotification>())).parent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectAddRemoveNotification),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectAddRemoveNotification>())).parentType as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectAddRemoveNotification),
            "::",
            stringify!(parentType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectAddRemoveNotification>())).child as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectAddRemoveNotification),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectAddRemoveNotification>())).childType as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectAddRemoveNotification),
            "::",
            stringify!(childType)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIDIObjectPropertyChangeNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub object: MIDIObjectRef,
    pub objectType: MIDIObjectType,
    pub propertyName: CFStringRef,
}
#[test]
fn bindgen_test_layout_MIDIObjectPropertyChangeNotification() {
    assert_eq!(
        ::std::mem::size_of::<MIDIObjectPropertyChangeNotification>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(MIDIObjectPropertyChangeNotification)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIObjectPropertyChangeNotification>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(MIDIObjectPropertyChangeNotification)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectPropertyChangeNotification>())).messageID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectPropertyChangeNotification),
            "::",
            stringify!(messageID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectPropertyChangeNotification>())).messageSize as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectPropertyChangeNotification),
            "::",
            stringify!(messageSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectPropertyChangeNotification>())).object as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectPropertyChangeNotification),
            "::",
            stringify!(object)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectPropertyChangeNotification>())).objectType as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectPropertyChangeNotification),
            "::",
            stringify!(objectType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIObjectPropertyChangeNotification>())).propertyName
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIObjectPropertyChangeNotification),
            "::",
            stringify!(propertyName)
        )
    );
}
impl Default for MIDIObjectPropertyChangeNotification {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDIIOErrorNotification {
    pub messageID: MIDINotificationMessageID,
    pub messageSize: UInt32,
    pub driverDevice: MIDIDeviceRef,
    pub errorCode: OSStatus,
}
#[test]
fn bindgen_test_layout_MIDIIOErrorNotification() {
    assert_eq!(
        ::std::mem::size_of::<MIDIIOErrorNotification>(),
        16usize,
        concat!("Size of: ", stringify!(MIDIIOErrorNotification))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIIOErrorNotification>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIIOErrorNotification))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIIOErrorNotification>())).messageID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIIOErrorNotification),
            "::",
            stringify!(messageID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIIOErrorNotification>())).messageSize as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIIOErrorNotification),
            "::",
            stringify!(messageSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIIOErrorNotification>())).driverDevice as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIIOErrorNotification),
            "::",
            stringify!(driverDevice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MIDIIOErrorNotification>())).errorCode as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIIOErrorNotification),
            "::",
            stringify!(errorCode)
        )
    );
}
extern "C" {
    pub static kMIDIPropertyName: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyManufacturer: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyModel: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyUniqueID: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDeviceID: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceiveChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyMaxSysExSpeed: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyAdvanceScheduleTimeMuSec: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsEmbeddedEntity: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsBroadcast: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySingleRealtimeEntity: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyConnectionUniqueID: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyOffline: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyPrivate: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDriverOwner: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyFactoryPatchNameFile: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyUserPatchNameFile: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyNameConfiguration: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyNameConfigurationDictionary: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyImage: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDriverVersion: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySupportsGeneralMIDI: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySupportsMMC: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyCanRoute: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesClock: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesMTC: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesNotes: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesProgramChanges: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesBankSelectMSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyReceivesBankSelectLSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsClock: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsMTC: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsNotes: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsProgramChanges: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsBankSelectMSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyTransmitsBankSelectLSB: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyPanDisruptsStereo: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsSampler: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsDrumMachine: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsMixer: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyIsEffectUnit: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyMaxReceiveChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyMaxTransmitChannels: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDriverDeviceEditorApp: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertySupportsShowControl: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyDisplayName: CFStringRef;
}
extern "C" {
    pub static kMIDIPropertyProtocolID: CFStringRef;
}
extern "C" {
    pub fn MIDIClientCreate(
        name: CFStringRef,
        notifyProc: MIDINotifyProc,
        notifyRefCon: *mut ::std::os::raw::c_void,
        outClient: *mut MIDIClientRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIClientCreateWithBlock(
        name: CFStringRef,
        outClient: *mut MIDIClientRef,
        notifyBlock: MIDINotifyBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIClientDispose(client: MIDIClientRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIInputPortCreateWithProtocol(
        client: MIDIClientRef,
        portName: CFStringRef,
        protocol: MIDIProtocolID,
        outPort: *mut MIDIPortRef,
        receiveBlock: MIDIReceiveBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIInputPortCreate(
        client: MIDIClientRef,
        portName: CFStringRef,
        readProc: MIDIReadProc,
        refCon: *mut ::std::os::raw::c_void,
        outPort: *mut MIDIPortRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIInputPortCreateWithBlock(
        client: MIDIClientRef,
        portName: CFStringRef,
        outPort: *mut MIDIPortRef,
        readBlock: MIDIReadBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIOutputPortCreate(
        client: MIDIClientRef,
        portName: CFStringRef,
        outPort: *mut MIDIPortRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIPortDispose(port: MIDIPortRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIPortConnectSource(
        port: MIDIPortRef,
        source: MIDIEndpointRef,
        connRefCon: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIPortDisconnectSource(port: MIDIPortRef, source: MIDIEndpointRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetNumberOfDevices() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
}
extern "C" {
    pub fn MIDIDeviceGetNumberOfEntities(device: MIDIDeviceRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIDeviceGetEntity(device: MIDIDeviceRef, entityIndex0: ItemCount) -> MIDIEntityRef;
}
extern "C" {
    pub fn MIDIEntityGetNumberOfSources(entity: MIDIEntityRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIEntityGetSource(entity: MIDIEntityRef, sourceIndex0: ItemCount) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIEntityGetNumberOfDestinations(entity: MIDIEntityRef) -> ItemCount;
}
extern "C" {
    pub fn MIDIEntityGetDestination(
        entity: MIDIEntityRef,
        destIndex0: ItemCount,
    ) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIEntityGetDevice(inEntity: MIDIEntityRef, outDevice: *mut MIDIDeviceRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetNumberOfSources() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetSource(sourceIndex0: ItemCount) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIGetNumberOfDestinations() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetDestination(destIndex0: ItemCount) -> MIDIEndpointRef;
}
extern "C" {
    pub fn MIDIEndpointGetEntity(
        inEndpoint: MIDIEndpointRef,
        outEntity: *mut MIDIEntityRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDestinationCreateWithProtocol(
        client: MIDIClientRef,
        name: CFStringRef,
        protocol: MIDIProtocolID,
        outDest: *mut MIDIEndpointRef,
        readBlock: MIDIReceiveBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDestinationCreate(
        client: MIDIClientRef,
        name: CFStringRef,
        readProc: MIDIReadProc,
        refCon: *mut ::std::os::raw::c_void,
        outDest: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIDestinationCreateWithBlock(
        client: MIDIClientRef,
        name: CFStringRef,
        outDest: *mut MIDIEndpointRef,
        readBlock: MIDIReadBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISourceCreateWithProtocol(
        client: MIDIClientRef,
        name: CFStringRef,
        protocol: MIDIProtocolID,
        outSrc: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISourceCreate(
        client: MIDIClientRef,
        name: CFStringRef,
        outSrc: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIEndpointDispose(endpt: MIDIEndpointRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIGetNumberOfExternalDevices() -> ItemCount;
}
extern "C" {
    pub fn MIDIGetExternalDevice(deviceIndex0: ItemCount) -> MIDIDeviceRef;
}
extern "C" {
    pub fn MIDIObjectGetIntegerProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        outValue: *mut SInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetIntegerProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        value: SInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetStringProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        str_: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetStringProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        str_: CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetDataProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        outData: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetDataProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        data: CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetDictionaryProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        outDict: *mut CFDictionaryRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectSetDictionaryProperty(
        obj: MIDIObjectRef,
        propertyID: CFStringRef,
        dict: CFDictionaryRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectGetProperties(
        obj: MIDIObjectRef,
        outProperties: *mut CFPropertyListRef,
        deep: Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectRemoveProperty(obj: MIDIObjectRef, propertyID: CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIObjectFindByUniqueID(
        inUniqueID: MIDIUniqueID,
        outObject: *mut MIDIObjectRef,
        outObjectType: *mut MIDIObjectType,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISendEventList(
        port: MIDIPortRef,
        dest: MIDIEndpointRef,
        evtlist: *const MIDIEventList,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISend(
        port: MIDIPortRef,
        dest: MIDIEndpointRef,
        pktlist: *const MIDIPacketList,
    ) -> OSStatus;
}
extern "C" {
    pub fn MIDISendSysex(request: *mut MIDISysexSendRequest) -> OSStatus;
}
extern "C" {
    pub fn MIDIReceivedEventList(src: MIDIEndpointRef, evtlist: *const MIDIEventList) -> OSStatus;
}
extern "C" {
    pub fn MIDIReceived(src: MIDIEndpointRef, pktlist: *const MIDIPacketList) -> OSStatus;
}
extern "C" {
    pub fn MIDIFlushOutput(dest: MIDIEndpointRef) -> OSStatus;
}
extern "C" {
    pub fn MIDIRestart() -> OSStatus;
}
extern "C" {
    pub fn MIDIEventListInit(
        evtlist: *mut MIDIEventList,
        protocol: MIDIProtocolID,
    ) -> *mut MIDIEventPacket;
}
extern "C" {
    pub fn MIDIEventListAdd(
        evtlist: *mut MIDIEventList,
        listSize: ByteCount,
        curPacket: *mut MIDIEventPacket,
        time: MIDITimeStamp,
        wordCount: ByteCount,
        words: *const UInt32,
    ) -> *mut MIDIEventPacket;
}
extern "C" {
    pub fn MIDIPacketListInit(pktlist: *mut MIDIPacketList) -> *mut MIDIPacket;
}
extern "C" {
    pub fn MIDIPacketListAdd(
        pktlist: *mut MIDIPacketList,
        listSize: ByteCount,
        curPacket: *mut MIDIPacket,
        time: MIDITimeStamp,
        nData: ByteCount,
        data: *const Byte,
    ) -> *mut MIDIPacket;
}
pub const kMusicEventType_NULL: ::std::os::raw::c_uint = 0;
pub const kMusicEventType_ExtendedNote: ::std::os::raw::c_uint = 1;
pub const kMusicEventType_ExtendedTempo: ::std::os::raw::c_uint = 3;
pub const kMusicEventType_User: ::std::os::raw::c_uint = 4;
pub const kMusicEventType_Meta: ::std::os::raw::c_uint = 5;
pub const kMusicEventType_MIDINoteMessage: ::std::os::raw::c_uint = 6;
pub const kMusicEventType_MIDIChannelMessage: ::std::os::raw::c_uint = 7;
pub const kMusicEventType_MIDIRawData: ::std::os::raw::c_uint = 8;
pub const kMusicEventType_Parameter: ::std::os::raw::c_uint = 9;
pub const kMusicEventType_AUPreset: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_349 = ::std::os::raw::c_uint;
pub type MusicEventType = UInt32;
pub type MusicSequenceLoadFlags = UInt32;
pub const kMusicSequenceLoadSMF_PreserveTracks: ::std::os::raw::c_uint = 0;
pub const kMusicSequenceLoadSMF_ChannelsToTracks: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_350 = ::std::os::raw::c_uint;
pub type MusicSequenceType = UInt32;
pub const kMusicSequenceType_Beats: ::std::os::raw::c_uint = 1650811252;
pub const kMusicSequenceType_Seconds: ::std::os::raw::c_uint = 1936024435;
pub const kMusicSequenceType_Samples: ::std::os::raw::c_uint = 1935764848;
pub type _bindgen_ty_351 = ::std::os::raw::c_uint;
pub type MusicSequenceFileTypeID = UInt32;
pub const kMusicSequenceFile_AnyType: ::std::os::raw::c_uint = 0;
pub const kMusicSequenceFile_MIDIType: ::std::os::raw::c_uint = 1835623529;
pub const kMusicSequenceFile_iMelodyType: ::std::os::raw::c_uint = 1768777068;
pub type _bindgen_ty_352 = ::std::os::raw::c_uint;
pub type MusicSequenceFileFlags = UInt32;
pub const kMusicSequenceFileFlags_Default: ::std::os::raw::c_uint = 0;
pub const kMusicSequenceFileFlags_EraseFile: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_353 = ::std::os::raw::c_uint;
pub type MusicTimeStamp = Float64;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDINoteMessage {
    pub channel: UInt8,
    pub note: UInt8,
    pub velocity: UInt8,
    pub releaseVelocity: UInt8,
    pub duration: Float32,
}
#[test]
fn bindgen_test_layout_MIDINoteMessage() {
    assert_eq!(
        ::std::mem::size_of::<MIDINoteMessage>(),
        8usize,
        concat!("Size of: ", stringify!(MIDINoteMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDINoteMessage>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDINoteMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINoteMessage>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINoteMessage),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINoteMessage>())).note as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINoteMessage),
            "::",
            stringify!(note)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINoteMessage>())).velocity as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINoteMessage),
            "::",
            stringify!(velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINoteMessage>())).releaseVelocity as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINoteMessage),
            "::",
            stringify!(releaseVelocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDINoteMessage>())).duration as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDINoteMessage),
            "::",
            stringify!(duration)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDIChannelMessage {
    pub status: UInt8,
    pub data1: UInt8,
    pub data2: UInt8,
    pub reserved: UInt8,
}
#[test]
fn bindgen_test_layout_MIDIChannelMessage() {
    assert_eq!(
        ::std::mem::size_of::<MIDIChannelMessage>(),
        4usize,
        concat!("Size of: ", stringify!(MIDIChannelMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIChannelMessage>(),
        1usize,
        concat!("Alignment of ", stringify!(MIDIChannelMessage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIChannelMessage>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIChannelMessage),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIChannelMessage>())).data1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIChannelMessage),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIChannelMessage>())).data2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIChannelMessage),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIChannelMessage>())).reserved as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIChannelMessage),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDIRawData {
    pub length: UInt32,
    pub data: [UInt8; 1usize],
}
#[test]
fn bindgen_test_layout_MIDIRawData() {
    assert_eq!(
        ::std::mem::size_of::<MIDIRawData>(),
        8usize,
        concat!("Size of: ", stringify!(MIDIRawData))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIRawData>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIRawData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIRawData>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIRawData),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIRawData>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIRawData),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MIDIMetaEvent {
    pub metaEventType: UInt8,
    pub unused1: UInt8,
    pub unused2: UInt8,
    pub unused3: UInt8,
    pub dataLength: UInt32,
    pub data: [UInt8; 1usize],
}
#[test]
fn bindgen_test_layout_MIDIMetaEvent() {
    assert_eq!(
        ::std::mem::size_of::<MIDIMetaEvent>(),
        12usize,
        concat!("Size of: ", stringify!(MIDIMetaEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<MIDIMetaEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(MIDIMetaEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIMetaEvent>())).metaEventType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIMetaEvent),
            "::",
            stringify!(metaEventType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIMetaEvent>())).unused1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIMetaEvent),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIMetaEvent>())).unused2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIMetaEvent),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIMetaEvent>())).unused3 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIMetaEvent),
            "::",
            stringify!(unused3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIMetaEvent>())).dataLength as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIMetaEvent),
            "::",
            stringify!(dataLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MIDIMetaEvent>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MIDIMetaEvent),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MusicEventUserData {
    pub length: UInt32,
    pub data: [UInt8; 1usize],
}
#[test]
fn bindgen_test_layout_MusicEventUserData() {
    assert_eq!(
        ::std::mem::size_of::<MusicEventUserData>(),
        8usize,
        concat!("Size of: ", stringify!(MusicEventUserData))
    );
    assert_eq!(
        ::std::mem::align_of::<MusicEventUserData>(),
        4usize,
        concat!("Alignment of ", stringify!(MusicEventUserData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicEventUserData>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicEventUserData),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicEventUserData>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicEventUserData),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ExtendedNoteOnEvent {
    pub instrumentID: MusicDeviceInstrumentID,
    pub groupID: MusicDeviceGroupID,
    pub duration: Float32,
    pub extendedParams: MusicDeviceNoteParams,
}
#[test]
fn bindgen_test_layout_ExtendedNoteOnEvent() {
    assert_eq!(
        ::std::mem::size_of::<ExtendedNoteOnEvent>(),
        32usize,
        concat!("Size of: ", stringify!(ExtendedNoteOnEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ExtendedNoteOnEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(ExtendedNoteOnEvent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExtendedNoteOnEvent>())).instrumentID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedNoteOnEvent),
            "::",
            stringify!(instrumentID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedNoteOnEvent>())).groupID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedNoteOnEvent),
            "::",
            stringify!(groupID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedNoteOnEvent>())).duration as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedNoteOnEvent),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ExtendedNoteOnEvent>())).extendedParams as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedNoteOnEvent),
            "::",
            stringify!(extendedParams)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ParameterEvent {
    pub parameterID: AudioUnitParameterID,
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub value: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_ParameterEvent() {
    assert_eq!(
        ::std::mem::size_of::<ParameterEvent>(),
        16usize,
        concat!("Size of: ", stringify!(ParameterEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ParameterEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(ParameterEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterEvent>())).parameterID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterEvent),
            "::",
            stringify!(parameterID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterEvent>())).scope as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterEvent),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterEvent>())).element as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterEvent),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ParameterEvent>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ParameterEvent),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ExtendedTempoEvent {
    pub bpm: Float64,
}
#[test]
fn bindgen_test_layout_ExtendedTempoEvent() {
    assert_eq!(
        ::std::mem::size_of::<ExtendedTempoEvent>(),
        8usize,
        concat!("Size of: ", stringify!(ExtendedTempoEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ExtendedTempoEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(ExtendedTempoEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedTempoEvent>())).bpm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedTempoEvent),
            "::",
            stringify!(bpm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUPresetEvent {
    pub scope: AudioUnitScope,
    pub element: AudioUnitElement,
    pub preset: CFPropertyListRef,
}
#[test]
fn bindgen_test_layout_AUPresetEvent() {
    assert_eq!(
        ::std::mem::size_of::<AUPresetEvent>(),
        16usize,
        concat!("Size of: ", stringify!(AUPresetEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<AUPresetEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(AUPresetEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUPresetEvent>())).scope as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AUPresetEvent),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUPresetEvent>())).element as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AUPresetEvent),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AUPresetEvent>())).preset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AUPresetEvent),
            "::",
            stringify!(preset)
        )
    );
}
impl Default for AUPresetEvent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CABarBeatTime {
    pub bar: SInt32,
    pub beat: UInt16,
    pub subbeat: UInt16,
    pub subbeatDivisor: UInt16,
    pub reserved: UInt16,
}
#[test]
fn bindgen_test_layout_CABarBeatTime() {
    assert_eq!(
        ::std::mem::size_of::<CABarBeatTime>(),
        12usize,
        concat!("Size of: ", stringify!(CABarBeatTime))
    );
    assert_eq!(
        ::std::mem::align_of::<CABarBeatTime>(),
        4usize,
        concat!("Alignment of ", stringify!(CABarBeatTime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CABarBeatTime>())).bar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CABarBeatTime),
            "::",
            stringify!(bar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CABarBeatTime>())).beat as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CABarBeatTime),
            "::",
            stringify!(beat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CABarBeatTime>())).subbeat as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CABarBeatTime),
            "::",
            stringify!(subbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CABarBeatTime>())).subbeatDivisor as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CABarBeatTime),
            "::",
            stringify!(subbeatDivisor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CABarBeatTime>())).reserved as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CABarBeatTime),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicPlayer {
    _unused: [u8; 0],
}
pub type MusicPlayer = *mut OpaqueMusicPlayer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicSequence {
    _unused: [u8; 0],
}
pub type MusicSequence = *mut OpaqueMusicSequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicTrack {
    _unused: [u8; 0],
}
pub type MusicTrack = *mut OpaqueMusicTrack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueMusicEventIterator {
    _unused: [u8; 0],
}
pub type MusicEventIterator = *mut OpaqueMusicEventIterator;
pub type MusicSequenceUserCallback = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inSequence: MusicSequence,
        inTrack: MusicTrack,
        inEventTime: MusicTimeStamp,
        inEventData: *const MusicEventUserData,
        inStartSliceBeat: MusicTimeStamp,
        inEndSliceBeat: MusicTimeStamp,
    ),
>;
pub const kAudioToolboxErr_InvalidSequenceType: ::std::os::raw::c_int = -10846;
pub const kAudioToolboxErr_TrackIndexError: ::std::os::raw::c_int = -10859;
pub const kAudioToolboxErr_TrackNotFound: ::std::os::raw::c_int = -10858;
pub const kAudioToolboxErr_EndOfTrack: ::std::os::raw::c_int = -10857;
pub const kAudioToolboxErr_StartOfTrack: ::std::os::raw::c_int = -10856;
pub const kAudioToolboxErr_IllegalTrackDestination: ::std::os::raw::c_int = -10855;
pub const kAudioToolboxErr_NoSequence: ::std::os::raw::c_int = -10854;
pub const kAudioToolboxErr_InvalidEventType: ::std::os::raw::c_int = -10853;
pub const kAudioToolboxErr_InvalidPlayerState: ::std::os::raw::c_int = -10852;
pub const kAudioToolboxErr_CannotDoInCurrentContext: ::std::os::raw::c_int = -10863;
pub const kAudioToolboxError_NoTrackDestination: ::std::os::raw::c_int = -66720;
pub type _bindgen_ty_354 = ::std::os::raw::c_int;
pub const kSequenceTrackProperty_LoopInfo: ::std::os::raw::c_uint = 0;
pub const kSequenceTrackProperty_OffsetTime: ::std::os::raw::c_uint = 1;
pub const kSequenceTrackProperty_MuteStatus: ::std::os::raw::c_uint = 2;
pub const kSequenceTrackProperty_SoloStatus: ::std::os::raw::c_uint = 3;
pub const kSequenceTrackProperty_AutomatedParameters: ::std::os::raw::c_uint = 4;
pub const kSequenceTrackProperty_TrackLength: ::std::os::raw::c_uint = 5;
pub const kSequenceTrackProperty_TimeResolution: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_355 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct MusicTrackLoopInfo {
    pub loopDuration: MusicTimeStamp,
    pub numberOfLoops: SInt32,
}
#[test]
fn bindgen_test_layout_MusicTrackLoopInfo() {
    assert_eq!(
        ::std::mem::size_of::<MusicTrackLoopInfo>(),
        16usize,
        concat!("Size of: ", stringify!(MusicTrackLoopInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MusicTrackLoopInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MusicTrackLoopInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MusicTrackLoopInfo>())).loopDuration as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicTrackLoopInfo),
            "::",
            stringify!(loopDuration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MusicTrackLoopInfo>())).numberOfLoops as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MusicTrackLoopInfo),
            "::",
            stringify!(numberOfLoops)
        )
    );
}
extern "C" {
    pub fn NewMusicPlayer(outPlayer: *mut MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn DisposeMusicPlayer(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerSetSequence(inPlayer: MusicPlayer, inSequence: MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetSequence(
        inPlayer: MusicPlayer,
        outSequence: *mut MusicSequence,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerSetTime(inPlayer: MusicPlayer, inTime: MusicTimeStamp) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetTime(inPlayer: MusicPlayer, outTime: *mut MusicTimeStamp) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetHostTimeForBeats(
        inPlayer: MusicPlayer,
        inBeats: MusicTimeStamp,
        outHostTime: *mut UInt64,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetBeatsForHostTime(
        inPlayer: MusicPlayer,
        inHostTime: UInt64,
        outBeats: *mut MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerPreroll(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerStart(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerStop(inPlayer: MusicPlayer) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerIsPlaying(inPlayer: MusicPlayer, outIsPlaying: *mut Boolean) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerSetPlayRateScalar(inPlayer: MusicPlayer, inScaleRate: Float64) -> OSStatus;
}
extern "C" {
    pub fn MusicPlayerGetPlayRateScalar(
        inPlayer: MusicPlayer,
        outScaleRate: *mut Float64,
    ) -> OSStatus;
}
extern "C" {
    pub fn NewMusicSequence(outSequence: *mut MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn DisposeMusicSequence(inSequence: MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceNewTrack(inSequence: MusicSequence, outTrack: *mut MusicTrack) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceDisposeTrack(inSequence: MusicSequence, inTrack: MusicTrack) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetTrackCount(
        inSequence: MusicSequence,
        outNumberOfTracks: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetIndTrack(
        inSequence: MusicSequence,
        inTrackIndex: UInt32,
        outTrack: *mut MusicTrack,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetTrackIndex(
        inSequence: MusicSequence,
        inTrack: MusicTrack,
        outTrackIndex: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetTempoTrack(
        inSequence: MusicSequence,
        outTrack: *mut MusicTrack,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetAUGraph(inSequence: MusicSequence, inGraph: AUGraph) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetAUGraph(inSequence: MusicSequence, outGraph: *mut AUGraph) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetMIDIEndpoint(
        inSequence: MusicSequence,
        inEndpoint: MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetSequenceType(
        inSequence: MusicSequence,
        inType: MusicSequenceType,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetSequenceType(
        inSequence: MusicSequence,
        outType: *mut MusicSequenceType,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileLoad(
        inSequence: MusicSequence,
        inFileRef: CFURLRef,
        inFileTypeHint: MusicSequenceFileTypeID,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileLoadData(
        inSequence: MusicSequence,
        inData: CFDataRef,
        inFileTypeHint: MusicSequenceFileTypeID,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileCreate(
        inSequence: MusicSequence,
        inFileRef: CFURLRef,
        inFileType: MusicSequenceFileTypeID,
        inFlags: MusicSequenceFileFlags,
        inResolution: SInt16,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceFileCreateData(
        inSequence: MusicSequence,
        inFileType: MusicSequenceFileTypeID,
        inFlags: MusicSequenceFileFlags,
        inResolution: SInt16,
        outData: *mut CFDataRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceReverse(inSequence: MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetSecondsForBeats(
        inSequence: MusicSequence,
        inBeats: MusicTimeStamp,
        outSeconds: *mut Float64,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetBeatsForSeconds(
        inSequence: MusicSequence,
        inSeconds: Float64,
        outBeats: *mut MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSetUserCallback(
        inSequence: MusicSequence,
        inCallback: MusicSequenceUserCallback,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceBeatsToBarBeatTime(
        inSequence: MusicSequence,
        inBeats: MusicTimeStamp,
        inSubbeatDivisor: UInt32,
        outBarBeatTime: *mut CABarBeatTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceBarBeatTimeToBeats(
        inSequence: MusicSequence,
        inBarBeatTime: *const CABarBeatTime,
        outBeats: *mut MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceGetInfoDictionary(inSequence: MusicSequence) -> CFDictionaryRef;
}
extern "C" {
    pub fn MusicTrackGetSequence(inTrack: MusicTrack, outSequence: *mut MusicSequence) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackSetDestNode(inTrack: MusicTrack, inNode: AUNode) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackSetDestMIDIEndpoint(
        inTrack: MusicTrack,
        inEndpoint: MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackGetDestNode(inTrack: MusicTrack, outNode: *mut AUNode) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackGetDestMIDIEndpoint(
        inTrack: MusicTrack,
        outEndpoint: *mut MIDIEndpointRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackSetProperty(
        inTrack: MusicTrack,
        inPropertyID: UInt32,
        inData: *mut ::std::os::raw::c_void,
        inLength: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackGetProperty(
        inTrack: MusicTrack,
        inPropertyID: UInt32,
        outData: *mut ::std::os::raw::c_void,
        ioLength: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackMoveEvents(
        inTrack: MusicTrack,
        inStartTime: MusicTimeStamp,
        inEndTime: MusicTimeStamp,
        inMoveTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackClear(
        inTrack: MusicTrack,
        inStartTime: MusicTimeStamp,
        inEndTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackCut(
        inTrack: MusicTrack,
        inStartTime: MusicTimeStamp,
        inEndTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackCopyInsert(
        inSourceTrack: MusicTrack,
        inSourceStartTime: MusicTimeStamp,
        inSourceEndTime: MusicTimeStamp,
        inDestTrack: MusicTrack,
        inDestInsertTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackMerge(
        inSourceTrack: MusicTrack,
        inSourceStartTime: MusicTimeStamp,
        inSourceEndTime: MusicTimeStamp,
        inDestTrack: MusicTrack,
        inDestInsertTime: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMIDINoteEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inMessage: *const MIDINoteMessage,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMIDIChannelEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inMessage: *const MIDIChannelMessage,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMIDIRawDataEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inRawData: *const MIDIRawData,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewExtendedNoteEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inInfo: *const ExtendedNoteOnEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewParameterEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inInfo: *const ParameterEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewExtendedTempoEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inBPM: Float64,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewMetaEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inMetaEvent: *const MIDIMetaEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewUserEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inUserData: *const MusicEventUserData,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicTrackNewAUPresetEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inPresetEvent: *const AUPresetEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn NewMusicEventIterator(
        inTrack: MusicTrack,
        outIterator: *mut MusicEventIterator,
    ) -> OSStatus;
}
extern "C" {
    pub fn DisposeMusicEventIterator(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorSeek(
        inIterator: MusicEventIterator,
        inTimeStamp: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorNextEvent(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorPreviousEvent(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorGetEventInfo(
        inIterator: MusicEventIterator,
        outTimeStamp: *mut MusicTimeStamp,
        outEventType: *mut MusicEventType,
        outEventData: *mut *const ::std::os::raw::c_void,
        outEventDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorSetEventInfo(
        inIterator: MusicEventIterator,
        inEventType: MusicEventType,
        inEventData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorSetEventTime(
        inIterator: MusicEventIterator,
        inTimeStamp: MusicTimeStamp,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorDeleteEvent(inIterator: MusicEventIterator) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorHasPreviousEvent(
        inIterator: MusicEventIterator,
        outHasPrevEvent: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorHasNextEvent(
        inIterator: MusicEventIterator,
        outHasNextEvent: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicEventIteratorHasCurrentEvent(
        inIterator: MusicEventIterator,
        outHasCurEvent: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceLoadSMFWithFlags(
        inSequence: MusicSequence,
        inFileRef: *const FSRef,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceLoadSMFDataWithFlags(
        inSequence: MusicSequence,
        inData: CFDataRef,
        inFlags: MusicSequenceLoadFlags,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSaveMIDIFile(
        inSequence: MusicSequence,
        inParentDirectory: *const FSRef,
        inFileName: CFStringRef,
        inResolution: UInt16,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn MusicSequenceSaveSMFData(
        inSequence: MusicSequence,
        outData: *mut CFDataRef,
        inResolution: UInt16,
    ) -> OSStatus;
}
extern "C" {
    pub fn NewMusicTrackFrom(
        inSourceTrack: MusicTrack,
        inSourceStartTime: MusicTimeStamp,
        inSourceEndTime: MusicTimeStamp,
        outNewTrack: *mut MusicTrack,
    ) -> OSStatus;
}
pub const kMusicEventType_ExtendedControl: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_356 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ExtendedControlEvent {
    pub groupID: MusicDeviceGroupID,
    pub controlID: AudioUnitParameterID,
    pub value: AudioUnitParameterValue,
}
#[test]
fn bindgen_test_layout_ExtendedControlEvent() {
    assert_eq!(
        ::std::mem::size_of::<ExtendedControlEvent>(),
        12usize,
        concat!("Size of: ", stringify!(ExtendedControlEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ExtendedControlEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(ExtendedControlEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedControlEvent>())).groupID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedControlEvent),
            "::",
            stringify!(groupID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedControlEvent>())).controlID as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedControlEvent),
            "::",
            stringify!(controlID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtendedControlEvent>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtendedControlEvent),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub fn MusicTrackNewExtendedControlEvent(
        inTrack: MusicTrack,
        inTimeStamp: MusicTimeStamp,
        inInfo: *const ExtendedControlEvent,
    ) -> OSStatus;
}
pub type AudioFileComponent = AudioComponentInstance;
pub type AudioFileComponentPropertyID = UInt32;
extern "C" {
    pub fn AudioFileComponentCreateURL(
        inComponent: AudioFileComponent,
        inFileRef: CFURLRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentOpenURL(
        inComponent: AudioFileComponent,
        inFileRef: CFURLRef,
        inPermissions: SInt8,
        inFileDescriptor: ::std::os::raw::c_int,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentOpenWithCallbacks(
        inComponent: AudioFileComponent,
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentInitializeWithCallbacks(
        inComponent: AudioFileComponent,
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        inFileType: UInt32,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentCloseFile(inComponent: AudioFileComponent) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentOptimize(inComponent: AudioFileComponent) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentReadBytes(
        inComponent: AudioFileComponent,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentWriteBytes(
        inComponent: AudioFileComponent,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentReadPackets(
        inComponent: AudioFileComponent,
        inUseCache: Boolean,
        outNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentReadPacketData(
        inComponent: AudioFileComponent,
        inUseCache: Boolean,
        ioNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentWritePackets(
        inComponent: AudioFileComponent,
        inUseCache: Boolean,
        inNumBytes: UInt32,
        inPacketDescriptions: *const AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentGetPropertyInfo(
        inComponent: AudioFileComponent,
        inPropertyID: AudioFileComponentPropertyID,
        outPropertySize: *mut UInt32,
        outWritable: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentGetProperty(
        inComponent: AudioFileComponent,
        inPropertyID: AudioFileComponentPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentSetProperty(
        inComponent: AudioFileComponent,
        inPropertyID: AudioFileComponentPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentCountUserData(
        inComponent: AudioFileComponent,
        inUserDataID: UInt32,
        outNumberItems: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentGetUserDataSize(
        inComponent: AudioFileComponent,
        inUserDataID: UInt32,
        inIndex: UInt32,
        outUserDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentGetUserData(
        inComponent: AudioFileComponent,
        inUserDataID: UInt32,
        inIndex: UInt32,
        ioUserDataSize: *mut UInt32,
        outUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentSetUserData(
        inComponent: AudioFileComponent,
        inUserDataID: UInt32,
        inIndex: UInt32,
        inUserDataSize: UInt32,
        inUserData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentRemoveUserData(
        inComponent: AudioFileComponent,
        inUserDataID: UInt32,
        inIndex: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentExtensionIsThisFormat(
        inComponent: AudioFileComponent,
        inExtension: CFStringRef,
        outResult: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentFileDataIsThisFormat(
        inComponent: AudioFileComponent,
        inDataByteSize: UInt32,
        inData: *const ::std::os::raw::c_void,
        outResult: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentFileIsThisFormat(
        inComponent: AudioFileComponent,
        inFileRefNum: SInt16,
        outResult: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentDataIsThisFormat(
        inComponent: AudioFileComponent,
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        outResult: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentGetGlobalInfoSize(
        inComponent: AudioFileComponent,
        inPropertyID: AudioFileComponentPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        outPropertySize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentGetGlobalInfo(
        inComponent: AudioFileComponent,
        inPropertyID: AudioFileComponentPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioFileComponent_CanRead: ::std::os::raw::c_uint = 1668182628;
pub const kAudioFileComponent_CanWrite: ::std::os::raw::c_uint = 1668183922;
pub const kAudioFileComponent_FileTypeName: ::std::os::raw::c_uint = 1718906477;
pub const kAudioFileComponent_UTIsForType: ::std::os::raw::c_uint = 1718973545;
pub const kAudioFileComponent_MIMETypesForType: ::std::os::raw::c_uint = 1718446445;
pub const kAudioFileComponent_ExtensionsForType: ::std::os::raw::c_uint = 1717926004;
pub const kAudioFileComponent_AvailableFormatIDs: ::std::os::raw::c_uint = 1718446436;
pub const kAudioFileComponent_AvailableStreamDescriptionsForFormat: ::std::os::raw::c_uint =
    1935960420;
pub const kAudioFileComponent_FastDispatchTable: ::std::os::raw::c_uint = 1717855860;
pub const kAudioFileComponent_HFSTypeCodesForType: ::std::os::raw::c_uint = 1718118003;
pub type _bindgen_ty_357 = ::std::os::raw::c_uint;
pub const kAudioFileCreateSelect: ::std::os::raw::c_uint = 1;
pub const kAudioFileOpenSelect: ::std::os::raw::c_uint = 2;
pub const kAudioFileInitializeSelect: ::std::os::raw::c_uint = 3;
pub const kAudioFileOpenWithCallbacksSelect: ::std::os::raw::c_uint = 4;
pub const kAudioFileInitializeWithCallbacksSelect: ::std::os::raw::c_uint = 5;
pub const kAudioFileCloseSelect: ::std::os::raw::c_uint = 6;
pub const kAudioFileOptimizeSelect: ::std::os::raw::c_uint = 7;
pub const kAudioFileReadBytesSelect: ::std::os::raw::c_uint = 8;
pub const kAudioFileWriteBytesSelect: ::std::os::raw::c_uint = 9;
pub const kAudioFileReadPacketsSelect: ::std::os::raw::c_uint = 10;
pub const kAudioFileWritePacketsSelect: ::std::os::raw::c_uint = 11;
pub const kAudioFileGetPropertyInfoSelect: ::std::os::raw::c_uint = 12;
pub const kAudioFileGetPropertySelect: ::std::os::raw::c_uint = 13;
pub const kAudioFileSetPropertySelect: ::std::os::raw::c_uint = 14;
pub const kAudioFileExtensionIsThisFormatSelect: ::std::os::raw::c_uint = 15;
pub const kAudioFileFileIsThisFormatSelect: ::std::os::raw::c_uint = 16;
pub const kAudioFileDataIsThisFormatSelect: ::std::os::raw::c_uint = 17;
pub const kAudioFileGetGlobalInfoSizeSelect: ::std::os::raw::c_uint = 18;
pub const kAudioFileGetGlobalInfoSelect: ::std::os::raw::c_uint = 19;
pub const kAudioFileCountUserDataSelect: ::std::os::raw::c_uint = 20;
pub const kAudioFileGetUserDataSizeSelect: ::std::os::raw::c_uint = 21;
pub const kAudioFileGetUserDataSelect: ::std::os::raw::c_uint = 22;
pub const kAudioFileSetUserDataSelect: ::std::os::raw::c_uint = 23;
pub const kAudioFileRemoveUserDataSelect: ::std::os::raw::c_uint = 24;
pub const kAudioFileCreateURLSelect: ::std::os::raw::c_uint = 25;
pub const kAudioFileOpenURLSelect: ::std::os::raw::c_uint = 26;
pub const kAudioFileFileDataIsThisFormatSelect: ::std::os::raw::c_uint = 27;
pub const kAudioFileReadPacketDataSelect: ::std::os::raw::c_uint = 28;
pub type _bindgen_ty_358 = ::std::os::raw::c_uint;
pub type ReadBytesFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type WriteBytesFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type ReadPacketsFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        outNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type ReadPacketDataFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        ioNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type WritePacketsFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        inNumBytes: UInt32,
        inPacketDescriptions: *const AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type GetPropertyInfoFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFilePropertyID,
        outDataSize: *mut UInt32,
        isWritable: *mut UInt32,
    ) -> OSStatus,
>;
pub type GetPropertyFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFilePropertyID,
        ioDataSize: *mut UInt32,
        ioPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type SetPropertyFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFilePropertyID,
        inDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type CountUserDataFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        outNumberItems: *mut UInt32,
    ) -> OSStatus,
>;
pub type GetUserDataSizeFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
        outDataSize: *mut UInt32,
    ) -> OSStatus,
>;
pub type GetUserDataFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
        ioUserDataSize: *mut UInt32,
        outUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type SetUserDataFDF = ::std::option::Option<
    unsafe extern "C" fn(
        inComponentStorage: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
        inUserDataSize: UInt32,
        inUserData: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileFDFTable {
    pub mComponentStorage: *mut ::std::os::raw::c_void,
    pub mReadBytesFDF: ReadBytesFDF,
    pub mWriteBytesFDF: WriteBytesFDF,
    pub mReadPacketsFDF: ReadPacketsFDF,
    pub mWritePacketsFDF: WritePacketsFDF,
    pub mGetPropertyInfoFDF: GetPropertyInfoFDF,
    pub mGetPropertyFDF: GetPropertyFDF,
    pub mSetPropertyFDF: SetPropertyFDF,
    pub mCountUserDataFDF: CountUserDataFDF,
    pub mGetUserDataSizeFDF: GetUserDataSizeFDF,
    pub mGetUserDataFDF: GetUserDataFDF,
    pub mSetUserDataFDF: SetUserDataFDF,
}
#[test]
fn bindgen_test_layout_AudioFileFDFTable() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileFDFTable>(),
        96usize,
        concat!("Size of: ", stringify!(AudioFileFDFTable))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileFDFTable>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFileFDFTable))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mComponentStorage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mComponentStorage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioFileFDFTable>())).mReadBytesFDF as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mReadBytesFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mWriteBytesFDF as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mWriteBytesFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mReadPacketsFDF as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mReadPacketsFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mWritePacketsFDF as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mWritePacketsFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mGetPropertyInfoFDF as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mGetPropertyInfoFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mGetPropertyFDF as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mGetPropertyFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mSetPropertyFDF as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mSetPropertyFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mCountUserDataFDF as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mCountUserDataFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mGetUserDataSizeFDF as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mGetUserDataSizeFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mGetUserDataFDF as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mGetUserDataFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTable>())).mSetUserDataFDF as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTable),
            "::",
            stringify!(mSetUserDataFDF)
        )
    );
}
impl Default for AudioFileFDFTable {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AudioFileFDFTableExtended {
    pub mComponentStorage: *mut ::std::os::raw::c_void,
    pub mReadBytesFDF: ReadBytesFDF,
    pub mWriteBytesFDF: WriteBytesFDF,
    pub mReadPacketsFDF: ReadPacketsFDF,
    pub mWritePacketsFDF: WritePacketsFDF,
    pub mGetPropertyInfoFDF: GetPropertyInfoFDF,
    pub mGetPropertyFDF: GetPropertyFDF,
    pub mSetPropertyFDF: SetPropertyFDF,
    pub mCountUserDataFDF: CountUserDataFDF,
    pub mGetUserDataSizeFDF: GetUserDataSizeFDF,
    pub mGetUserDataFDF: GetUserDataFDF,
    pub mSetUserDataFDF: SetUserDataFDF,
    pub mReadPacketDataFDF: ReadPacketDataFDF,
}
#[test]
fn bindgen_test_layout_AudioFileFDFTableExtended() {
    assert_eq!(
        ::std::mem::size_of::<AudioFileFDFTableExtended>(),
        104usize,
        concat!("Size of: ", stringify!(AudioFileFDFTableExtended))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioFileFDFTableExtended>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioFileFDFTableExtended))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mComponentStorage as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mComponentStorage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mReadBytesFDF as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mReadBytesFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mWriteBytesFDF as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mWriteBytesFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mReadPacketsFDF as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mReadPacketsFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mWritePacketsFDF as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mWritePacketsFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mGetPropertyInfoFDF as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mGetPropertyInfoFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mGetPropertyFDF as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mGetPropertyFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mSetPropertyFDF as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mSetPropertyFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mCountUserDataFDF as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mCountUserDataFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mGetUserDataSizeFDF as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mGetUserDataSizeFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mGetUserDataFDF as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mGetUserDataFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mSetUserDataFDF as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mSetUserDataFDF)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioFileFDFTableExtended>())).mReadPacketDataFDF as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioFileFDFTableExtended),
            "::",
            stringify!(mReadPacketDataFDF)
        )
    );
}
impl Default for AudioFileFDFTableExtended {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn AudioFileComponentCreate(
        inComponent: AudioFileComponent,
        inParentRef: *const FSRef,
        inFileName: CFStringRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
        outNewFileRef: *mut FSRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentInitialize(
        inComponent: AudioFileComponent,
        inFileRef: *const FSRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioFileComponentOpenFile(
        inComponent: AudioFileComponent,
        inFileRef: *const FSRef,
        inPermissions: SInt8,
        inRefNum: SInt16,
    ) -> OSStatus;
}
pub type AudioFileComponentCreateURLProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inFileRef: CFURLRef,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentOpenURLProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inFileRef: CFURLRef,
        inPermissions: SInt8,
        inFileDescriptor: ::std::os::raw::c_int,
    ) -> OSStatus,
>;
pub type AudioFileComponentOpenWithCallbacksProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
    ) -> OSStatus,
>;
pub type AudioFileComponentInitializeWithCallbacksProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inClientData: *mut ::std::os::raw::c_void,
        inReadFunc: AudioFile_ReadProc,
        inWriteFunc: AudioFile_WriteProc,
        inGetSizeFunc: AudioFile_GetSizeProc,
        inSetSizeFunc: AudioFile_SetSizeProc,
        inFileType: UInt32,
        inFormat: *const AudioStreamBasicDescription,
        inFlags: UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentCloseProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioFileComponentOptimizeProc =
    ::std::option::Option<unsafe extern "C" fn(self_: *mut ::std::os::raw::c_void) -> OSStatus>;
pub type AudioFileComponentReadBytesProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentWriteBytesProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        inStartingByte: SInt64,
        ioNumBytes: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentReadPacketsProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        outNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentReadPacketDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        ioNumBytes: *mut UInt32,
        outPacketDescriptions: *mut AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        outBuffer: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentWritePacketsProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUseCache: Boolean,
        inNumBytes: UInt32,
        inPacketDescriptions: *const AudioStreamPacketDescription,
        inStartingPacket: SInt64,
        ioNumPackets: *mut UInt32,
        inBuffer: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentGetPropertyInfoProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFileComponentPropertyID,
        outPropertySize: *mut UInt32,
        outWritable: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentGetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFileComponentPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentSetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFileComponentPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentCountUserDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        outNumberItems: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentGetUserDataSizeProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
        outUserDataSize: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentGetUserDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
        ioUserDataSize: *mut UInt32,
        outUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentSetUserDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
        inUserDataSize: UInt32,
        inUserData: *const ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub type AudioFileComponentRemoveUserDataProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inUserDataID: UInt32,
        inIndex: UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentExtensionIsThisFormatProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inExtension: CFStringRef,
        outResult: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentFileDataIsThisFormatProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inDataByteSize: UInt32,
        inData: *const ::std::os::raw::c_void,
        outResult: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentGetGlobalInfoSizeProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFileComponentPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        outPropertySize: *mut UInt32,
    ) -> OSStatus,
>;
pub type AudioFileComponentGetGlobalInfoProc = ::std::option::Option<
    unsafe extern "C" fn(
        self_: *mut ::std::os::raw::c_void,
        inPropertyID: AudioFileComponentPropertyID,
        inSpecifierSize: UInt32,
        inSpecifier: *const ::std::os::raw::c_void,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus,
>;
pub const kAUParameterListener_AnyParameter: ::std::os::raw::c_uint = 4294967295;
pub type _bindgen_ty_359 = ::std::os::raw::c_uint;
pub type AudioUnitEventType = UInt32;
pub const kAudioUnitEvent_ParameterValueChange: ::std::os::raw::c_uint = 0;
pub const kAudioUnitEvent_BeginParameterChangeGesture: ::std::os::raw::c_uint = 1;
pub const kAudioUnitEvent_EndParameterChangeGesture: ::std::os::raw::c_uint = 2;
pub const kAudioUnitEvent_PropertyChange: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_360 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AUListenerBase {
    _unused: [u8; 0],
}
pub type AUParameterListenerRef = *mut AUListenerBase;
pub type AUEventListenerRef = AUParameterListenerRef;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AudioUnitEvent {
    pub mEventType: AudioUnitEventType,
    pub mArgument: AudioUnitEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AudioUnitEvent__bindgen_ty_1 {
    pub mParameter: AudioUnitParameter,
    pub mProperty: AudioUnitProperty,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_AudioUnitEvent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitEvent__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(AudioUnitEvent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitEvent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitEvent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitEvent__bindgen_ty_1>())).mParameter as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitEvent__bindgen_ty_1),
            "::",
            stringify!(mParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioUnitEvent__bindgen_ty_1>())).mProperty as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitEvent__bindgen_ty_1),
            "::",
            stringify!(mProperty)
        )
    );
}
impl Default for AudioUnitEvent__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_AudioUnitEvent() {
    assert_eq!(
        ::std::mem::size_of::<AudioUnitEvent>(),
        32usize,
        concat!("Size of: ", stringify!(AudioUnitEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<AudioUnitEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(AudioUnitEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitEvent>())).mEventType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitEvent),
            "::",
            stringify!(mEventType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AudioUnitEvent>())).mArgument as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioUnitEvent),
            "::",
            stringify!(mArgument)
        )
    );
}
impl Default for AudioUnitEvent {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type AUParameterListenerBlock = *mut ::std::os::raw::c_void;
pub type AUEventListenerBlock = *mut ::std::os::raw::c_void;
pub type AUParameterListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
        inValue: AudioUnitParameterValue,
    ),
>;
pub type AUEventListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        inUserData: *mut ::std::os::raw::c_void,
        inObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
        inEventHostTime: UInt64,
        inParameterValue: AudioUnitParameterValue,
    ),
>;
extern "C" {
    pub fn AUListenerCreateWithDispatchQueue(
        outListener: *mut AUParameterListenerRef,
        inNotificationInterval: Float32,
        inDispatchQueue: dispatch_queue_t,
        inBlock: AUParameterListenerBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUListenerCreate(
        inProc: AUParameterListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inNotificationInterval: Float32,
        outListener: *mut AUParameterListenerRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUListenerDispose(inListener: AUParameterListenerRef) -> OSStatus;
}
extern "C" {
    pub fn AUListenerAddParameter(
        inListener: AUParameterListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUListenerRemoveParameter(
        inListener: AUParameterListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUParameterSet(
        inSendingListener: AUParameterListenerRef,
        inSendingObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
        inValue: AudioUnitParameterValue,
        inBufferOffsetInFrames: UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUParameterListenerNotify(
        inSendingListener: AUParameterListenerRef,
        inSendingObject: *mut ::std::os::raw::c_void,
        inParameter: *const AudioUnitParameter,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerCreateWithDispatchQueue(
        outListener: *mut AUEventListenerRef,
        inNotificationInterval: Float32,
        inValueChangeGranularity: Float32,
        inDispatchQueue: dispatch_queue_t,
        inBlock: AUEventListenerBlock,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerCreate(
        inProc: AUEventListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inNotificationInterval: Float32,
        inValueChangeGranularity: Float32,
        outListener: *mut AUEventListenerRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerAddEventType(
        inListener: AUEventListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerRemoveEventType(
        inListener: AUEventListenerRef,
        inObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUEventListenerNotify(
        inSendingListener: AUEventListenerRef,
        inSendingObject: *mut ::std::os::raw::c_void,
        inEvent: *const AudioUnitEvent,
    ) -> OSStatus;
}
extern "C" {
    pub fn AUParameterValueFromLinear(
        inLinearValue: Float32,
        inParameter: *const AudioUnitParameter,
    ) -> AudioUnitParameterValue;
}
extern "C" {
    pub fn AUParameterValueToLinear(
        inParameterValue: AudioUnitParameterValue,
        inParameter: *const AudioUnitParameter,
    ) -> Float32;
}
extern "C" {
    pub fn AUParameterFormatValue(
        inParameterValue: Float64,
        inParameter: *const AudioUnitParameter,
        inTextBuffer: *mut ::std::os::raw::c_char,
        inDigits: UInt32,
    ) -> *mut ::std::os::raw::c_char;
}
pub type CAClockPropertyID = UInt32;
pub const kCAClockProperty_InternalTimebase: ::std::os::raw::c_uint = 1768846434;
pub const kCAClockProperty_TimebaseSource: ::std::os::raw::c_uint = 1769235059;
pub const kCAClockProperty_SyncMode: ::std::os::raw::c_uint = 1937337965;
pub const kCAClockProperty_SyncSource: ::std::os::raw::c_uint = 1937337971;
pub const kCAClockProperty_SMPTEFormat: ::std::os::raw::c_uint = 1936552038;
pub const kCAClockProperty_SMPTEOffset: ::std::os::raw::c_uint = 1936552047;
pub const kCAClockProperty_MIDIClockDestinations: ::std::os::raw::c_uint = 1835164516;
pub const kCAClockProperty_MTCDestinations: ::std::os::raw::c_uint = 1836344164;
pub const kCAClockProperty_MTCFreewheelTime: ::std::os::raw::c_uint = 1836344951;
pub const kCAClockProperty_TempoMap: ::std::os::raw::c_uint = 1953329263;
pub const kCAClockProperty_MeterTrack: ::std::os::raw::c_uint = 1835365490;
pub const kCAClockProperty_Name: ::std::os::raw::c_uint = 1851878757;
pub const kCAClockProperty_SendMIDISPP: ::std::os::raw::c_uint = 1836281968;
pub type _bindgen_ty_361 = ::std::os::raw::c_uint;
pub type CAClockTimebase = UInt32;
pub const kCAClockTimebase_HostTime: ::std::os::raw::c_uint = 1752134516;
pub const kCAClockTimebase_AudioDevice: ::std::os::raw::c_uint = 1635083369;
pub const kCAClockTimebase_AudioOutputUnit: ::std::os::raw::c_uint = 1635086197;
pub type _bindgen_ty_362 = ::std::os::raw::c_uint;
pub type CAClockSyncMode = UInt32;
pub const kCAClockSyncMode_Internal: ::std::os::raw::c_uint = 1768846450;
pub const kCAClockSyncMode_MIDIClockTransport: ::std::os::raw::c_uint = 1835232363;
pub const kCAClockSyncMode_MTCTransport: ::std::os::raw::c_uint = 1835889763;
pub type _bindgen_ty_363 = ::std::os::raw::c_uint;
pub type CAClockSMPTEFormat = SMPTETimeType;
pub type CAClockMessage = UInt32;
pub const kCAClockMessage_StartTimeSet: ::std::os::raw::c_uint = 1937009005;
pub const kCAClockMessage_Started: ::std::os::raw::c_uint = 1937011316;
pub const kCAClockMessage_Stopped: ::std::os::raw::c_uint = 1937010544;
pub const kCAClockMessage_Armed: ::std::os::raw::c_uint = 1634889060;
pub const kCAClockMessage_Disarmed: ::std::os::raw::c_uint = 1684107885;
pub const kCAClockMessage_PropertyChanged: ::std::os::raw::c_uint = 1885562983;
pub const kCAClockMessage_WrongSMPTEFormat: ::std::os::raw::c_uint = 1064529264;
pub type _bindgen_ty_364 = ::std::os::raw::c_uint;
pub type CAClockTimeFormat = UInt32;
pub const kCAClockTimeFormat_HostTime: ::std::os::raw::c_uint = 1752134516;
pub const kCAClockTimeFormat_Samples: ::std::os::raw::c_uint = 1935764848;
pub const kCAClockTimeFormat_Beats: ::std::os::raw::c_uint = 1650811252;
pub const kCAClockTimeFormat_Seconds: ::std::os::raw::c_uint = 1936024435;
pub const kCAClockTimeFormat_SMPTESeconds: ::std::os::raw::c_uint = 1936552051;
pub const kCAClockTimeFormat_SMPTETime: ::std::os::raw::c_uint = 1936552052;
pub const kCAClockTimeFormat_AbsoluteSeconds: ::std::os::raw::c_uint = 1634952547;
pub type _bindgen_ty_365 = ::std::os::raw::c_uint;
pub const kCAClock_UnknownPropertyError: ::std::os::raw::c_int = -66816;
pub const kCAClock_InvalidPropertySizeError: ::std::os::raw::c_int = -66815;
pub const kCAClock_InvalidTimeFormatError: ::std::os::raw::c_int = -66814;
pub const kCAClock_InvalidSyncModeError: ::std::os::raw::c_int = -66813;
pub const kCAClock_InvalidSyncSourceError: ::std::os::raw::c_int = -66812;
pub const kCAClock_InvalidTimebaseError: ::std::os::raw::c_int = -66811;
pub const kCAClock_InvalidTimebaseSourceError: ::std::os::raw::c_int = -66810;
pub const kCAClock_InvalidSMPTEFormatError: ::std::os::raw::c_int = -66809;
pub const kCAClock_InvalidSMPTEOffsetError: ::std::os::raw::c_int = -66808;
pub const kCAClock_InvalidUnitError: ::std::os::raw::c_int = -66807;
pub const kCAClock_InvalidPlayRateError: ::std::os::raw::c_int = -66806;
pub const kCAClock_CannotSetTimeError: ::std::os::raw::c_int = -66805;
pub type _bindgen_ty_366 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueCAClock {
    _unused: [u8; 0],
}
pub type CAClockRef = *mut OpaqueCAClock;
pub type CAClockBeats = Float64;
pub type CAClockTempo = Float64;
pub type CAClockSamples = Float64;
pub type CAClockSeconds = Float64;
pub type CAClockListenerProc = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        message: CAClockMessage,
        param: *const ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CAClockTime {
    pub format: CAClockTimeFormat,
    pub reserved: UInt32,
    pub time: CAClockTime__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CAClockTime__bindgen_ty_1 {
    pub hostTime: UInt64,
    pub samples: CAClockSamples,
    pub beats: CAClockBeats,
    pub seconds: CAClockSeconds,
    pub smpte: SMPTETime,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_CAClockTime__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<CAClockTime__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(CAClockTime__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CAClockTime__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CAClockTime__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAClockTime__bindgen_ty_1>())).hostTime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime__bindgen_ty_1),
            "::",
            stringify!(hostTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAClockTime__bindgen_ty_1>())).samples as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime__bindgen_ty_1),
            "::",
            stringify!(samples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAClockTime__bindgen_ty_1>())).beats as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime__bindgen_ty_1),
            "::",
            stringify!(beats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<CAClockTime__bindgen_ty_1>())).seconds as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime__bindgen_ty_1),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAClockTime__bindgen_ty_1>())).smpte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime__bindgen_ty_1),
            "::",
            stringify!(smpte)
        )
    );
}
impl Default for CAClockTime__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_CAClockTime() {
    assert_eq!(
        ::std::mem::size_of::<CAClockTime>(),
        32usize,
        concat!("Size of: ", stringify!(CAClockTime))
    );
    assert_eq!(
        ::std::mem::align_of::<CAClockTime>(),
        8usize,
        concat!("Alignment of ", stringify!(CAClockTime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAClockTime>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAClockTime>())).reserved as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAClockTime>())).time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAClockTime),
            "::",
            stringify!(time)
        )
    );
}
impl Default for CAClockTime {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CATempoMapEntry {
    pub beats: CAClockBeats,
    pub tempoBPM: CAClockTempo,
}
#[test]
fn bindgen_test_layout_CATempoMapEntry() {
    assert_eq!(
        ::std::mem::size_of::<CATempoMapEntry>(),
        16usize,
        concat!("Size of: ", stringify!(CATempoMapEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<CATempoMapEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(CATempoMapEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CATempoMapEntry>())).beats as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CATempoMapEntry),
            "::",
            stringify!(beats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CATempoMapEntry>())).tempoBPM as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CATempoMapEntry),
            "::",
            stringify!(tempoBPM)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct CAMeterTrackEntry {
    pub beats: CAClockBeats,
    pub meterNumer: UInt16,
    pub meterDenom: UInt16,
}
#[test]
fn bindgen_test_layout_CAMeterTrackEntry() {
    assert_eq!(
        ::std::mem::size_of::<CAMeterTrackEntry>(),
        16usize,
        concat!("Size of: ", stringify!(CAMeterTrackEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<CAMeterTrackEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(CAMeterTrackEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAMeterTrackEntry>())).beats as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAMeterTrackEntry),
            "::",
            stringify!(beats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAMeterTrackEntry>())).meterNumer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAMeterTrackEntry),
            "::",
            stringify!(meterNumer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CAMeterTrackEntry>())).meterDenom as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CAMeterTrackEntry),
            "::",
            stringify!(meterDenom)
        )
    );
}
extern "C" {
    pub fn CAClockNew(inReservedFlags: UInt32, outCAClock: *mut CAClockRef) -> OSStatus;
}
extern "C" {
    pub fn CAClockDispose(inCAClock: CAClockRef) -> OSStatus;
}
extern "C" {
    pub fn CAClockGetPropertyInfo(
        inCAClock: CAClockRef,
        inPropertyID: CAClockPropertyID,
        outSize: *mut UInt32,
        outWritable: *mut Boolean,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockGetProperty(
        inCAClock: CAClockRef,
        inPropertyID: CAClockPropertyID,
        ioPropertyDataSize: *mut UInt32,
        outPropertyData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockSetProperty(
        inCAClock: CAClockRef,
        inPropertyID: CAClockPropertyID,
        inPropertyDataSize: UInt32,
        inPropertyData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockAddListener(
        inCAClock: CAClockRef,
        inListenerProc: CAClockListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockRemoveListener(
        inCAClock: CAClockRef,
        inListenerProc: CAClockListenerProc,
        inUserData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockSetCurrentTime(inCAClock: CAClockRef, inTime: *const CAClockTime) -> OSStatus;
}
extern "C" {
    pub fn CAClockGetCurrentTime(
        inCAClock: CAClockRef,
        inTimeFormat: CAClockTimeFormat,
        outTime: *mut CAClockTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockGetStartTime(
        inCAClock: CAClockRef,
        inTimeFormat: CAClockTimeFormat,
        outTime: *mut CAClockTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockTranslateTime(
        inCAClock: CAClockRef,
        inTime: *const CAClockTime,
        inOutputTimeFormat: CAClockTimeFormat,
        outTime: *mut CAClockTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockStart(inCAClock: CAClockRef) -> OSStatus;
}
extern "C" {
    pub fn CAClockStop(inCAClock: CAClockRef) -> OSStatus;
}
extern "C" {
    pub fn CAClockArm(inCAClock: CAClockRef) -> OSStatus;
}
extern "C" {
    pub fn CAClockDisarm(inCAClock: CAClockRef) -> OSStatus;
}
extern "C" {
    pub fn CAClockSetPlayRate(inCAClock: CAClockRef, inPlayRate: Float64) -> OSStatus;
}
extern "C" {
    pub fn CAClockGetPlayRate(inCAClock: CAClockRef, outPlayRate: *mut Float64) -> OSStatus;
}
extern "C" {
    pub fn CAClockGetCurrentTempo(
        inCAClock: CAClockRef,
        outTempo: *mut CAClockTempo,
        outTimestamp: *mut CAClockTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockSetCurrentTempo(
        inCAClock: CAClockRef,
        inTempo: CAClockTempo,
        inTimestamp: *const CAClockTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockSecondsToSMPTETime(
        inCAClock: CAClockRef,
        inSeconds: CAClockSeconds,
        inSubframeDivisor: UInt16,
        outSMPTETime: *mut SMPTETime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockSMPTETimeToSeconds(
        inCAClock: CAClockRef,
        inSMPTETime: *const SMPTETime,
        outSeconds: *mut CAClockSeconds,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockBeatsToBarBeatTime(
        inCAClock: CAClockRef,
        inBeats: CAClockBeats,
        inSubbeatDivisor: UInt16,
        outBarBeatTime: *mut CABarBeatTime,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockBarBeatTimeToBeats(
        inCAClock: CAClockRef,
        inBarBeatTime: *const CABarBeatTime,
        outBeats: *mut CAClockBeats,
    ) -> OSStatus;
}
extern "C" {
    pub fn CAClockParseMIDI(
        inCAClock: CAClockRef,
        inMIDIPacketList: *const MIDIPacketList,
    ) -> OSStatus;
}
pub const kAudioSessionNoError: ::std::os::raw::c_uint = 0;
pub const kAudioSessionNotInitialized: ::std::os::raw::c_uint = 560557673;
pub const kAudioSessionAlreadyInitialized: ::std::os::raw::c_uint = 1768843636;
pub const kAudioSessionInitializationError: ::std::os::raw::c_uint = 1768843583;
pub const kAudioSessionUnsupportedPropertyError: ::std::os::raw::c_uint = 1886681407;
pub const kAudioSessionBadPropertySizeError: ::std::os::raw::c_uint = 561211770;
pub const kAudioSessionNotActiveError: ::std::os::raw::c_uint = 560030580;
pub const kAudioServicesNoHardwareError: ::std::os::raw::c_uint = 1852794999;
pub const kAudioSessionNoCategorySet: ::std::os::raw::c_uint = 1063477620;
pub const kAudioSessionIncompatibleCategory: ::std::os::raw::c_uint = 560161140;
pub const kAudioSessionUnspecifiedError: ::std::os::raw::c_uint = 2003329396;
pub type _bindgen_ty_367 = ::std::os::raw::c_uint;
pub type AudioSessionPropertyID = UInt32;
pub const kAudioSessionBeginInterruption: ::std::os::raw::c_uint = 1;
pub const kAudioSessionEndInterruption: ::std::os::raw::c_uint = 0;
pub type _bindgen_ty_368 = ::std::os::raw::c_uint;
pub const kAudioSessionCategory_AmbientSound: ::std::os::raw::c_uint = 1634558569;
pub const kAudioSessionCategory_SoloAmbientSound: ::std::os::raw::c_uint = 1936682095;
pub const kAudioSessionCategory_MediaPlayback: ::std::os::raw::c_uint = 1835361385;
pub const kAudioSessionCategory_RecordAudio: ::std::os::raw::c_uint = 1919247201;
pub const kAudioSessionCategory_PlayAndRecord: ::std::os::raw::c_uint = 1886151026;
pub const kAudioSessionCategory_AudioProcessing: ::std::os::raw::c_uint = 1886547811;
pub type _bindgen_ty_369 = ::std::os::raw::c_uint;
pub const kAudioSessionOverrideAudioRoute_None: ::std::os::raw::c_uint = 0;
pub const kAudioSessionOverrideAudioRoute_Speaker: ::std::os::raw::c_uint = 1936747378;
pub type _bindgen_ty_370 = ::std::os::raw::c_uint;
pub const kAudioSessionRouteChangeReason_Unknown: ::std::os::raw::c_uint = 0;
pub const kAudioSessionRouteChangeReason_NewDeviceAvailable: ::std::os::raw::c_uint = 1;
pub const kAudioSessionRouteChangeReason_OldDeviceUnavailable: ::std::os::raw::c_uint = 2;
pub const kAudioSessionRouteChangeReason_CategoryChange: ::std::os::raw::c_uint = 3;
pub const kAudioSessionRouteChangeReason_Override: ::std::os::raw::c_uint = 4;
pub const kAudioSessionRouteChangeReason_WakeFromSleep: ::std::os::raw::c_uint = 6;
pub const kAudioSessionRouteChangeReason_NoSuitableRouteForCategory: ::std::os::raw::c_uint = 7;
pub const kAudioSessionRouteChangeReason_RouteConfigurationChange: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_371 = ::std::os::raw::c_uint;
extern "C" {
    pub static kAudioSession_RouteChangeKey_Reason: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteChangeKey_PreviousRouteDescription: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteChangeKey_CurrentRouteDescription: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteKey_Inputs: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteKey_Outputs: CFStringRef;
}
extern "C" {
    pub static kAudioSession_AudioRouteKey_Type: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_LineIn: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_BuiltInMic: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_HeadsetMic: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_BluetoothHFP: CFStringRef;
}
extern "C" {
    pub static kAudioSessionInputRoute_USBAudio: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_LineOut: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_Headphones: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BluetoothHFP: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BluetoothA2DP: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BuiltInReceiver: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_BuiltInSpeaker: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_USBAudio: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_HDMI: CFStringRef;
}
extern "C" {
    pub static kAudioSessionOutputRoute_AirPlay: CFStringRef;
}
extern "C" {
    pub static kAudioSession_InputSourceKey_ID: CFStringRef;
}
extern "C" {
    pub static kAudioSession_InputSourceKey_Description: CFStringRef;
}
extern "C" {
    pub static kAudioSession_OutputDestinationKey_ID: CFStringRef;
}
extern "C" {
    pub static kAudioSession_OutputDestinationKey_Description: CFStringRef;
}
pub const kAudioSessionInterruptionType_ShouldResume: ::std::os::raw::c_uint = 1769108333;
pub const kAudioSessionInterruptionType_ShouldNotResume: ::std::os::raw::c_uint = 561148781;
pub type _bindgen_ty_372 = ::std::os::raw::c_uint;
pub type AudioSessionInterruptionType = UInt32;
pub const kAudioSessionMode_Default: ::std::os::raw::c_uint = 1684434036;
pub const kAudioSessionMode_VoiceChat: ::std::os::raw::c_uint = 1986225012;
pub const kAudioSessionMode_VideoRecording: ::std::os::raw::c_uint = 1987208036;
pub const kAudioSessionMode_Measurement: ::std::os::raw::c_uint = 1836281204;
pub const kAudioSessionMode_GameChat: ::std::os::raw::c_uint = 1735222132;
pub type _bindgen_ty_373 = ::std::os::raw::c_uint;
pub const kAudioSessionProperty_PreferredHardwareSampleRate: ::std::os::raw::c_uint = 1752658802;
pub const kAudioSessionProperty_PreferredHardwareIOBufferDuration: ::std::os::raw::c_uint =
    1768907364;
pub const kAudioSessionProperty_AudioCategory: ::std::os::raw::c_uint = 1633902964;
pub const kAudioSessionProperty_AudioRouteChange: ::std::os::raw::c_uint = 1919902568;
pub const kAudioSessionProperty_CurrentHardwareSampleRate: ::std::os::raw::c_uint = 1667789682;
pub const kAudioSessionProperty_CurrentHardwareInputNumberChannels: ::std::os::raw::c_uint =
    1667787107;
pub const kAudioSessionProperty_CurrentHardwareOutputNumberChannels: ::std::os::raw::c_uint =
    1667788643;
pub const kAudioSessionProperty_CurrentHardwareOutputVolume: ::std::os::raw::c_uint = 1667788662;
pub const kAudioSessionProperty_CurrentHardwareInputLatency: ::std::os::raw::c_uint = 1667853428;
pub const kAudioSessionProperty_CurrentHardwareOutputLatency: ::std::os::raw::c_uint = 1668246644;
pub const kAudioSessionProperty_CurrentHardwareIOBufferDuration: ::std::os::raw::c_uint =
    1667785316;
pub const kAudioSessionProperty_OtherAudioIsPlaying: ::std::os::raw::c_uint = 1869899890;
pub const kAudioSessionProperty_OverrideAudioRoute: ::std::os::raw::c_uint = 1870033508;
pub const kAudioSessionProperty_AudioInputAvailable: ::std::os::raw::c_uint = 1634296182;
pub const kAudioSessionProperty_ServerDied: ::std::os::raw::c_uint = 1684628836;
pub const kAudioSessionProperty_OtherMixableAudioShouldDuck: ::std::os::raw::c_uint = 1685414763;
pub const kAudioSessionProperty_OverrideCategoryMixWithOthers: ::std::os::raw::c_uint = 1668114808;
pub const kAudioSessionProperty_OverrideCategoryDefaultToSpeaker: ::std::os::raw::c_uint =
    1668509803;
pub const kAudioSessionProperty_OverrideCategoryEnableBluetoothInput: ::std::os::raw::c_uint =
    1667394677;
pub const kAudioSessionProperty_InterruptionType: ::std::os::raw::c_uint = 1954115685;
pub const kAudioSessionProperty_Mode: ::std::os::raw::c_uint = 1836016741;
pub const kAudioSessionProperty_InputSources: ::std::os::raw::c_uint = 1936876403;
pub const kAudioSessionProperty_OutputDestinations: ::std::os::raw::c_uint = 1685288051;
pub const kAudioSessionProperty_InputSource: ::std::os::raw::c_uint = 1769173603;
pub const kAudioSessionProperty_OutputDestination: ::std::os::raw::c_uint = 1868854132;
pub const kAudioSessionProperty_InputGainAvailable: ::std::os::raw::c_uint = 1768382838;
pub const kAudioSessionProperty_InputGainScalar: ::std::os::raw::c_uint = 1768387427;
pub const kAudioSessionProperty_AudioRouteDescription: ::std::os::raw::c_uint = 1668440434;
pub type _bindgen_ty_374 = ::std::os::raw::c_uint;
pub type AudioSessionInterruptionListener = ::std::option::Option<
    unsafe extern "C" fn(inClientData: *mut ::std::os::raw::c_void, inInterruptionState: UInt32),
>;
pub type AudioSessionPropertyListener = ::std::option::Option<
    unsafe extern "C" fn(
        inClientData: *mut ::std::os::raw::c_void,
        inID: AudioSessionPropertyID,
        inDataSize: UInt32,
        inData: *const ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn AudioSessionInitialize(
        inRunLoop: CFRunLoopRef,
        inRunLoopMode: CFStringRef,
        inInterruptionListener: AudioSessionInterruptionListener,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionSetActive(active: Boolean) -> OSStatus;
}
pub const kAudioSessionSetActiveFlag_NotifyOthersOnDeactivation: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_375 = ::std::os::raw::c_uint;
extern "C" {
    pub fn AudioSessionSetActiveWithFlags(active: Boolean, inFlags: UInt32) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionGetProperty(
        inID: AudioSessionPropertyID,
        ioDataSize: *mut UInt32,
        outData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionSetProperty(
        inID: AudioSessionPropertyID,
        inDataSize: UInt32,
        inData: *const ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionGetPropertySize(
        inID: AudioSessionPropertyID,
        outDataSize: *mut UInt32,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionAddPropertyListener(
        inID: AudioSessionPropertyID,
        inProc: AudioSessionPropertyListener,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionRemovePropertyListener(inID: AudioSessionPropertyID) -> OSStatus;
}
extern "C" {
    pub fn AudioSessionRemovePropertyListenerWithUserData(
        inID: AudioSessionPropertyID,
        inProc: AudioSessionPropertyListener,
        inClientData: *mut ::std::os::raw::c_void,
    ) -> OSStatus;
}
pub const kAudioSessionCategory_UserInterfaceSoundEffects: ::std::os::raw::c_uint = 1969841784;
pub const kAudioSessionCategory_LiveAudio: ::std::os::raw::c_uint = 1818850917;
pub type _bindgen_ty_376 = ::std::os::raw::c_uint;
pub const kAudioSessionProperty_AudioRoute: ::std::os::raw::c_uint = 1919907188;
pub type _bindgen_ty_377 = ::std::os::raw::c_uint;
extern "C" {
    pub fn GetNameFromSoundBank(
        inSoundBankRef: *const FSRef,
        outName: *mut CFStringRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn CopyNameFromSoundBank(inURL: CFURLRef, outName: *mut CFStringRef) -> OSStatus;
}
extern "C" {
    pub fn CopyInstrumentInfoFromSoundBank(
        inURL: CFURLRef,
        outInstrumentInfo: *mut CFArrayRef,
    ) -> OSStatus;
}
extern "C" {
    pub fn AudioGetCurrentHostTime() -> UInt64;
}
extern "C" {
    pub fn AudioGetHostClockFrequency() -> Float64;
}
extern "C" {
    pub fn AudioGetHostClockMinimumTimeDelta() -> UInt32;
}
extern "C" {
    pub fn AudioConvertHostTimeToNanos(inHostTime: UInt64) -> UInt64;
}
extern "C" {
    pub fn AudioConvertNanosToHostTime(inNanos: UInt64) -> UInt64;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _os_object_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_object_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_group_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_source_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_channel_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_mach_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_mach_msg_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_semaphore_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dispatch_io_s {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct OpaqueAudioFileID {
    pub _address: u8,
}
